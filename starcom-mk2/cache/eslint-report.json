[{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/.eslintrc.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/__mocks__/styleMock.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/api/auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/api/eia.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/api/intelligence.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/api/market.mock.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/api/market.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/api/rss.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/cache/Cache.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/cache/CacheManager.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[128,131],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[128,131],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import Cache from './Cache';\n\nclass CacheManager {\n  private static instance: CacheManager;\n  private caches: Map<string, Cache<any>>;\n\n  private constructor() {\n    this.caches = new Map();\n  }\n\n  public static getInstance(): CacheManager {\n    if (!CacheManager.instance) {\n      CacheManager.instance = new CacheManager();\n    }\n    return CacheManager.instance;\n  }\n\n  createCache<T>(name: string, defaultTTL?: number): Cache<T> {\n    if (this.caches.has(name)) {\n      throw new Error(`Cache with name ${name} already exists`);\n    }\n    if (defaultTTL !== undefined && (typeof defaultTTL !== 'number' || defaultTTL <= 0)) {\n      throw new Error(`Invalid TTL value: ${defaultTTL}. TTL must be a positive number.`);\n    }\n    const cache = new Cache<T>(defaultTTL);\n    this.caches.set(name, cache);\n    this.log(`Cache created: ${name} with TTL: ${defaultTTL}`);\n    return cache;\n  }\n\n  getCache<T>(name: string): Cache<T> | null {\n    const cache = this.caches.get(name) as Cache<T> || null;\n    if (!cache) {\n      this.warn(`Cache not found: ${name}`);\n    }\n    return cache;\n  }\n\n  deleteCache(name: string) {\n    if (this.caches.delete(name)) {\n      this.log(`Cache deleted: ${name}`);\n    } else {\n      this.warn(`Cache delete failed: ${name} not found`);\n    }\n  }\n\n  clearAllCaches() {\n    this.caches.forEach(cache => cache.clear());\n    this.log('All caches cleared');\n  }\n\n  getAllCacheNames(): string[] {\n    return Array.from(this.caches.keys());\n  }\n\n  hasCache(name: string): boolean {\n    return this.caches.has(name);\n  }\n\n  private log(message: string) {\n    console.log(`[CacheManager] ${message}`);\n  }\n\n  private warn(message: string) {\n    console.warn(`[CacheManager] ${message}`);\n  }\n}\n\nexport default CacheManager;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/cache/CacheRegistry.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[178,181],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[178,181],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[520,523],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[520,523],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import CacheManager from './CacheManager';\n\nclass CacheRegistry {\n  private static instance: CacheRegistry;\n  private cacheManager: CacheManager;\n  private services: Map<string, any>;\n\n  private constructor() {\n    this.cacheManager = CacheManager.getInstance();\n    this.services = new Map();\n  }\n\n  public static getInstance(): CacheRegistry {\n    if (!CacheRegistry.instance) {\n      CacheRegistry.instance = new CacheRegistry();\n    }\n    return CacheRegistry.instance;\n  }\n\n  registerService(name: string, service: any) {\n    if (this.services.has(name)) {\n      throw new Error(`Service with name ${name} already registered`);\n    }\n    this.services.set(name, service);\n    console.log(`Service registered: ${name}`);\n  }\n\n  getService<T>(name: string): T | null {\n    const service = this.services.get(name) || null;\n    if (!service) {\n      console.warn(`Service not found: ${name}`);\n    }\n    return service;\n  }\n\n  getCacheManager(): CacheManager {\n    return this.cacheManager;\n  }\n}\n\nexport default CacheRegistry;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/cache/EIADataCacheService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/cache/IntelReportCache.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/AuthErrorBoundary.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/AuthErrorBoundary.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[256,259],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[256,259],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\n// AI-NOTE: Error boundary for authentication and wallet errors (see artifacts)\nclass AuthErrorBoundary extends React.Component<{\n  children: React.ReactNode\n}, { hasError: boolean; error: Error | null }> {\n  constructor(props: any) {\n    super(props);\n    this.state = { hasError: false, error: null };\n  }\n\n  static getDerivedStateFromError(error: Error) {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch() {\n    // No-op: error boundary logic does not use these parameters\n  }\n\n  handleRetry = () => {\n    this.setState({ hasError: false, error: null });\n    window.location.reload();\n  };\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div className=\"p-6 text-center\">\n          <h2 className=\"text-lg font-bold mb-2\">Authentication Error</h2>\n          <p className=\"mb-4\">{this.state.error?.message || 'An unknown error occurred.'}</p>\n          <button className=\"bg-blue-600 text-white px-4 py-2 rounded\" onClick={this.handleRetry}>\n            Retry\n          </button>\n        </div>\n      );\n    }\n    return this.props.children;\n  }\n}\n\nexport default AuthErrorBoundary;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/TermsModal.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/TermsModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/TokenGatedPage.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/TokenGatedPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/WalletStatus.modal.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/WalletStatus.network.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":51,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1719,1722],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1719,1722],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Tests for WalletStatus network switching, banners, and network-related UI\nimport React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport WalletStatus from './WalletStatus';\nimport { vi } from 'vitest';\nimport { AuthContextType } from '../../context/AuthContext';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { WagmiProvider } from 'wagmi';\nimport { RainbowKitProvider, getDefaultConfig } from '@rainbow-me/rainbowkit';\nimport { mainnet, sepolia } from 'wagmi/chains';\nimport { http } from 'wagmi';\nimport userEvent from '@testing-library/user-event';\nimport { Provider } from 'ethers';\nimport { TestAuthProvider } from '../../context/AuthContext.tsx';\n\nconst config = getDefaultConfig({\n  appName: 'Starcom dApp',\n  projectId: 'test',\n  chains: [mainnet, sepolia],\n  transports: {\n    [mainnet.id]: http(),\n    [sepolia.id]: http(),\n  },\n});\nconst queryClient = new QueryClient();\nconst defaultAuthValue: AuthContextType = {\n  isAuthenticated: false,\n  address: null,\n  provider: null,\n  signer: null,\n  connectWallet: vi.fn(),\n  disconnectWallet: vi.fn(),\n  isLoading: false,\n  error: null,\n  connectionStatus: 'idle',\n  switchNetwork: vi.fn(),\n  authenticate: vi.fn(async () => true),\n  logout: vi.fn(),\n  isSessionValid: vi.fn(() => false),\n  authError: null,\n  expectedChainId: 1,\n  expectedNetworkName: 'Mainnet',\n  setError: vi.fn(),\n};\n\ndescribe('WalletStatus Network', () => {\n  it('updates network info banner on network change', async () => {\n    const provider: Provider & { getNetwork: ReturnType<typeof vi.fn> } = {\n      getNetwork: vi.fn().mockResolvedValue({ name: 'Mainnet', chainId: 1 }),\n    } as any;\n    render(\n      <QueryClientProvider client={queryClient}>\n        <WagmiProvider config={config}>\n          <RainbowKitProvider>\n            <TestAuthProvider value={{\n              ...defaultAuthValue,\n              isAuthenticated: true,\n              address: '0x123',\n              connectionStatus: 'connected',\n              expectedChainId: 1,\n              expectedNetworkName: 'Mainnet',\n              provider,\n            }}>\n              <WalletStatus />\n            </TestAuthProvider>\n          </RainbowKitProvider>\n        </WagmiProvider>\n      </QueryClientProvider>\n    );\n    expect(screen.getAllByText(/mainnet/i).length).toBeGreaterThanOrEqual(1);\n    provider.getNetwork.mockResolvedValueOnce({ name: 'Sepolia', chainId: 11155111 });\n    render(\n      <QueryClientProvider client={queryClient}>\n        <WagmiProvider config={config}>\n          <RainbowKitProvider>\n            <TestAuthProvider value={{\n              ...defaultAuthValue,\n              isAuthenticated: true,\n              address: '0x123',\n              connectionStatus: 'connected',\n              expectedChainId: 11155111,\n              expectedNetworkName: 'Sepolia',\n              provider,\n            }}>\n              <WalletStatus />\n            </TestAuthProvider>\n          </RainbowKitProvider>\n        </WagmiProvider>\n      </QueryClientProvider>\n    );\n    expect(screen.getAllByText(/sepolia/i).length).toBeGreaterThanOrEqual(1);\n  });\n\n  it('shows confirmation dialog before switch network', async () => {\n    render(\n      <QueryClientProvider client={queryClient}>\n        <WagmiProvider config={config}>\n          <RainbowKitProvider>\n            <TestAuthProvider value={{ isAuthenticated: true, address: '0x123', connectionStatus: 'connected', ...defaultAuthValue }}>\n              <WalletStatus />\n            </TestAuthProvider>\n          </RainbowKitProvider>\n        </WagmiProvider>\n      </QueryClientProvider>\n    );\n    const btn = screen.getByRole('button', { name: /switch network/i });\n    userEvent.click(btn);\n    expect(await screen.findByText(/are you sure you want to switch/i)).toBeInTheDocument();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/WalletStatus.session.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'waitFor' is defined but never used.","line":3,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":38}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Tests for WalletStatus session expiry, countdown, and related warnings\nimport React from 'react';\nimport { render, screen, act, waitFor } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport WalletStatus from './WalletStatus';\nimport { vi } from 'vitest';\nimport { AuthContextType } from '../../context/AuthContext';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { WagmiProvider } from 'wagmi';\nimport { RainbowKitProvider, getDefaultConfig } from '@rainbow-me/rainbowkit';\nimport { mainnet, sepolia } from 'wagmi/chains';\nimport { http } from 'wagmi';\nimport { TestAuthProvider } from '../../context/AuthContext.tsx';\nimport userEvent from '@testing-library/user-event';\n\nconst config = getDefaultConfig({\n  appName: 'Starcom dApp',\n  projectId: 'test',\n  chains: [mainnet, sepolia],\n  transports: {\n    [mainnet.id]: http(),\n    [sepolia.id]: http(),\n  },\n});\nconst queryClient = new QueryClient();\nconst defaultAuthValue: AuthContextType = {\n  isAuthenticated: false,\n  address: null,\n  provider: null,\n  signer: null,\n  connectWallet: vi.fn(),\n  disconnectWallet: vi.fn(),\n  isLoading: false,\n  error: null,\n  connectionStatus: 'idle',\n  switchNetwork: vi.fn(),\n  authenticate: vi.fn(async () => true),\n  logout: vi.fn(),\n  isSessionValid: vi.fn(() => false),\n  authError: null,\n  expectedChainId: 1,\n  expectedNetworkName: 'Mainnet',\n  setError: vi.fn(),\n};\n\n// Use this provider mock in all relevant tests:\nconst providerMock = {\n  getNetwork: () => Promise.resolve({ chainId: 1, name: 'mainnet' }),\n  // Add any other required methods as no-ops\n};\n\ndescribe('WalletStatus Session Expiry', () => {\n  afterEach(() => {\n    vi.useRealTimers();\n    vi.resetModules();\n    vi.clearAllMocks();\n  });\n\n  it('shows session expiry countdown and warning modal (refactored)', async () => {\n    vi.useFakeTimers();\n    const expiry = Date.now() + 2000;\n    localStorage.setItem('auth', JSON.stringify({ expiry }));\n    const mockAuthValue = {\n      ...defaultAuthValue,\n      isAuthenticated: true,\n      isSessionValid: () => true,\n      address: '0x123',\n      expectedChainId: 1,\n      expectedNetworkName: 'Mainnet',\n      provider: providerMock,\n      connectionStatus: 'connected',\n      error: null,\n    };\n    render(\n      <QueryClientProvider client={queryClient}>\n        <WagmiProvider config={config}>\n          <RainbowKitProvider>\n            <TestAuthProvider value={mockAuthValue}>\n              <WalletStatus sessionWarningThreshold={1000} />\n            </TestAuthProvider>\n          </RainbowKitProvider>\n        </WagmiProvider>\n      </QueryClientProvider>\n    );\n    act(() => {\n      vi.advanceTimersByTime(1500);\n    });\n    // Confirm showSessionWarning is true in debug output\n    // Check for countdown and modal in the DOM\n    expect(screen.getByText(/session expires in/i)).toBeInTheDocument();\n    expect(screen.getByRole('dialog', { name: /session expiry warning/i })).toBeInTheDocument();\n    localStorage.removeItem('auth');\n  }, 10000);\n\n  it('shows session expiry warning even if error modal is open', async () => {\n    const expiry = Date.now() + 1000;\n    const mockAuthValue = {\n      ...defaultAuthValue,\n      isAuthenticated: true,\n      isSessionValid: () => true,\n      error: 'Please switch to the correct network (chainId: 1)',\n      connectionStatus: 'error',\n    };\n    localStorage.setItem('auth', JSON.stringify({ expiry }));\n    render(\n      <QueryClientProvider client={queryClient}>\n        <WagmiProvider config={config}>\n          <RainbowKitProvider>\n            <TestAuthProvider value={mockAuthValue}>\n              <WalletStatus />\n            </TestAuthProvider>\n          </RainbowKitProvider>\n        </WagmiProvider>\n      </QueryClientProvider>\n    );\n    expect(screen.getByRole('dialog')).toBeInTheDocument();\n    await new Promise((resolve) => setTimeout(resolve, 1100));\n    const dialogs = screen.queryAllByRole('dialog');\n    const warningModal = dialogs.find(dlg => dlg.textContent?.toLowerCase().includes('your session is about to expire'));\n    expect(warningModal).toBeFalsy();\n    localStorage.removeItem('auth');\n  });\n\n  it('session expiry warning modal has working Re-authenticate button (refactored)', async () => {\n    vi.useFakeTimers();\n    const expiry = Date.now() + 2000;\n    const authenticate = vi.fn();\n    localStorage.setItem('auth', JSON.stringify({ expiry }));\n    const mockAuthValue = {\n      ...defaultAuthValue,\n      isAuthenticated: true,\n      isSessionValid: () => true,\n      address: '0x123',\n      expectedChainId: 1,\n      expectedNetworkName: 'Mainnet',\n      provider: providerMock,\n      connectionStatus: 'connected',\n      error: null,\n      authenticate,\n    };\n    render(\n      <QueryClientProvider client={queryClient}>\n        <WagmiProvider config={config}>\n          <RainbowKitProvider>\n            <TestAuthProvider value={mockAuthValue}>\n              <WalletStatus sessionWarningThreshold={1000} />\n            </TestAuthProvider>\n          </RainbowKitProvider>\n        </WagmiProvider>\n      </QueryClientProvider>\n    );\n    act(() => {\n      vi.advanceTimersByTime(1500);\n    });\n    // Confirm showSessionWarning is true in debug output\n    // Now check for the modal and button in the DOM\n    const dialog = screen.getByRole('dialog', { name: /session expiry warning/i });\n    const reauthBtn = screen.getByRole('button', { name: /re-authenticate/i });\n    expect(dialog).toBeInTheDocument();\n    expect(reauthBtn).toBeInTheDocument();\n    await userEvent.click(reauthBtn);\n    expect(authenticate).toHaveBeenCalled();\n    localStorage.removeItem('auth');\n  }, 10000);\n});\n\n// Comment out or skip diagnostics tests (not critical for user-facing functionality)\n// describe('WalletStatus Session Expiry - Diagnostics (Refactored)', () => {\n//   it('renders SessionExpiryCountdown and updates time (proven pattern)', async () => {\n//     vi.useFakeTimers();\n//     const expiry = Date.now() + 4000;\n//     localStorage.setItem('auth', JSON.stringify({ expiry }));\n//     render(\n//       <QueryClientProvider client={queryClient}>\n//         <WagmiProvider config={config}>\n//           <RainbowKitProvider>\n//             <TestAuthProvider value={{ ...defaultAuthValue, isAuthenticated: true, isSessionValid: () => true }}>\n//               <WalletStatus sessionWarningThreshold={1000} />\n//             </TestAuthProvider>\n//           </RainbowKitProvider>\n//         </WagmiProvider>\n//       </QueryClientProvider>\n//     );\n//     // Step 1: countdown only\n//     await act(async () => {\n//       vi.advanceTimersByTime(2000);\n//     });\n//     await waitFor(() => {\n//       expect(document.querySelector('.session-expiry-countdown')).toBeTruthy();\n//     });\n//     // Step 2: cross warning threshold\n//     await act(async () => {\n//       vi.advanceTimersByTime(1500);\n//     });\n//     await waitFor(() => {\n//       expect(screen.getByRole('dialog', { name: /session expiry warning/i })).toBeInTheDocument();\n//     });\n//     localStorage.removeItem('auth');\n//     vi.useRealTimers();\n//   }, 10000);\n\n//   it('renders the session expiry warning modal with correct content and button', async () => {\n//     vi.useFakeTimers();\n//     const expiry = Date.now() + 4000;\n//     localStorage.setItem('auth', JSON.stringify({ expiry }));\n//     render(\n//       <QueryClientProvider client={queryClient}>\n//         <WagmiProvider config={config}>\n//           <RainbowKitProvider>\n//             <TestAuthProvider value={{ ...defaultAuthValue, isAuthenticated: true, isSessionValid: () => true }}>\n//               <WalletStatus sessionWarningThreshold={1000} />\n//             </TestAuthProvider>\n//           </RainbowKitProvider>\n//         </WagmiProvider>\n//       </QueryClientProvider>\n//     );\n//     // Step 1: advance to just before warning\n//     await act(async () => {\n//       vi.advanceTimersByTime(2500);\n//     });\n//     // Step 2: cross warning threshold\n//     await act(async () => {\n//       vi.advanceTimersByTime(1000);\n//     });\n//     await waitFor(() => {\n//       const modal = screen.getByRole('dialog', { name: /session expiry warning/i });\n//       expect(modal).toBeInTheDocument();\n//       expect(screen.getByRole('button', { name: /re-authenticate/i })).toBeInTheDocument();\n//     });\n//     localStorage.removeItem('auth');\n//     vi.useRealTimers();\n//   }, 10000);\n// });\n\n// Debug: Add a test that spies on the onWarning callback in WalletStatus\nit('calls onWarning in WalletStatus when countdown crosses warning threshold', async () => {\n  vi.useFakeTimers();\n  const expiry = Date.now() + 2000;\n  localStorage.setItem('auth', JSON.stringify({ expiry }));\n  const mockAuthValue = {\n    ...defaultAuthValue,\n    isAuthenticated: true,\n    isSessionValid: () => true,\n    address: '0x123',\n    expectedChainId: 1,\n    expectedNetworkName: 'Mainnet',\n    provider: providerMock,\n    connectionStatus: 'connected',\n    error: null,\n  };\n  // Spy on console.log to capture debug output\n  render(\n    <QueryClientProvider client={queryClient}>\n      <WagmiProvider config={config}>\n        <RainbowKitProvider>\n          <TestAuthProvider value={mockAuthValue}>\n            <WalletStatus sessionWarningThreshold={1000} />\n          </TestAuthProvider>\n        </RainbowKitProvider>\n      </WagmiProvider>\n    </QueryClientProvider>\n  );\n  act(() => {\n    vi.advanceTimersByTime(1500);\n  });\n  // Look for debug output indicating onWarning fired or modal rendered\n  const logSpy = vi.spyOn(console, 'log');\n  const logs = logSpy.mock.calls.map(call => call.join(' ')).join('\\n');\n  expect(logs).toMatch(/showSessionWarning/);\n  logSpy.mockRestore();\n  localStorage.removeItem('auth');\n});\n\nit('renders the session expiry warning modal in WalletStatus when showSessionWarning is true (after warning fires)', async () => {\n  vi.useFakeTimers();\n  const expiry = Date.now() + 2000;\n  localStorage.setItem('auth', JSON.stringify({ expiry }));\n  const mockAuthValue = {\n    ...defaultAuthValue,\n    isAuthenticated: true,\n    isSessionValid: () => true,\n    address: '0x123',\n    expectedChainId: 1,\n    expectedNetworkName: 'Mainnet',\n    provider: providerMock,\n    connectionStatus: 'connected',\n    error: null,\n  };\n  render(\n    <QueryClientProvider client={queryClient}>\n      <WagmiProvider config={config}>\n        <RainbowKitProvider>\n          <TestAuthProvider value={mockAuthValue}>\n            <WalletStatus sessionWarningThreshold={1000} />\n          </TestAuthProvider>\n        </RainbowKitProvider>\n      </WagmiProvider>\n    </QueryClientProvider>\n  );\n  act(() => {\n    vi.advanceTimersByTime(1500);\n  });\n  // Confirm showSessionWarning is true in debug output\n  // Now check for the modal in the DOM\n  expect(screen.getByRole('dialog', { name: /session expiry warning/i })).toBeInTheDocument();\n  localStorage.removeItem('auth');\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/WalletStatus.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/WalletStatus.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'currentNetwork' is assigned a value but never used.","line":32,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'currentChainId' is assigned a value but never used.","line":33,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":24}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { useAuth } from '../../context/AuthContext.tsx';\nimport Modal from '../Shared/Modal';\nimport Snackbar from '../Shared/Snackbar';\nimport Tooltip from '../Shared/Tooltip';\nimport SessionExpiryCountdown from '../Shared/SessionExpiryCountdown';\n\ninterface WalletStatusProps {\n  sessionWarningThreshold?: number;\n}\n\nconst WalletStatus: React.FC<WalletStatusProps> = ({ sessionWarningThreshold = 5 }) => {\n  const {\n    isAuthenticated,\n    address,\n    isLoading,\n    error,\n    connectionStatus,\n    connectWallet,\n    disconnectWallet,\n    switchNetwork,\n    authenticate,\n    logout,\n    isSessionValid,\n    authError,\n    expectedChainId,\n    expectedNetworkName,\n    provider,\n    setError, // Add setError to context destructure\n  } = useAuth();\n\n  const [currentNetwork, setCurrentNetwork] = React.useState<string>('');\n  const [currentChainId, setCurrentChainId] = React.useState<number | null>(null);\n  const [snackbarOpen, setSnackbarOpen] = React.useState(false);\n  const [snackbarMessage, setSnackbarMessage] = React.useState('');\n  const [snackbarType, setSnackbarType] = React.useState<'success' | 'info' | 'error'>('info');\n  const [sessionExpiry, setSessionExpiry] = React.useState<number | null>(null);\n  const [showSessionWarning, setShowSessionWarning] = React.useState(false);\n  const [showDisconnectConfirm, setShowDisconnectConfirm] = React.useState(false);\n  const [showSwitchNetworkConfirm, setShowSwitchNetworkConfirm] = React.useState(false);\n  const authButtonRef = React.useRef<HTMLButtonElement>(null);\n\n  React.useEffect(() => {\n    if (provider && provider.getNetwork) {\n      provider.getNetwork().then((net) => {\n        setCurrentNetwork(net.name || 'Unknown');\n        setCurrentChainId(Number(net.chainId));\n      });\n    } else {\n      setCurrentNetwork('');\n      setCurrentChainId(null);\n    }\n  }, [provider]);\n\n  React.useEffect(() => {\n    if (connectionStatus === 'connected' && isAuthenticated && !isSessionValid()) {\n      authButtonRef.current?.focus();\n    }\n  }, [connectionStatus, isAuthenticated, isSessionValid]);\n\n  // Show snackbar on successful connect/auth/disconnect\n  React.useEffect(() => {\n    if (connectionStatus === 'connected' && isAuthenticated && !error) {\n      setSnackbarMessage('Wallet connected!');\n      setSnackbarType('success');\n      setSnackbarOpen(true);\n    }\n  }, [connectionStatus, isAuthenticated, error]);\n\n  // Show snackbar on error\n  React.useEffect(() => {\n    if (error) {\n      setSnackbarMessage(error);\n      setSnackbarType('error');\n      setSnackbarOpen(true);\n    }\n  }, [error]);\n\n  // Show snackbar on disconnect\n  React.useEffect(() => {\n    if (connectionStatus === 'idle' && !isAuthenticated) {\n      setSnackbarMessage('Wallet disconnected.');\n      setSnackbarType('info');\n      setSnackbarOpen(true);\n    }\n  }, [connectionStatus, isAuthenticated]);\n\n  // Show snackbar on successful authentication\n  React.useEffect(() => {\n    if (isAuthenticated && isSessionValid()) {\n      setSnackbarMessage('Authenticated!');\n      setSnackbarType('success');\n      setSnackbarOpen(true);\n    }\n  }, [isAuthenticated, isSessionValid]);\n\n  // Extract session expiry from localStorage\n  React.useEffect(() => {\n    if (isAuthenticated) {\n      const auth = JSON.parse(localStorage.getItem('auth') || '{}');\n      if (auth.expiry) setSessionExpiry(auth.expiry);\n    } else {\n      setSessionExpiry(null);\n    }\n  }, [isAuthenticated]);\n\n  // Show warning modal when session is about to expire\n  const handleSessionWarning = () => {\n    setShowSessionWarning(true);\n  };\n  const handleSessionExpire = () => {\n    setShowSessionWarning(true);\n  };\n  const handleReauth = async () => {\n    setShowSessionWarning(false);\n    await handleAuthenticate();\n  };\n\n  const handleConnect = async () => {\n    try {\n      await connectWallet();\n    } catch (err) {\n      console.error('Error connecting wallet:', err);\n    }\n  };\n\n  const handleDisconnect = async () => {\n    try {\n      await disconnectWallet();\n      logout();\n    } catch (err) {\n      console.error('Error disconnecting wallet:', err);\n    }\n  };\n\n  const handleAuthenticate = async () => {\n    try {\n      await authenticate();\n    } catch (err) {\n      console.error('Error authenticating:', err);\n    }\n  };\n\n  const handleDisconnectConfirm = async () => {\n    setShowDisconnectConfirm(false);\n    await handleDisconnect();\n  };\n  const handleSwitchNetworkConfirm = async () => {\n    setShowSwitchNetworkConfirm(false);\n    await switchNetwork();\n  };\n\n  return (\n    <div className=\"wallet-status\">\n      <Snackbar\n        message={snackbarMessage}\n        open={snackbarOpen}\n        onClose={() => setSnackbarOpen(false)}\n        type={snackbarType}\n      />\n      {isLoading && <p>Loading...</p>}\n      {connectionStatus === 'connecting' && <p>Connecting to wallet...</p>}\n      {connectionStatus === 'connected' && isAuthenticated && (\n        <div>\n          <p>Connected: {address}</p>\n          <p>Network: {expectedNetworkName} (chainId: {expectedChainId})</p>\n          <Tooltip content=\"Disconnect your wallet from the app.\">\n            <button onClick={() => setShowDisconnectConfirm(true)}>Disconnect</button>\n          </Tooltip>\n          <Tooltip content=\"Switch to the expected network.\">\n            <button onClick={() => setShowSwitchNetworkConfirm(true)}>Switch Network</button>\n          </Tooltip>\n          {/* SIWE/localStorage session UI */}\n          {isSessionValid() ? (\n            <>\n              <p>Session active (client-side, expires in localStorage)</p>\n              {/* Always render countdown if expiry is set and session is valid */}\n              {sessionExpiry && (\n                <SessionExpiryCountdown\n                  expiry={sessionExpiry}\n                  onExpire={handleSessionExpire}\n                  warningThreshold={sessionWarningThreshold}\n                  onWarning={handleSessionWarning}\n                />\n              )}\n            </>\n          ) : (\n            <>\n              <p className=\"error\">Session expired. Please re-authenticate.</p>\n              <Tooltip content=\"Sign a message to authenticate your wallet.\">\n                <button\n                  ref={authButtonRef}\n                  onClick={handleAuthenticate}\n                  aria-label=\"Authenticate (Sign-In with Ethereum)\"\n                >\n                  Authenticate (Sign-In with Ethereum)\n                </button>\n              </Tooltip>\n            </>\n          )}\n          {authError && <p className=\"error\">Auth error: {authError}</p>}\n        </div>\n      )}\n      {connectionStatus === 'idle' && !isAuthenticated && (\n        <Tooltip content=\"Connect your wallet to start using the app.\">\n          <button\n            className=\"wallet-connect-btn\"\n            onClick={handleConnect}\n            aria-label=\"Connect Wallet\"\n          >\n            Connect Wallet\n          </button>\n        </Tooltip>\n      )}\n      <Modal isOpen={showSessionWarning} onClose={() => setShowSessionWarning(false)} ariaLabel=\"Session Expiry Warning\">\n        <p>Your session is about to expire. Please re-authenticate to stay connected.</p>\n        <div className=\"modal-actions\">\n          <button onClick={handleReauth}>Re-authenticate</button>\n          <button onClick={() => setShowSessionWarning(false)}>Close</button>\n        </div>\n      </Modal>\n      <Modal isOpen={showDisconnectConfirm} onClose={() => setShowDisconnectConfirm(false)} ariaLabel=\"Disconnect Wallet Confirmation\">\n        <p>Are you sure you want to disconnect your wallet?</p>\n        <div className=\"modal-actions\">\n          <button onClick={handleDisconnectConfirm}>Yes, disconnect</button>\n          <button onClick={() => setShowDisconnectConfirm(false)}>Cancel</button>\n        </div>\n      </Modal>\n      <Modal isOpen={showSwitchNetworkConfirm} onClose={() => setShowSwitchNetworkConfirm(false)} ariaLabel=\"Switch Network Confirmation\">\n        <p>Are you sure you want to switch to the expected network?</p>\n        <div className=\"modal-actions\">\n          <button onClick={handleSwitchNetworkConfirm}>Yes, switch</button>\n          <button onClick={() => setShowSwitchNetworkConfirm(false)}>Cancel</button>\n        </div>\n      </Modal>\n      {/* Error Modal: open if error exists */}\n      {error && (\n        <Modal isOpen={true} onClose={() => setError(null)} ariaLabel=\"Wallet Error Dialog\">\n          <p>\n            {error.toLowerCase().includes('network')\n              ? `Network error: ${error}`\n              : `Error: ${error}`}\n          </p>\n          <div className=\"modal-actions\">\n            {error.toLowerCase().includes('network') && (\n              <button onClick={async () => { await switchNetwork(); setError(null); }}>Switch Network</button>\n            )}\n            <button onClick={async () => { await connectWallet(); setError(null); }}>Retry</button>\n            <button onClick={() => setError(null)} aria-label=\"Close Modal\" data-testid=\"modal-close\">Close</button>\n          </div>\n        </Modal>\n      )}\n    </div>\n  );\n};\n\nexport default WalletStatus;","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/WalletStatus.unit.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'userEvent' is defined but never used.","line":13,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Unit tests for WalletStatus: rendering, UI states, connect/disconnect, banners, tooltips\nimport React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport WalletStatus from './WalletStatus';\nimport { vi } from 'vitest';\nimport { AuthContextType } from '../../context/AuthContext';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { WagmiProvider } from 'wagmi';\nimport { RainbowKitProvider, getDefaultConfig } from '@rainbow-me/rainbowkit';\nimport { mainnet, sepolia } from 'wagmi/chains';\nimport { http } from 'wagmi';\nimport userEvent from '@testing-library/user-event';\nimport { Provider } from 'ethers';\nimport { TestAuthProvider } from '../../context/AuthContext.tsx';\n\nconst config = getDefaultConfig({\n  appName: 'Starcom dApp',\n  projectId: 'test',\n  chains: [mainnet, sepolia],\n  transports: {\n    [mainnet.id]: http(),\n    [sepolia.id]: http(),\n  },\n});\nconst queryClient = new QueryClient();\n\nconst defaultAuthValue: AuthContextType = {\n  isAuthenticated: false,\n  address: null,\n  provider: null,\n  signer: null,\n  connectWallet: vi.fn(),\n  disconnectWallet: vi.fn(),\n  isLoading: false,\n  error: null,\n  connectionStatus: 'idle',\n  switchNetwork: vi.fn(),\n  authenticate: vi.fn(async () => true),\n  logout: vi.fn(),\n  isSessionValid: vi.fn(() => false),\n  authError: null,\n  expectedChainId: 1,\n  expectedNetworkName: 'Mainnet',\n  setError: vi.fn(),\n};\n\nfunction renderWithProviders(authValue = {}) {\n  function Wrapper({ children }) {\n    const [error, setError] = React.useState(authValue.error ?? null);\n    const mergedAuthValue = {\n      ...defaultAuthValue,\n      ...authValue,\n      error,\n      setError,\n    };\n    return (\n      <QueryClientProvider client={queryClient}>\n        <WagmiProvider config={config}>\n          <RainbowKitProvider>\n            <TestAuthProvider value={mergedAuthValue}>\n              {children || <WalletStatus />}\n            </TestAuthProvider>\n          </RainbowKitProvider>\n        </WagmiProvider>\n      </QueryClientProvider>\n    );\n  }\n  return render(<Wrapper />);\n}\n\ndescribe('WalletStatus (unit)', () => {\n  it('renders error state', () => {\n    renderWithProviders({ error: 'MetaMask is not installed', connectionStatus: 'error' });\n    expect(screen.getByText(/Error: MetaMask is not installed/i)).toBeInTheDocument();\n    expect(screen.getByRole('button', { name: /retry/i })).toBeInTheDocument();\n  });\n\n  it('renders connected state', () => {\n    renderWithProviders({ isAuthenticated: true, address: '0x123', connectionStatus: 'connected' });\n    expect(screen.getByText(/Connected: 0x123/i)).toBeInTheDocument();\n    expect(screen.getByRole('button', { name: /disconnect/i })).toBeInTheDocument();\n  });\n\n  it('renders idle state (connect button)', () => {\n    renderWithProviders({ isAuthenticated: false, address: null, connectionStatus: 'idle' });\n    expect(screen.getByRole('button', { name: /connect wallet/i })).toBeInTheDocument();\n  });\n\n  it('shows success snackbar on connect', () => {\n    renderWithProviders({ isAuthenticated: true, connectionStatus: 'connected' });\n    expect(screen.getByText(/wallet connected/i)).toBeInTheDocument();\n  });\n\n  it('shows error snackbar on error', () => {\n    renderWithProviders({ error: 'Something went wrong', connectionStatus: 'error' });\n    expect(screen.getByText(/Error: Something went wrong/i)).toBeInTheDocument();\n    const snackbars = screen.getAllByText(/something went wrong/i);\n    expect(snackbars.length).toBeGreaterThanOrEqual(1);\n    expect(snackbars.some(el => el.className.includes('snackbar'))).toBe(true);\n  });\n\n  it('shows network info banner', () => {\n    const provider: Provider = {\n      getNetwork: () => Promise.resolve({ name: 'Mainnet', chainId: 1 }),\n    };\n    renderWithProviders({\n      isAuthenticated: true,\n      address: '0x123',\n      connectionStatus: 'connected',\n      expectedChainId: 1,\n      expectedNetworkName: 'Mainnet',\n      provider,\n    });\n    const mainnetEls = screen.getAllByText(/mainnet/i);\n    expect(mainnetEls.length).toBeGreaterThanOrEqual(1);\n    expect(screen.getByText(/connected to/i)).toBeInTheDocument();\n  });\n\n  it('shows tooltip on keyboard focus', async () => {\n    renderWithProviders({ isAuthenticated: false, address: null, connectionStatus: 'idle' });\n    const connectBtn = screen.getByRole('button', { name: /connect wallet/i });\n    connectBtn.focus();\n    await new Promise((resolve) => setTimeout(resolve, 350));\n    expect(screen.queryByRole('tooltip')).toBeTruthy();\n  });\n\n  it('adapts UI for mobile viewport', () => {\n    window.innerWidth = 375;\n    window.dispatchEvent(new Event('resize'));\n    renderWithProviders({ isAuthenticated: false, address: null, connectionStatus: 'idle' });\n    const btn = screen.getByRole('button', { name: /connect wallet/i });\n    expect(btn).toBeVisible();\n  });\n\n  it('success snackbar dismisses automatically after timeout', async () => {\n    vi.useFakeTimers();\n    renderWithProviders({ isAuthenticated: true, connectionStatus: 'connected' });\n    expect(screen.getByText(/wallet connected/i)).toBeInTheDocument();\n    vi.advanceTimersByTime(3000); // Adjust timeout as needed\n    await Promise.resolve();\n    expect(screen.queryByText(/wallet connected/i)).not.toBeInTheDocument();\n    vi.useRealTimers();\n  });\n\n  it('success snackbar can be dismissed by user', async () => {\n    renderWithProviders({ isAuthenticated: true, connectionStatus: 'connected' });\n    const closeBtn = screen.getByRole('button', { name: /close/i });\n    fireEvent.click(closeBtn);\n    await waitFor(() => {\n      expect(screen.queryByText(/wallet connected/i)).not.toBeInTheDocument();\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/Web3Login.accessibility.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/Web3Login.protected.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/Web3Login.wallet.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/Web3LoginPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'provider' is assigned a value but never used.","line":36,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useAuth } from '../../context/AuthContext';\nimport Snackbar from '../Shared/Snackbar';\nimport Modal from '../Shared/Modal';\n\nconst AccountInfoPopup: React.FC<{\n  open: boolean;\n  onClose: () => void;\n  address: string;\n  network: string;\n  onSwitchNetwork?: () => void;\n  wrongNetwork?: boolean;\n}> = ({ open, onClose, address, network, onSwitchNetwork, wrongNetwork }) => (\n  <Modal isOpen={open} onClose={onClose} ariaLabel=\"Account Info\">\n    <div style={{ padding: 24, minWidth: 320 }}>\n      <h2>Account Info</h2>\n      <div><b>Address:</b> {address}</div>\n      <div><b>Network:</b> {network}</div>\n      {wrongNetwork && onSwitchNetwork && (\n        <button onClick={onSwitchNetwork} style={{ marginTop: 16 }}>Switch Network</button>\n      )}\n      <button onClick={onClose} style={{ marginTop: 16 }}>Close</button>\n    </div>\n  </Modal>\n);\n\nconst Web3LoginPanel: React.FC = () => {\n  const {\n    isAuthenticated,\n    address,\n    expectedNetworkName,\n    connectionStatus,\n    connectWallet,\n    disconnectWallet,\n    switchNetwork,\n    provider,\n  } = useAuth();\n  const [showAccount, setShowAccount] = useState(false);\n  const [snackbar, setSnackbar] = useState<{ open: boolean; message: string; type: 'success' | 'info' | 'error' }>({ open: false, message: '', type: 'info' });\n  const [wasAuthenticated, setWasAuthenticated] = useState(false);\n\n  useEffect(() => {\n    if (isAuthenticated && !wasAuthenticated) {\n      setSnackbar({ open: true, message: 'Wallet connected!', type: 'success' });\n      setWasAuthenticated(true);\n    } else if (!isAuthenticated && wasAuthenticated) {\n      setSnackbar({ open: true, message: 'Logged out', type: 'info' });\n      setWasAuthenticated(false);\n    }\n  }, [isAuthenticated, wasAuthenticated]);\n\n  const handleLogin = async () => {\n    try {\n      await connectWallet();\n      // Snackbar handled by useEffect\n    } catch {\n      setSnackbar({ open: true, message: 'Login failed', type: 'error' });\n    }\n  };\n  const handleLogout = async () => {\n    try {\n      await disconnectWallet();\n      // Snackbar handled by useEffect\n    } catch {\n      setSnackbar({ open: true, message: 'Logout failed', type: 'error' });\n    }\n  };\n  const handleSwitchNetwork = async () => {\n    try {\n      await switchNetwork();\n      setSnackbar({ open: true, message: 'Network switched!', type: 'success' });\n    } catch {\n      setSnackbar({ open: true, message: 'Network switch failed', type: 'error' });\n    }\n  };\n  // For demo: always false, but you can implement real network check\n  const wrongNetwork = false;\n\n  return (\n    <div style={{ display: 'flex', alignItems: 'center', gap: 16 }}>\n      {!isAuthenticated ? (\n        <button onClick={handleLogin} disabled={connectionStatus === 'connecting'}>\n          {connectionStatus === 'connecting' ? 'Connecting...' : 'Login'}\n        </button>\n      ) : (\n        <>\n          <span style={{ cursor: 'pointer', textDecoration: 'underline' }} onClick={() => setShowAccount(true)}>\n            {address?.slice(0, 6)}...{address?.slice(-4)}\n          </span>\n          <span>{expectedNetworkName}</span>\n          <button onClick={handleLogout}>Logout</button>\n        </>\n      )}\n      <AccountInfoPopup\n        open={showAccount}\n        onClose={() => setShowAccount(false)}\n        address={address || ''}\n        network={expectedNetworkName}\n        onSwitchNetwork={handleSwitchNetwork}\n        wrongNetwork={wrongNetwork}\n      />\n      <Snackbar\n        open={snackbar.open}\n        message={snackbar.message}\n        type={snackbar.type}\n        onClose={() => setSnackbar(s => ({ ...s, open: false }))}\n      />\n    </div>\n  );\n};\n\nexport default Web3LoginPanel;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Conflict/ConflictDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Conflict/ConflictList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/DropdownMenu/DropdownMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Features/GlobeGeoEvent/GlobeGeoEvent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Features/GlobeGeoHeatmap/GlobeGeoHeatmap.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Features/GlobeGeoMarker/GlobeGeoMarker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Features/GlobeGeoOverlay/GlobeGeoOverlay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Features/GlobeGeoWeather/GlobeGeoWeather.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Features/GlobeIntelNode/GlobeIntelNode.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Features/GlobeSpaceAsset/GlobeSpaceAsset.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Features/GlobeSpaceEntity/GlobeSpaceEntity.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Features/GlobeSpacecraft/GlobeSpacecraft.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Globe.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Handlers/GlobeDataProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Handlers/GlobeEventHandler.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Handlers/GlobeLayerManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Hooks/useGlobeData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Hooks/useGlobeInteraction.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Hooks/useGlobeLayerControl.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/shaders/globeShaders.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/visualizationConfig.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Bars/BottomBar/BottomBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Bars/LeftSideBar/LeftSideBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Bars/RightSideBar/RightSideBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Bars/TopBar/Marquee.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Bars/TopBar/Marquee.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Bars/TopBar/SettingsPopup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Bars/TopBar/TopBar.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Bars/TopBar/TopBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Bars/TopBar/topbarCategories.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Bars/TopBar/useTopBarData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Bars/TopBar/useTopBarPreferences.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Corners/BottomLeft/BottomLeft.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Corners/BottomRight/BottomRight.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Corners/TopLeft/TopLeft.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Corners/TopRight/TopRight.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/EnergyData/EnergyCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/EnergyData/EnergyChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/EnergyData/EnergyMap.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/MiniMap/MiniMap.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Overlay/Overlay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/TimeScrubber/TimeScrubber.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/ToolTip/Tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Intel/IntelReportViewer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Marketplace/ListReportForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Marketplace/MarketTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Marketplace/MarketplaceDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[230,233],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[230,233],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { fetchMarketData } from '../../api/market';\nimport MarketTable from './MarketTable';\n\nconst MarketplaceDashboard: React.FC = () => {\n  const [, setMarketData] = useState<any[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const loadMarketData = async () => {\n      try {\n        setIsLoading(true);\n        const data = await fetchMarketData();\n        setMarketData(data);\n      } catch (err) {\n        setError('Failed to fetch market data.');\n        console.error(err);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadMarketData();\n  }, []);\n\n  if (isLoading) {\n    return <div>Loading market data...</div>;\n  }\n\n  if (error) {\n    return <div>Error: {error}</div>;\n  }\n\n  return (\n    <div className=\"marketplace-dashboard\">\n      <h1 className=\"text-2xl font-bold mb-4\">Marketplace Dashboard</h1>\n      <MarketTable />\n    </div>\n  );\n};\n\nexport default MarketplaceDashboard;","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Marketplace/ReportList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Shared/Button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Shared/Card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Shared/Loader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Shared/Modal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Shared/NetworkInfoBanner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Shared/SessionExpiryCountdown.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Shared/SessionExpiryCountdown.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Shared/Snackbar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Shared/Tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/TinyGlobe/TinyGlobe.module.css.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/TinyGlobe/TinyGlobe.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/TinyGlobe/TinyGlobe.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/TinyGlobe/modeMapping.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/ui/Card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/context/AuthContext.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/context/AuthContext.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'authenticate' function makes the dependencies of useCallback Hook (at line 90) change on every render. To fix this, wrap the definition of 'authenticate' in its own useCallback() Hook.","line":32,"column":3,"nodeType":"FunctionDeclaration","endLine":55,"endColumn":4},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":174,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":174,"endColumn":21}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'connectWalletHandler', 'isSessionValid', and 'wallet.address'. Either include them or remove the dependency array.","line":135,"column":6,"nodeType":"ArrayExpression","endLine":135,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [connectWalletHandler, isSessionValid, wallet.address]","fix":{"range":[5239,5241],"text":"[connectWalletHandler, isSessionValid, wallet.address]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback, useEffect } from 'react';\nimport { connectToWallet, disconnectWallet, isWalletConnected, SUPPORTED_NETWORKS } from '../utils/wallet';\nimport { switchNetwork } from '../middleware/web3Middleware';\nimport { AuthContext, AuthContextType } from './AuthContext';\nimport { Provider, Signer } from 'ethers';\nimport { verifyMessage } from 'ethers';\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode; value?: AuthContextType }> = ({ children, value }) => {\n  // All hooks and logic must be called unconditionally\n  const [wallet, setWallet] = useState<{\n    provider: Provider | null;\n    address: string | null;\n    signer: Signer | null;\n  }>({ provider: null, address: null, signer: null });\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [connectionStatus, setConnectionStatus] = useState<'idle' | 'connecting' | 'connected' | 'error'>('idle');\n  const [authError, setAuthError] = useState<string | null>(null);\n\n  // SIWE/localStorage session helpers for decentralized login\n  function isSessionValid() {\n    const auth = JSON.parse(localStorage.getItem('auth') || '{}');\n    if (!auth.signature || auth.expiry < Date.now()) return false;\n    if (!wallet.address) return false;\n    try {\n      const recovered = verifyMessage(`Sign this message to authenticate: ${auth.nonce}`, auth.signature);\n      return recovered.toLowerCase() === wallet.address.toLowerCase();\n    } catch {\n      return false;\n    }\n  }\n  async function authenticate(walletOverride?: typeof wallet) {\n    const w = walletOverride || wallet;\n    if (!w.address || !w.signer) {\n      setAuthError('Wallet not connected');\n      return false;\n    }\n    setAuthError(null);\n    try {\n      const nonce = Math.floor(Math.random() * 1000000).toString();\n      const message = `Sign this message to authenticate: ${nonce}`;\n      const signature = await w.signer.signMessage(message);\n      const recovered = verifyMessage(message, signature);\n      if (recovered.toLowerCase() === w.address.toLowerCase()) {\n        localStorage.setItem('auth', JSON.stringify({ address: w.address, signature, nonce, expiry: Date.now() + 86400000 }));\n        return true;\n      } else {\n        setAuthError('Signature verification failed');\n        return false;\n      }\n    } catch (err) {\n      setAuthError(err instanceof Error ? err.message : 'Authentication failed');\n      return false;\n    }\n  }\n  function logout() {\n    localStorage.removeItem('auth');\n  }\n\n  // Read expected chain ID from environment variable\n  const expectedChainId = Number(import.meta.env.VITE_EXPECTED_CHAIN_ID || 1);\n\n  const connectWalletHandler = useCallback(async () => {\n    console.log('[Auth] connectWalletHandler: start');\n    setIsLoading(true);\n    setError(null);\n    setConnectionStatus('connecting');\n    try {\n      console.log('[Auth] Calling connectToWallet with chainId', expectedChainId);\n      const connection = await connectToWallet(expectedChainId);\n      console.log('[Auth] Wallet connected:', connection);\n      setWallet(connection);\n      // Authenticate using the fresh connection object\n      const authSuccess = await authenticate(connection);\n      if (!authSuccess) {\n        setError('Authentication failed.');\n        setConnectionStatus('error');\n        setIsLoading(false);\n        return;\n      }\n      setConnectionStatus('connected');\n    } catch (error) {\n      console.error('[Auth] connectWalletHandler error:', error);\n      setError(error instanceof Error ? error.message : 'An unknown error occurred.');\n      setConnectionStatus('error');\n    } finally {\n      setIsLoading(false);\n      console.log('[Auth] connectWalletHandler: end');\n    }\n  }, [expectedChainId, authenticate]);\n\n  const disconnectWalletHandler = useCallback(async () => {\n    console.log('[Auth] disconnectWalletHandler: start');\n    setIsLoading(true);\n    setError(null);\n    setConnectionStatus('connecting');\n    try {\n      await disconnectWallet();\n      setWallet({ provider: null, address: null, signer: null });\n      setConnectionStatus('idle');\n      console.log('[Auth] Wallet disconnected');\n    } catch (error) {\n      console.error('[Auth] disconnectWalletHandler error:', error);\n      setError(error instanceof Error ? error.message : 'An unknown error occurred.');\n      setConnectionStatus('error');\n    } finally {\n      setIsLoading(false);\n      console.log('[Auth] disconnectWalletHandler: end');\n    }\n  }, []);\n\n  const switchNetworkHandler = useCallback(async () => {\n    try {\n      await switchNetwork(expectedChainId);\n      setConnectionStatus('connected');\n    } catch (error) {\n      setError(error instanceof Error ? error.message : 'An unknown error occurred.');\n      setConnectionStatus('error');\n    }\n  }, [expectedChainId]);\n\n  useEffect(() => {\n    let didRun = false;\n    const checkConnection = async () => {\n      if (didRun) return;\n      didRun = true;\n      if (!wallet.address && !(!!wallet.address && isSessionValid())) {\n        if (await isWalletConnected()) {\n          await connectWalletHandler();\n        }\n      }\n    };\n    checkConnection();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  let contextValue: AuthContextType = {\n    isAuthenticated: !!wallet.address && isSessionValid(),\n    address: wallet.address,\n    provider: wallet.provider,\n    signer: wallet.signer,\n    connectWallet: connectWalletHandler,\n    disconnectWallet: disconnectWalletHandler,\n    isLoading,\n    error,\n    connectionStatus,\n    switchNetwork: switchNetworkHandler,\n    authenticate,\n    logout,\n    isSessionValid,\n    authError,\n    expectedChainId,\n    expectedNetworkName: SUPPORTED_NETWORKS[expectedChainId]?.name || `Chain ${expectedChainId}`,\n    setError, // Expose setError for error modal actions\n  };\n\n  // If a value prop is provided (for testing), override the context value\n  if (value) {\n    contextValue = {\n      ...contextValue,\n      ...value,\n      expectedChainId: (value as Partial<typeof contextValue>).expectedChainId ?? expectedChainId,\n      expectedNetworkName: value?.expectedNetworkName ?? (SUPPORTED_NETWORKS[expectedChainId]?.name || `Chain ${expectedChainId}`),\n    };\n  }\n\n  return <AuthContext.Provider value={contextValue}>{children}</AuthContext.Provider>;\n};\n\nexport const TestAuthProvider: React.FC<{ children: React.ReactNode; value: AuthContextType }> = ({ children, value }) => (\n  <AuthContext.Provider value={value}>{children}</AuthContext.Provider>\n);\n\nexport const useAuth = () => {\n  const context = React.useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/context/DashboardContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'err' is defined but never used.","line":36,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":25},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":53,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":53,"endColumn":26}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useEffect, useState } from 'react';\nimport EIAService from '../services/EIAService';\n\ninterface DashboardContextType {\n    oilPrice: number | null;\n    gasolinePrice: number | null;\n    oilInventory: number | null;\n    naturalGasStorage: number | null;\n    loading: boolean;\n    error: string | null;\n}\n\nconst DashboardContext = createContext<DashboardContextType | undefined>(undefined);\n\nexport const DashboardProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n    const [oilPrice, setOilPrice] = useState<number | null>(null);\n    const [gasolinePrice, setGasolinePrice] = useState<number | null>(null);\n    const [oilInventory, setOilInventory] = useState<number | null>(null);\n    const [naturalGasStorage, setNaturalGasStorage] = useState<number | null>(null);\n    const [loading, setLoading] = useState<boolean>(true);\n    const [error, setError] = useState<string | null>(null);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const [oilPrice, gasolinePrice, oilInventory, naturalGasStorage] = await Promise.all([\n                    EIAService.getLatestOilPrice(),\n                    EIAService.getLatestGasolinePrice(),\n                    EIAService.getLatestOilInventory(),\n                    EIAService.getLatestNaturalGasStorage(),\n                ]);\n                setOilPrice(oilPrice);\n                setGasolinePrice(gasolinePrice);\n                setOilInventory(oilInventory);\n                setNaturalGasStorage(naturalGasStorage);\n            } catch (err) {\n                setError('Failed to fetch data');\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchData();\n    }, []);\n\n    return (\n        <DashboardContext.Provider value={{ oilPrice, gasolinePrice, oilInventory, naturalGasStorage, loading, error }}>\n            {children}\n        </DashboardContext.Provider>\n    );\n};\n\nexport const useDashboard = () => {\n    const context = useContext(DashboardContext);\n    if (!context) throw new Error('useDashboard must be used within DashboardProvider');\n    return context;\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/context/GlobeContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":21,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":21,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/context/GlobeContext.tsx\nimport React, { createContext, useContext, useState, ReactNode } from 'react';\n\ninterface GlobeContextType {\n  focusLocation: { lat: number; lng: number } | null;\n  setFocusLocation: (location: { lat: number; lng: number } | null) => void;\n}\n\nconst GlobeContext = createContext<GlobeContextType | undefined>(undefined);\n\nexport const GlobeProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [focusLocation, setFocusLocation] = useState<{ lat: number; lng: number } | null>(null);\n\n  return (\n    <GlobeContext.Provider value={{ focusLocation, setFocusLocation }}>\n      {children}\n    </GlobeContext.Provider>\n  );\n};\n\nexport const useGlobeContext = () => {\n  const context = useContext(GlobeContext);\n  if (!context) throw new Error('useGlobeContext must be used within a GlobeProvider');\n  return context;\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/context/IntelContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/context/MarketplaceContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":63,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":63,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { fetchMarketData } from '../api/market';\nimport { MarketplaceContextType, MarketData } from '../interfaces/Marketplace';\nimport { handleError } from '../utils/errorHandler';\n\ninterface MarketplaceState {\n  marketData: MarketData[];\n  isLoading: boolean;\n  error: string | null;\n}\n\ntype MarketplaceAction =\n  | { type: 'FETCH_START' }\n  | { type: 'FETCH_SUCCESS'; payload: MarketData[] }\n  | { type: 'FETCH_ERROR'; payload: string };\n\nconst initialState: MarketplaceState = {\n  marketData: [],\n  isLoading: false,\n  error: null,\n};\n\nconst marketplaceReducer = (state: MarketplaceState, action: MarketplaceAction): MarketplaceState => {\n  switch (action.type) {\n    case 'FETCH_START':\n      return { ...state, isLoading: true, error: null };\n    case 'FETCH_SUCCESS':\n      return { ...state, isLoading: false, marketData: action.payload };\n    case 'FETCH_ERROR':\n      return { ...state, isLoading: false, error: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst MarketplaceContext = createContext<MarketplaceContextType | undefined>(undefined);\n\nexport const MarketplaceProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [state, dispatch] = useReducer(marketplaceReducer, initialState);\n\n  const refreshMarketData = async () => {\n    dispatch({ type: 'FETCH_START' });\n    try {\n      const data = await fetchMarketData();\n      dispatch({ type: 'FETCH_SUCCESS', payload: data });\n    } catch (err) {\n      const errorMessage = handleError(err);\n      dispatch({ type: 'FETCH_ERROR', payload: errorMessage });\n    }\n  };\n\n  useEffect(() => {\n    refreshMarketData();\n  }, []);\n\n  return (\n    <MarketplaceContext.Provider value={{ ...state, refreshMarketData }}>\n      {children}\n    </MarketplaceContext.Provider>\n  );\n};\n\nexport const useMarketplace = (): MarketplaceContextType => {\n  const context = useContext(MarketplaceContext);\n  if (!context) {\n    throw new Error('useMarketplace must be used within a MarketplaceProvider');\n  }\n  return context;\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/context/SettingsContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/context/SnackbarContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/context/TimeDataProvider.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":90,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":90,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useEffect, useRef, useCallback, ReactNode } from 'react';\nimport { fetchHistoricalData } from '../utils/fetchHistoricalData'; // Moved `fetchHistoricalData` to a separate file\n\ninterface TimeDataContextProps {\n  currentTime: number;\n  isLive: boolean;\n  setCurrentTime: (time: number) => void;\n  toggleLive: () => void;\n  fetchDataForTime: (time: number) => Promise<void>;\n  error: string | null;\n}\n\ninterface CacheEntry {\n  timestamp: number;\n  data: Array<{ lat: number; lng: number; size: number; color: string; timestamp: number }>;\n}\n\nconst TimeDataContext = createContext<TimeDataContextProps | undefined>(undefined);\n\nexport const TimeDataProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [currentTime, setCurrentTime] = useState<number>(Date.now());\n  const [isLive, setIsLive] = useState<boolean>(true);\n  const [dataCache, setDataCache] = useState<Map<number, CacheEntry>>(new Map());\n  const [error, setError] = useState<string | null>(null);\n  const lastUpdateTimeRef = useRef<number>(0);\n\n  const toggleLive = () => {\n    setIsLive(!isLive);\n    if (!isLive) setCurrentTime(Date.now());\n  };\n\n  const fetchDataForTime = useCallback(\n    async (time: number): Promise<void> => {\n      if (dataCache.has(time)) return;\n\n      try {\n        setError(null);\n        const data = await fetchHistoricalData(time);\n        setDataCache((prev) => {\n          const newCache = new Map(prev);\n          newCache.set(time, { timestamp: Date.now(), data });\n\n          // Evict older entries (LRU logic)\n          if (newCache.size > 100) {\n            const oldestKey = Array.from(newCache.keys())[0];\n            newCache.delete(oldestKey);\n          }\n\n          return newCache;\n        });\n      } catch (err) {\n        console.error('Error fetching data:', err);\n        setError('Failed to fetch data for the selected time.');\n      }\n    },\n    [dataCache]\n  );\n\n  useEffect(() => {\n    if (!isLive) return;\n\n    const interval = setInterval(() => {\n      const now = Date.now();\n      if (now - lastUpdateTimeRef.current >= 5000) {\n        setCurrentTime(now);\n        fetchDataForTime(now);\n        lastUpdateTimeRef.current = now;\n      }\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [isLive, fetchDataForTime]);\n\n  return (\n    <TimeDataContext.Provider\n      value={{\n        currentTime,\n        isLive,\n        setCurrentTime,\n        toggleLive,\n        fetchDataForTime,\n        error,\n      }}\n    >\n      {children}\n    </TimeDataContext.Provider>\n  );\n};\n\nexport const useTimeData = () => {\n  const context = useContext(TimeDataContext);\n  if (!context) throw new Error('useTimeData must be used within a TimeDataProvider');\n  return context;\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/context/UCDPContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":4,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[116,119],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[116,119],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[168,171],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[168,171],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":16,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":16,"endColumn":21}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useState, useContext, ReactNode } from 'react';\n\ninterface UCDPContextType {\n  data: any;\n  setData: React.Dispatch<React.SetStateAction<any>>;\n}\n\nconst UCDPContext = createContext<UCDPContextType | undefined>(undefined);\n\nexport const UCDPProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [data, setData] = useState(null);\n\n  return <UCDPContext.Provider value={{ data, setData }}>{children}</UCDPContext.Provider>;\n};\n\nexport const useUCDP = () => {\n  const context = useContext(UCDPContext);\n  if (!context) throw new Error('useUCDP must be used within a UCDPProvider');\n  return context;\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/context/VisualizationModeContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":38,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":38,"endColumn":34}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createContext, useContext, useState, useEffect } from 'react';\n\n// Extend VisualizationMode to include sub-modes\nexport type VisualizationMode =\n  | { mode: 'CyberCommand'; subMode: 'IntelReports' | 'Timelines' | 'CrisisZones' }\n  | { mode: 'GeoPolitical'; subMode: 'NationalTerritories' | 'DiplomaticEvents' | 'ResourceZones' }\n  | { mode: 'EcoNatural'; subMode: 'SpaceWeather' | 'EcologicalDisasters' | 'EarthWeather' };\n\n// Create a context for VisualizationMode\ninterface VisualizationModeContextProps {\n  visualizationMode: VisualizationMode;\n  setVisualizationMode: (mode: VisualizationMode) => void;\n  resetVisualizationMode: () => void;\n}\n\nconst VisualizationModeContext = createContext<VisualizationModeContextProps | undefined>(undefined);\n\n// Provider component\nexport const VisualizationModeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [visualizationMode, setVisualizationMode] = useState<VisualizationMode>({ mode: 'CyberCommand', subMode: 'IntelReports' });\n\n  const resetVisualizationMode = () => {\n    setVisualizationMode({ mode: 'CyberCommand', subMode: 'IntelReports' }); // Default mode with sub-mode\n  };\n\n  useEffect(() => {\n    console.log(`VisualizationMode changed to: ${visualizationMode.mode}, SubMode: ${visualizationMode.subMode}`);\n  }, [visualizationMode]);\n\n  return (\n    <VisualizationModeContext.Provider value={{ visualizationMode, setVisualizationMode, resetVisualizationMode }}>\n      {children}\n    </VisualizationModeContext.Provider>\n  );\n};\n\n// Hook to use the VisualizationMode context\nexport const useVisualizationMode = () => {\n  const context = useContext(VisualizationModeContext);\n  if (!context) {\n    throw new Error('useVisualizationMode must be used within a VisualizationModeProvider');\n  }\n  return context;\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/context/WASMContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[264,267],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[264,267],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":51,"column":24,"nodeType":"Identifier","messageId":"namedExport","endLine":51,"endColumn":31}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { initializeWASM, fetchFromMiniServer as fetchFromWASM } from \"../utils/wasm\";\n\ninterface WASMContextType {\n  wasmReady: boolean;\n  fetchFromMiniServer: (url: string) => Promise<any>;\n}\n\nconst WASMContext = createContext<WASMContextType | undefined>(undefined);\n\ninterface WASMProviderProps {\n  children: React.ReactNode;\n}\n\nlet wasmInitializationPromise: Promise<void> | null = null;\n\nconst WASMProvider: React.FC<WASMProviderProps> = ({ children }) => {\n  const [wasmReady, setWasmReady] = useState(false);\n\n  useEffect(() => {\n    if (!wasmInitializationPromise) {\n      wasmInitializationPromise = initializeWASM().then(() => {\n        setWasmReady(true);\n      });\n    } else {\n      wasmInitializationPromise.then(() => {\n        setWasmReady(true);\n      });\n    }\n  }, []);\n\n  const fetchFromMiniServer = async (url: string) => {\n    return await fetchFromWASM(url);\n  };\n\n  return (\n    <WASMContext.Provider value={{ wasmReady, fetchFromMiniServer }}>\n      {children}\n    </WASMContext.Provider>\n  );\n};\n\nconst useWASM = () => {\n  const context = useContext(WASMContext);\n  if (!context) {\n    throw new Error(\"useWASM must be used within a WASMProvider\");\n  }\n  return context;\n};\n\nexport { WASMProvider, useWASM, WASMContext };","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/contracts/IntelligenceMarket.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":67,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1834,1837],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1834,1837],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { BrowserProvider, Contract } from 'ethers';\nimport IntelligenceMarketABI from './IntelligenceMarketABI.json';\n\nconst CONTRACT_ADDRESS = '0xYourContractAddressHere';\n\nexport const getIntelligenceMarketContract = async (provider: BrowserProvider) => {\n  const signer = await provider.getSigner();\n  return new Contract(CONTRACT_ADDRESS, IntelligenceMarketABI, signer);\n};\n\nexport const buyAsset = async (\n  provider: BrowserProvider,\n  assetId: string,\n  price: bigint\n) => {\n  const contract = await getIntelligenceMarketContract(provider);\n  const tx = await contract.buyAsset(assetId, { value: price });\n  await tx.wait();\n  return tx;\n};\n\nexport const sellAsset = async (\n  provider: BrowserProvider,\n  assetId: string,\n  price: bigint\n) => {\n  const contract = await getIntelligenceMarketContract(provider);\n  const tx = await contract.sellAsset(assetId, price);\n  await tx.wait();\n  return tx;\n};\n\nexport const listAsset = async (\n  provider: BrowserProvider,\n  name: string,\n  price: bigint\n): Promise<void> => {\n  try {\n    const contract = await getIntelligenceMarketContract(provider);\n    const tx = await contract.listAsset(name, price);\n    await tx.wait();\n    console.log(`Asset listed: ${name} for price: ${price}`);\n  } catch (error) {\n    console.error('Error listing asset:', error);\n    throw error;\n  }\n};\n\nexport const purchaseAsset = async (\n  provider: BrowserProvider,\n  assetId: number\n): Promise<void> => {\n  try {\n    const contract = await getIntelligenceMarketContract(provider);\n    const tx = await contract.purchaseAsset(assetId);\n    await tx.wait();\n    console.log(`Asset purchased: ${assetId}`);\n  } catch (error) {\n    console.error('Error purchasing asset:', error);\n    throw error;\n  }\n};\n\nexport const getAssetDetails = async (\n  provider: BrowserProvider,\n  assetId: number\n): Promise<any> => {\n  try {\n    const contract = await getIntelligenceMarketContract(provider);\n    const asset = await contract.assets(assetId);\n    console.log(`Asset details:`, asset);\n    return asset;\n  } catch (error) {\n    console.error('Error fetching asset details:', error);\n    throw error;\n  }\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/globe-engine/GlobeEngine.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_lat' is defined but never used.","line":8,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_lng' is defined but never used.","line":8,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":46}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// GlobeEngine.test.ts\n// Artifact-driven tests for GlobeEngine (see globe-testing-plan.artifact, globe-engine-api.artifact, globe-overlays.artifact)\nimport { GlobeEngine } from './GlobeEngine';\nimport { vi } from 'vitest';\n\n// Mock API services for artifact-driven integration tests\nvi.mock('../services/WeatherDataService', () => ({\n  fetchWeatherData: async (_lat: number, _lng: number) => ({\n    // _lat and _lng are intentionally unused for mock\n    location: 'Test City',\n    temperature: 20,\n    description: 'Clear',\n    windSpeed: 5,\n    humidity: 50,\n  })\n}));\nvi.mock('../services/GeoEventsService', () => ({\n  fetchNaturalEvents: async () => ([\n    { id: 1, lat: 0, lng: 0, type: 'earthquake', magnitude: 5.5 },\n    { id: 2, lat: 10, lng: 10, type: 'volcano', status: 'active' }\n  ])\n}));\nvi.mock('../services/SpaceAssetsService', () => ({\n  fetchSpaceAssets: async () => ([\n    { id: 1, lat: 0, lng: 0, type: 'satellite', name: 'ISS', altitude: 400 },\n    { id: 2, lat: 45, lng: 90, type: 'debris', name: 'Debris-123', altitude: 800 }\n  ])\n}));\n// Mock fetch for borders/territories overlays\n(globalThis as unknown as { fetch: () => Promise<{ json: () => Promise<{ features: unknown[] }> }> }).fetch = async () => ({\n  json: async () => ({\n    features: [\n      { properties: { name: 'TestBorder' }, geometry: { type: 'LineString', coordinates: [[0,0],[1,1]] } },\n      { properties: { name: 'TestTerritory' }, geometry: { type: 'Polygon', coordinates: [[[0,0],[1,1],[1,0],[0,0]]] } }\n    ]\n  })\n});\n\ndescribe('GlobeEngine Overlay Logic', () => {\n  it('should add overlays and cache overlay data', async () => {\n    const engine = new GlobeEngine({ mode: 'CyberCommand' });\n    engine.addOverlay('alerts');\n    await new Promise((resolve) => setTimeout(resolve, 600));\n    const data = engine.getOverlayData('alerts');\n    expect(Array.isArray(data)).toBe(true);\n    // Add again, should use cache\n    engine.removeOverlay('alerts');\n    engine.addOverlay('alerts');\n    expect(engine.getOverlayData('alerts')).toEqual(data);\n  });\n\n  it('should reset overlays to mode defaults on setMode', async () => {\n    const engine = new GlobeEngine({ mode: 'CyberCommand' });\n    engine.addOverlay('weather');\n    engine.setMode('EcoNatural');\n    await new Promise((resolve) => setTimeout(resolve, 600));\n    const overlays = engine.getOverlays();\n    expect(overlays).toContain('weather');\n    expect(overlays).toContain('naturalEvents');\n    expect(overlays).toContain('markers');\n    expect(overlays).not.toContain('alerts');\n  });\n\n  it('should emit overlayDataUpdated event', async () => {\n    const engine = new GlobeEngine({ mode: 'CyberCommand' });\n    await new Promise<void>((resolve) => {\n      engine.on('overlayDataUpdated', ({ payload }) => {\n        if (payload && typeof payload === 'object' && (payload as { overlay?: string }).overlay === 'alerts') {\n          expect((payload as { data?: unknown }).data).toBeDefined();\n          resolve();\n        }\n      });\n      engine.addOverlay('alerts');\n    });\n  });\n});\n\ndescribe('GlobeEngine Integration (artifact-driven)', () => {\n  it('should fetch and cache overlay data for weather and naturalEvents (mocked)', async () => {\n    const engine = new GlobeEngine({ mode: 'EcoNatural' });\n    engine.addOverlay('weather');\n    engine.addOverlay('naturalEvents');\n    await new Promise((resolve) => setTimeout(resolve, 700));\n    const weather = engine.getOverlayData('weather');\n    const events = engine.getOverlayData('naturalEvents');\n    expect(Array.isArray(weather)).toBe(true);\n    expect(Array.isArray(events)).toBe(true);\n    engine.removeOverlay('weather');\n    engine.addOverlay('weather');\n    expect(engine.getOverlayData('weather')).toEqual(weather);\n  });\n\n  it('should allow toggling overlays and emit correct events', () => {\n    const engine = new GlobeEngine({ mode: 'GeoPolitical' });\n    let addCount = 0;\n    let removeCount = 0;\n    engine.on('overlayAdded', () => {\n      addCount++;\n    });\n    engine.on('overlayRemoved', () => {\n      removeCount++;\n    });\n    engine.addOverlay('borders');\n    engine.removeOverlay('borders');\n    engine.addOverlay('borders');\n    expect(addCount).toBeGreaterThanOrEqual(2);\n    expect(removeCount).toBeGreaterThanOrEqual(1);\n  });\n\n  it('should fetch and cache overlay data for spaceAssets (mocked)', async () => {\n    const engine = new GlobeEngine({ mode: 'CyberCommand' });\n    engine.addOverlay('spaceAssets');\n    await new Promise((resolve) => setTimeout(resolve, 600));\n    const data = engine.getOverlayData('spaceAssets');\n    expect(Array.isArray(data)).toBe(true);\n    expect((data as { type?: string }[])[0]?.type).toBe('satellite');\n  });\n\n  it('should emit overlayDataLoading and overlayDataError for spaceAssets', async () => {\n    const spy = vi.spyOn(await import('../services/SpaceAssetsService'), 'fetchSpaceAssets').mockRejectedValue(new Error('Test error'));\n    const engine = new GlobeEngine({ mode: 'CyberCommand' });\n    let loading = false;\n    let error = false;\n    engine.on('overlayDataLoading', ({ payload }) => {\n      if ((payload as { overlay?: string })?.overlay === 'spaceAssets') loading = true;\n    });\n    engine.on('overlayDataError', ({ payload }) => {\n      if ((payload as { overlay?: string; error?: string })?.overlay === 'spaceAssets' && (payload as { error?: string }).error === 'Test error') error = true;\n    });\n    engine.addOverlay('spaceAssets');\n    await new Promise((resolve) => setTimeout(resolve, 600));\n    expect(loading).toBe(true);\n    expect(error).toBe(true);\n    spy.mockRestore();\n  });\n\n  it('should periodically update spaceAssets overlay (artifact-driven, fake timers)', async () => {\n    vi.useFakeTimers();\n    const engine = new GlobeEngine({ mode: 'CyberCommand' });\n    let updateCount = 0;\n    engine.on('overlayDataUpdated', ({ payload }) => {\n      if ((payload as { overlay?: string })?.overlay === 'spaceAssets') updateCount++;\n    });\n    engine.addOverlay('spaceAssets');\n    // Initial fetch\n    await vi.runOnlyPendingTimersAsync();\n    // Simulate 2 more intervals (2 minutes)\n    await vi.advanceTimersByTimeAsync(120000);\n    expect(updateCount).toBeGreaterThanOrEqual(2);\n    // Clean up interval\n    engine.removeOverlay('spaceAssets');\n    vi.useRealTimers();\n  });\n});\n// Artifact references:\n// - Test plan: globe-testing-plan.artifact\n// - Overlay API/events: globe-engine-api.artifact, globe-overlays.artifact\n","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/globe-engine/GlobeEngine.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/globe-engine/GlobeMaterialManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/globe-engine/GlobeModeMapping.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/globe-engine/GlobeTextureLoader.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/globe-engine/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/hooks/data/useFetchConflicts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/hooks/data/useFetchData.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'options'. Either include it or remove the dependency array.","line":25,"column":6,"nodeType":"ArrayExpression","endLine":25,"endColumn":11,"suggestions":[{"desc":"Update the dependencies array to be: [options, url]","fix":{"range":[645,650],"text":"[options, url]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\n\nexport const useFetchData = <T>(url: string, options = {}) => {\n  const [data, setData] = useState<T | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      setError(null);\n\n      try {\n        const response = await fetch(url, options);\n        const result = await response.json();\n        setData(result);\n      } catch (err) {\n        setError(err as Error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [url]);\n\n  return { data, loading, error };\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/hooks/ui/useAuth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/hooks/ui/useGlobeInteractions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/hooks/useBackendAuth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/hooks/useEIAData.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'err' is defined but never used.","line":25,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport EIAService from '../services/EIAService';\n\nexport const useEIAData = () => {\n  const [oilPrice, setOilPrice] = useState<number | null>(null);\n  const [gasolinePrice, setGasolinePrice] = useState<number | null>(null);\n  const [oilInventory, setOilInventory] = useState<number | null>(null);\n  const [naturalGasStorage, setNaturalGasStorage] = useState<number | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const [oilPrice, gasolinePrice, oilInventory, naturalGasStorage] = await Promise.all([\n          EIAService.getLatestOilPrice(),\n          EIAService.getLatestGasolinePrice(),\n          EIAService.getLatestOilInventory(),\n          EIAService.getLatestNaturalGasStorage(),\n        ]);\n        setOilPrice(oilPrice);\n        setGasolinePrice(gasolinePrice);\n        setOilInventory(oilInventory);\n        setNaturalGasStorage(naturalGasStorage);\n      } catch (err) {\n        setError('Failed to fetch data');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  return { oilPrice, gasolinePrice, oilInventory, naturalGasStorage, loading, error };\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/hooks/useOnChainRoles.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1176,1179],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1176,1179],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/hooks/useOnChainRoles.ts\nimport { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport IntelligenceMarketABI from '../contracts/IntelligenceMarketABI.json';\n\nconst CONTRACT_ADDRESS = '0xYourContractAddressHere'; // TODO: Replace with real deployed address\n\n/**\n * useOnChainRoles\n * Returns a list of on-chain roles for the given address.\n *\n * @param address - The user's wallet address\n * @returns Array of { role, hasRole }\n *\n * See: artifacts/starcom-mk2-web3-login-api.artifact\n * See: docs/Decentralized Web3 dApp Development Guide.markdown\n */\nexport interface OnChainRole {\n  role: string; // e.g. 'ADMIN', 'USER', 'MODERATOR'\n  hasRole: boolean;\n}\n\nexport function useOnChainRoles(address: string | null): OnChainRole[] {\n  const [roles, setRoles] = useState<OnChainRole[]>([]);\n\n  useEffect(() => {\n    if (!address) {\n      setRoles([]);\n      return;\n    }\n    if (!window.ethereum) {\n      setRoles([\n        { role: 'USER', hasRole: true },\n        { role: 'ADMIN', hasRole: false },\n      ]);\n      return;\n    }\n    async function fetchRoles() {\n      try {\n        const provider = new ethers.BrowserProvider(window.ethereum as any);\n        const contract = new ethers.Contract(CONTRACT_ADDRESS, IntelligenceMarketABI, provider);\n        const owner = await contract.owner();\n        setRoles([\n          { role: 'USER', hasRole: true },\n          { role: 'ADMIN', hasRole: owner && address ? owner.toLowerCase() === address.toLowerCase() : false },\n        ]);\n      } catch {\n        setRoles([\n          { role: 'USER', hasRole: true },\n          { role: 'ADMIN', hasRole: false },\n        ]);\n      }\n    }\n    fetchRoles();\n  }, [address]);\n\n  return roles;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/hooks/useSIWEAuth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/hooks/useTokenGate.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[182,185],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[182,185],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/hooks/useTokenGate.ts\nimport { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport ERC20ABI from '../contracts/ERC20ABI.json';\nconst abi = ERC20ABI as any;\n\n/**\n * useTokenGate\n * Checks if the given address has the required balance of a token (NFT/ERC-20).\n *\n * @param address - The user's wallet address\n * @param tokenAddress - The token contract address\n * @param requiredBalance - The minimum balance required (as string)\n * @returns { tokenAddress, requiredBalance, hasAccess }\n *\n * See: artifacts/starcom-mk2-web3-login-api.artifact\n * See: docs/Decentralized Web3 dApp Development Guide.markdown\n */\nexport interface TokenGate {\n  tokenAddress: string;\n  requiredBalance: string;\n  hasAccess: boolean;\n}\n\nexport function useTokenGate(\n  address: string | null,\n  tokenAddress: string,\n  requiredBalance: string\n): TokenGate {\n  const [hasAccess, setHasAccess] = useState(false);\n\n  useEffect(() => {\n    if (!address || !tokenAddress) {\n      setHasAccess(false);\n      return;\n    }\n    if (!window.ethereum) {\n      setHasAccess(false);\n      return;\n    }\n    async function checkBalance() {\n      try {\n        const provider = new ethers.BrowserProvider(window.ethereum as unknown as ethers.Eip1193Provider);\n        const contract = new ethers.Contract(tokenAddress, abi, provider);\n        const [balance, decimals] = await Promise.all([\n          contract.balanceOf(address),\n          contract.decimals(),\n        ]);\n        const required = ethers.parseUnits(requiredBalance, decimals);\n        setHasAccess(balance >= required);\n      } catch {\n        setHasAccess(false);\n      }\n    }\n    checkBalance();\n  }, [address, tokenAddress, requiredBalance]);\n\n  return { tokenAddress, requiredBalance, hasAccess };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/hooks/useWASM.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/hooks/useWallet.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/interfaces/EIAData.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[312,315],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[312,315],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface EIAData {\n    response: {\n        total: string;\n        dateFormat: string;\n        frequency: string;\n        data: {\n        period: string; // e.g., \"2025-03-07\"\n        value: number; // e.g., 67.52\n        }[];\n    };\n    request: {\n        command: string;\n        params: Record<string, any>;\n    };\n    apiVersion: string;\n}","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/interfaces/MarketData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/interfaces/Marketplace.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/layouts/HUDLayout/HUDLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/layouts/SettingsLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/layouts/StandardLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/middleware/apiHandler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/middleware/web3Middleware.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[194,197],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[194,197],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":45,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1365,1368],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1365,1368],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { WalletConnection } from '../utils/wallet';\n\nexport const requireWalletConnection = async (\n  wallet: WalletConnection | null,\n  callback: (connection: WalletConnection) => Promise<any>\n) => {\n  if (!wallet || !wallet.address || !wallet.provider || !wallet.signer) {\n    throw new Error('Wallet not connected. Please connect your wallet.');\n  }\n  try {\n    return await callback(wallet);\n  } catch (error) {\n    console.error('Error during wallet operation:', error);\n    throw error;\n  }\n};\n\nexport const fetchWalletBalance = async (address: string): Promise<string> => {\n  if (!address) {\n    throw new Error('Wallet address is required to fetch balance.');\n  }\n\n  // Simulate fetching balance (replace with actual implementation)\n  return '0.0';\n};\n\nexport const verifyNetwork = (chainId: number, expectedChainId: number): void => {\n  if (chainId !== expectedChainId) {\n    throw new Error(`Incorrect network. Expected chainId ${expectedChainId}, got ${chainId}`);\n  }\n};\n\nexport const switchNetwork = async (chainId: number): Promise<void> => {\n  if (!window.ethereum) {\n    throw new Error('No Web3 provider detected. Please install MetaMask.');\n  }\n\n  await window.ethereum.request({\n    method: 'wallet_switchEthereumChain',\n    params: [{ chainId: `0x${chainId.toString(16)}` }],\n  });\n};\n\nexport const addNetwork = async (\n  ethereumProvider: any, // Replace with a specific type if available\n  networkParams: {\n    chainId: number;\n    chainName: string;\n    rpcUrls: string[];\n    nativeCurrency: { name: string; symbol: string; decimals: number };\n    blockExplorerUrls?: string[];\n  }\n): Promise<void> => {\n  if (!ethereumProvider || !ethereumProvider.request) {\n    throw new Error('Ethereum provider does not support the `request` method.');\n  }\n\n  await ethereumProvider.request({\n    method: 'wallet_addEthereumChain',\n    params: [\n      {\n        chainId: `0x${networkParams.chainId.toString(16)}`,\n        chainName: networkParams.chainName,\n        rpcUrls: networkParams.rpcUrls,\n        nativeCurrency: networkParams.nativeCurrency,\n        blockExplorerUrls: networkParams.blockExplorerUrls || [],\n      },\n    ],\n  });\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/models/IntelReport.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/pages/MainPage/MainPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/pages/SettingsPage/SettingsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/routes/ProtectedRoute.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/routes/marketplace.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/routes/routes.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/AlertsService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/ApiService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/BlockchainService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/ConflictZoneService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":153,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":153,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4751,4754],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4751,4754],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import axios from 'axios';\nimport { getProxiedUrl } from '../utils/ProxyUtils';\nimport xml2js from 'xml2js';\n\nconst reliefWebApiUrl = import.meta.env.VITE_RELIEF_WEB_API_URL;\nconst gdacsApiUrl = import.meta.env.VITE_GDACS_API_URL;\n\ninterface ConflictZoneData {\n  id: string;\n  date: string;\n  type: string;\n  location: string;\n  description?: string;\n  source: string;\n}\n\nconst validateResponse = (data: unknown): boolean => {\n  return Array.isArray(data);\n};\n\nexport const fetchACLEDConflictZones = async (): Promise<ConflictZoneData[]> => {\n  try {\n    const apiKey = import.meta.env.ACLED_API_KEY;\n    const response = await axios.get(getProxiedUrl(`https://api.acleddata.com/acled/read?key=${apiKey}`));\n    console.log('ACLED Response:', response.data);\n    if (!validateResponse(response.data)) {\n      throw new Error('Invalid ACLED response format');\n    }\n    return response.data.map((item: unknown) => {\n      const conflictItem = item as {\n        event_id: string;\n        event_date: string;\n        event_type: string;\n        location: string;\n        notes?: string;\n      };\n      return {\n        id: conflictItem.event_id,\n        date: conflictItem.event_date,\n        type: conflictItem.event_type,\n        location: conflictItem.location,\n        description: conflictItem.notes,\n        source: 'ACLED',\n      };\n    });\n  } catch (error) {\n    console.error('Error fetching ACLED data:', error);\n    return [];\n  }\n};\n\nexport const fetchUCDPConflictZones = async (): Promise<ConflictZoneData[]> => {\n  try {\n    const response = await axios.get(getProxiedUrl('https://ucdp.uu.se/api/v2/conflicts'));\n    console.log('UCDP Response:', response.data);\n    if (!validateResponse(response.data)) {\n      throw new Error('Invalid UCDP response format');\n    }\n    return response.data.map((item: unknown) => {\n      const conflictItem = item as {\n        id: string;\n        date_start: string;\n        type_of_conflict: string;\n        location: string;\n        description: string;\n      };\n      return {\n        id: conflictItem.id,\n        date: conflictItem.date_start,\n        type: conflictItem.type_of_conflict,\n        location: conflictItem.location,\n        description: conflictItem.description,\n        source: 'UCDP',\n      };\n    });\n  } catch (error) {\n    if (axios.isAxiosError(error)) {\n      console.error('Error fetching UCDP data:', error.response ? error.response.data : error.message);\n    } else {\n      console.error('Error fetching UCDP data:', error);\n    }\n    return [];\n  }\n};\n\nexport const fetchHOTConflictZones = async (): Promise<ConflictZoneData[]> => {\n  try {\n    const response = await axios.get(getProxiedUrl('https://tasks.hotosm.org/api/v1/projects'));\n    console.log('HOT Response:', response.data);\n    if (!validateResponse(response.data)) {\n      throw new Error('Invalid HOT response format');\n    }\n    return response.data.map((item: unknown) => {\n      const conflictItem = item as {\n        id: string;\n        created: string;\n        geometry: string;\n        name: string;\n      };\n      return {\n        id: conflictItem.id,\n        date: conflictItem.created,\n        type: 'Crisis Mapping',\n        location: conflictItem.geometry,\n        description: conflictItem.name,\n        source: 'HOT',\n      };\n    });\n  } catch (error) {\n    console.error('Error fetching HOT data:', error);\n    return [];\n  }\n};\n\nexport const fetchReliefWebConflictZones = async (): Promise<ConflictZoneData[]> => {\n  try {\n    const response = await axios.get(getProxiedUrl(reliefWebApiUrl));\n    console.log('ReliefWeb Response:', response.data);\n    if (!validateResponse(response.data.data)) {\n      throw new Error('Invalid ReliefWeb response format');\n    }\n    return response.data.data.map((item: unknown) => {\n      const conflictItem = item as {\n        id: string;\n        date: string;\n        type: string;\n        location: string;\n        description?: string;\n      };\n      return {\n        id: conflictItem.id,\n        date: conflictItem.date,\n        type: conflictItem.type,\n        location: conflictItem.location,\n        description: conflictItem.description,\n        source: 'ReliefWeb',\n      };\n    });\n  } catch (error) {\n    console.error('Error fetching ReliefWeb data:', error);\n    return [];\n  }\n};\n\nexport const fetchGDACSConflictZones = async (): Promise<ConflictZoneData[]> => {\n  try {\n    const response = await axios.get(getProxiedUrl(gdacsApiUrl), { responseType: 'text' });\n    console.log('GDACS Response:', response.data);\n    const parsedData = await xml2js.parseStringPromise(response.data);\n    if (!parsedData.rss.channel[0].item) {\n      throw new Error('Invalid GDACS response format');\n    }\n    return parsedData.rss.channel[0].item.map((item: any) => {\n      return {\n        id: item.guid[0]._,\n        date: item.pubDate[0],\n        type: item.title[0],\n        location: item['gdacs:location'][0],\n        description: item.description[0],\n        source: 'GDACS',\n      };\n    });\n  } catch (error) {\n    console.error('Error fetching GDACS data:', error);\n    return [];\n  }\n};\n\nexport const fetchAllConflictZones = async (): Promise<ConflictZoneData[]> => {\n  try {\n    const results = await Promise.allSettled([\n      fetchACLEDConflictZones(),\n      fetchUCDPConflictZones(),\n      fetchHOTConflictZones(),\n      fetchReliefWebConflictZones(),\n      fetchGDACSConflictZones(),\n    ]);\n\n    const aggregatedData = results\n      .filter(result => result.status === 'fulfilled')\n      .flatMap(result => (result as PromiseFulfilledResult<ConflictZoneData[]>).value);\n\n    return aggregatedData;\n  } catch (error) {\n    console.error('Error aggregating conflict zone data:', error);\n    return [];\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/EIAService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/FeedsService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/FiltersService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/GeoEventsService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/IPFSService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/MarketDataService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/SpaceAssetsService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/UCDPDataService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/UserDataService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/WeatherDataService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/data-service-interfaces.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":40,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Data Service Interfaces (artifact-driven)\n// See: artifacts/starcom-mk2-data-service-interfaces.artifact\n// See: artifacts/starcom-mk2-data-service-observability.artifact\n// See: artifacts/starcom-mk2-data-service-refactor-plan.artifact\n\n// Observability contract for logging/metrics/tracing\nexport interface DataServiceObserver {\n  onFetchStart?(key: string): void;\n  onFetchEnd?(key: string, durationMs: number): void;\n  onError?(key: string, error: Error): void;\n  onCacheHit?(key: string): void;\n  onCacheMiss?(key: string): void;\n  onCacheEvict?(key: string): void;\n}\n\n// Generic data provider interface\nexport interface DataProvider<T = unknown> {\n  fetchData(key: string, options?: Record<string, unknown>): Promise<T>;\n  subscribe?(key: string, onData: (data: T) => void, options?: Record<string, unknown>): () => void;\n  setObserver?(observer: DataServiceObserver): void;\n}\n\n// Generic cache service interface\nexport interface DataCacheService<T = unknown> {\n  get(key: string): T | null;\n  set(key: string, value: T, ttl?: number): void;\n  delete(key: string): void;\n  clear(): void;\n  has(key: string): boolean;\n  setObserver?(observer: DataServiceObserver): void;\n}\n\n// Example: Composing multiple providers (fallback, aggregation)\nexport class FallbackProvider<T> implements DataProvider<T> {\n  constructor(private providers: DataProvider<T>[]) {}\n  async fetchData(key: string, options?: Record<string, unknown>): Promise<T> {\n    for (const provider of this.providers) {\n      try {\n        return await provider.fetchData(key, options);\n      } catch (e) {\n        // try next provider\n      }\n    }\n    throw new Error('All providers failed');\n  }\n}\n\n// AI-NOTE: This file is artifact-driven and should be updated if the interfaces artifact changes.\n","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/data-services.all.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/eia/EIADataCacheService.observability.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/eia/EIADataCacheService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[307,310],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[307,310],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[357,360],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[357,360],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[532,535],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[532,535],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[917,920],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[917,920],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// EIADataCacheService: Implements DataCacheService for EIA domain\n// Artifacts: data-service-interfaces, data-service-observability, data-service-refactor-plan\nimport { DataCacheService, DataServiceObserver } from '../data-service-interfaces';\n\nexport class EIADataCacheService implements DataCacheService<any> {\n  private cache = new Map<string, { value: any; expiresAt?: number }>();\n  private observer?: DataServiceObserver;\n\n  setObserver(observer: DataServiceObserver) {\n    this.observer = observer;\n  }\n\n  get(key: string): any | null {\n    const entry = this.cache.get(key);\n    if (!entry) {\n      this.observer?.onCacheMiss?.(key);\n      return null;\n    }\n    if (entry.expiresAt && entry.expiresAt < Date.now()) {\n      this.cache.delete(key);\n      this.observer?.onCacheEvict?.(key);\n      return null;\n    }\n    this.observer?.onCacheHit?.(key);\n    return entry.value;\n  }\n\n  set(key: string, value: any, ttl?: number): void {\n    const expiresAt = ttl ? Date.now() + ttl : undefined;\n    this.cache.set(key, { value, expiresAt });\n  }\n\n  delete(key: string): void {\n    this.cache.delete(key);\n    this.observer?.onCacheEvict?.(key);\n  }\n\n  clear(): void {\n    this.cache.clear();\n  }\n\n  has(key: string): boolean {\n    return this.cache.has(key);\n  }\n}\n\n// AI-NOTE: This is a minimal, artifact-driven implementation. Add persistence or advanced invalidation as needed.\n","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/eia/EIADataCacheService.unit.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/eia/EIADataProvider.observability.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/eia/EIADataProvider.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/eia/EIADataProvider.unit.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/eia/EIAService.e2e.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/eia/EIAService.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/eia/EIAService.ts","messages":[{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":5,"column":5,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":15,"endColumn":6},{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":20,"column":5,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":29,"endColumn":6},{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":34,"column":5,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":43,"endColumn":6},{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":48,"column":5,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":57,"endColumn":6}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Minimal EIAService implementation for testing\nclass EIAService {\n  static async getLatestOilPrice() {\n    const url = `https://api.eia.gov/v2/seriesid/PET.RWTC.W?api_key=${import.meta.env.VITE_EIA_API_KEY}`;\n    try {\n      const res = await fetch(url);\n      if (!res.ok) throw new Error('Network response was not ok');\n      const data = await res.json();\n      // Defensive: extract value from EIA API response\n      const value = data?.response?.data?.[0]?.value;\n      if (typeof value !== 'number') throw new Error('Invalid oil price data');\n      return value;\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  static async getLatestGasolinePrice() {\n    const url = `https://api.eia.gov/v2/seriesid/PET.EMM_EPM0_PTE_NUS_DPG.W?api_key=${import.meta.env.VITE_EIA_API_KEY}`;\n    try {\n      const res = await fetch(url);\n      if (!res.ok) throw new Error('Network response was not ok');\n      const data = await res.json();\n      const value = data?.response?.data?.[0]?.value;\n      if (typeof value !== 'number') throw new Error('Invalid gasoline price data');\n      return value;\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  static async getLatestOilInventory() {\n    const url = `https://api.eia.gov/v2/seriesid/PET.WCRSTUS1.W?api_key=${import.meta.env.VITE_EIA_API_KEY}`;\n    try {\n      const res = await fetch(url);\n      if (!res.ok) throw new Error('Network response was not ok');\n      const data = await res.json();\n      const value = data?.response?.data?.[0]?.value;\n      if (typeof value !== 'number') throw new Error('Invalid oil inventory data');\n      return value;\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  static async getLatestNaturalGasStorage() {\n    const url = `https://api.eia.gov/v2/seriesid/NG.NW2_EPG0_SWO_R48_BCF.W?api_key=${import.meta.env.VITE_EIA_API_KEY}`;\n    try {\n      const res = await fetch(url);\n      if (!res.ok) throw new Error('Network response was not ok');\n      const data = await res.json();\n      const value = data?.response?.data?.[0]?.value;\n      if (typeof value !== 'number') throw new Error('Invalid natural gas storage data');\n      return value;\n    } catch (err) {\n      throw err;\n    }\n  }\n}\n\nexport default EIAService;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/eia/LegacyEIAServiceAdapter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/market/MarketDataCacheService.unit.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/market/MarketDataProvider.unit.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/shared/FallbackProvider.unit.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/setupTests.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/styles/theme.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/tailwind.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/types/TimeDataTypes.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":3,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[63,66],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[63,66],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface CacheEntry {\n    timestamp: number;\n    data: any[]; // Replace `any` with the appropriate type\n  }","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/types/ucdpTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/ProxyUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/errorHandler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/fetchDataUtils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[65,68],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[65,68],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export async function fetchHistoricalData(time: number): Promise<any[]> {\n    return Promise.resolve([\n      { lat: 40.7128, lng: -74.006, size: 1, color: 'red', timestamp: time },\n    ]);\n  }","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/fetchHistoricalData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/formatDate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/generateColor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/logging.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/mockData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/queryUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/wallet.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/wasm.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/wasm/wasm_mini_server.d.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[506,509],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[506,509],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":36,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1174,1177],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1174,1177],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":57,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1762,1765],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1762,1765],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":59,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1866,1869],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1866,1869],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":60,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1921,1924],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1921,1924],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":61,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1958,1961],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1958,1961],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":69,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2415,2418],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2415,2418],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2492,2495],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2492,2495],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2500,2503],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2500,2503],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/wasm/wasm_mini_server.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/wasm/wasm_mini_server_bg.wasm.d.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":4,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[134,137],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[134,137],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[242,245],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[242,245],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[299,302],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[299,302],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[338,341],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[338,341],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[811,814],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[811,814],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[890,893],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[890,893],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[898,901],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[898,901],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/workers/dataFetcher.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]