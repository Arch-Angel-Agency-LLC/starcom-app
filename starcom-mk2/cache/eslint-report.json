[{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/.eslintrc.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/__tests__/EIAService.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[640,643],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[640,643],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1399,1402],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1399,1402],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":67,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2166,2169],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2166,2169],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":90,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2937,2940],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2937,2940],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":102,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3342,3345],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3342,3345],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi } from 'vitest';\nimport EIAService from '../services/EIAService';\nimport { EIAData } from '../interfaces/EIAData';\n\n// Mock fetch\nglobal.fetch = vi.fn();\n\ndescribe('EIAService', () => {\n    it('fetches the latest oil price successfully', async () => {\n        const mockResponse: EIAData = {\n        response: {\n            total: '1',\n            dateFormat: 'YYYY-MM-DD',\n            frequency: 'weekly',\n            data: [{ period: '2025-03-07', value: 67.52 }],\n        },\n        request: { command: '/v2/seriesid/PET.RWTC.W', params: {} },\n        apiVersion: '2.1.8',\n        };\n\n        (fetch as any).mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve(mockResponse),\n        });\n\n        await EIAService.getLatestOilPrice();\n        expect(fetch).toHaveBeenCalledWith(\n        `https://api.eia.gov/v2/seriesid/PET.RWTC.W?api_key=${import.meta.env.VITE_EIA_API_KEY}`\n        );\n    });\n\n    it('fetches the latest gasoline price successfully', async () => {\n        const mockResponse: EIAData = {\n        response: {\n            total: '1',\n            dateFormat: 'YYYY-MM-DD',\n            frequency: 'weekly',\n            data: [{ period: '2025-03-07', value: 67.52 }],\n        },\n        request: { command: '/v2/seriesid/PET.EMM_EPM0_PTE_NUS_DPG.W', params: {} },\n        apiVersion: '2.1.8',\n        };\n\n        (fetch as any).mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve(mockResponse),\n        });\n\n        await EIAService.getLatestGasolinePrice();\n        expect(fetch).toHaveBeenCalledWith(\n        `https://api.eia.gov/v2/seriesid/PET.EMM_EPM0_PTE_NUS_DPG.W?api_key=${import.meta.env.VITE_EIA_API_KEY}`\n        );\n    });\n\n    it('fetches the latest oil inventory successfully', async () => {\n        const mockResponse: EIAData = {\n        response: {\n            total: '1',\n            dateFormat: 'YYYY-MM-DD',\n            frequency: 'weekly',\n            data: [{ period: '2025-03-07', value: 67.52 }],\n        },\n        request: { command: '/v2/seriesid/PET.WCRSTUS1.W', params: {} },\n        apiVersion: '2.1.8',\n        };\n\n        (fetch as any).mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve(mockResponse),\n        });\n\n        await EIAService.getLatestOilInventory();\n        expect(fetch).toHaveBeenCalledWith(\n        `https://api.eia.gov/v2/seriesid/PET.WCRSTUS1.W?api_key=${import.meta.env.VITE_EIA_API_KEY}`\n        );\n    });\n\n    it('fetches the latest natural gas storage successfully', async () => {\n        const mockResponse: EIAData = {\n        response: {\n            total: '1',\n            dateFormat: 'YYYY-MM-DD',\n            frequency: 'weekly',\n            data: [{ period: '2025-03-07', value: 67.52 }],\n        },\n        request: { command: '/v2/seriesid/NG.NW2_EPG0_SWO_R48_BCF.W', params: {} },\n        apiVersion: '2.1.8',\n        };\n\n        (fetch as any).mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve(mockResponse),\n        });\n\n        await EIAService.getLatestNaturalGasStorage();\n        expect(fetch).toHaveBeenCalledWith(\n        `https://api.eia.gov/v2/seriesid/NG.NW2_EPG0_SWO_R48_BCF.W?api_key=${import.meta.env.VITE_EIA_API_KEY}`\n        );\n    });\n\n    it('handles fetch errors', async () => {\n        (fetch as any).mockResolvedValueOnce({\n        ok: false,\n        status: 404,\n        });\n\n        await expect(EIAService.getLatestOilPrice()).rejects.toThrow('HTTP error! Status: 404');\n    });\n});","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/api/eia.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/api/intelligence.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/api/market.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/api/rss.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/cache/Cache.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/cache/CacheManager.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[128,131],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[128,131],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import Cache from './Cache';\n\nclass CacheManager {\n  private static instance: CacheManager;\n  private caches: Map<string, Cache<any>>;\n\n  private constructor() {\n    this.caches = new Map();\n  }\n\n  public static getInstance(): CacheManager {\n    if (!CacheManager.instance) {\n      CacheManager.instance = new CacheManager();\n    }\n    return CacheManager.instance;\n  }\n\n  createCache<T>(name: string, defaultTTL?: number): Cache<T> {\n    if (this.caches.has(name)) {\n      throw new Error(`Cache with name ${name} already exists`);\n    }\n    if (defaultTTL !== undefined && (typeof defaultTTL !== 'number' || defaultTTL <= 0)) {\n      throw new Error(`Invalid TTL value: ${defaultTTL}. TTL must be a positive number.`);\n    }\n    const cache = new Cache<T>(defaultTTL);\n    this.caches.set(name, cache);\n    this.log(`Cache created: ${name} with TTL: ${defaultTTL}`);\n    return cache;\n  }\n\n  getCache<T>(name: string): Cache<T> | null {\n    const cache = this.caches.get(name) as Cache<T> || null;\n    if (!cache) {\n      this.warn(`Cache not found: ${name}`);\n    }\n    return cache;\n  }\n\n  deleteCache(name: string) {\n    if (this.caches.delete(name)) {\n      this.log(`Cache deleted: ${name}`);\n    } else {\n      this.warn(`Cache delete failed: ${name} not found`);\n    }\n  }\n\n  clearAllCaches() {\n    this.caches.forEach(cache => cache.clear());\n    this.log('All caches cleared');\n  }\n\n  getAllCacheNames(): string[] {\n    return Array.from(this.caches.keys());\n  }\n\n  hasCache(name: string): boolean {\n    return this.caches.has(name);\n  }\n\n  private log(message: string) {\n    console.log(`[CacheManager] ${message}`);\n  }\n\n  private warn(message: string) {\n    console.warn(`[CacheManager] ${message}`);\n  }\n}\n\nexport default CacheManager;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/cache/CacheRegistry.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[178,181],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[178,181],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[520,523],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[520,523],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import CacheManager from './CacheManager';\n\nclass CacheRegistry {\n  private static instance: CacheRegistry;\n  private cacheManager: CacheManager;\n  private services: Map<string, any>;\n\n  private constructor() {\n    this.cacheManager = CacheManager.getInstance();\n    this.services = new Map();\n  }\n\n  public static getInstance(): CacheRegistry {\n    if (!CacheRegistry.instance) {\n      CacheRegistry.instance = new CacheRegistry();\n    }\n    return CacheRegistry.instance;\n  }\n\n  registerService(name: string, service: any) {\n    if (this.services.has(name)) {\n      throw new Error(`Service with name ${name} already registered`);\n    }\n    this.services.set(name, service);\n    console.log(`Service registered: ${name}`);\n  }\n\n  getService<T>(name: string): T | null {\n    const service = this.services.get(name) || null;\n    if (!service) {\n      console.warn(`Service not found: ${name}`);\n    }\n    return service;\n  }\n\n  getCacheManager(): CacheManager {\n    return this.cacheManager;\n  }\n}\n\nexport default CacheRegistry;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/cache/EIADataCacheService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/cache/IntelReportCache.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/TermsModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/WalletStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Conflict/ConflictDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Conflict/ConflictList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/DropdownMenu/DropdownMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Features/GlobeGeoEvent/GlobeGeoEvent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Features/GlobeGeoHeatmap/GlobeGeoHeatmap.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Features/GlobeGeoMarker/GlobeGeoMarker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Features/GlobeGeoOverlay/GlobeGeoOverlay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Features/GlobeGeoWeather/GlobeGeoWeather.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Features/GlobeIntelNode/GlobeIntelNode.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Features/GlobeSpaceAsset/GlobeSpaceAsset.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Features/GlobeSpaceEntity/GlobeSpaceEntity.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Features/GlobeSpacecraft/GlobeSpacecraft.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Globe.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":53,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1906,1909],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1906,1909],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":54,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1944,1947],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1944,1947],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'currentConfig'. Either include it or remove the dependency array.","line":81,"column":6,"nodeType":"ArrayExpression","endLine":81,"endColumn":25,"suggestions":[{"desc":"Update the dependencies array to be: [currentConfig, visualizationMode]","fix":{"range":[2873,2892],"text":"[currentConfig, visualizationMode]"}}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/components/Globe/Globe.tsx\nimport React, { useState, useEffect, useRef } from 'react';\nimport Globe from 'react-globe.gl';\nimport { useGlobeContext } from '../../context/GlobeContext';\nimport { useVisualizationMode } from '../../context/VisualizationModeContext';\n\nconst visualizationConfig = {\n  CyberCommand: {\n    IntelReports: {\n      globeImageUrl: '//unpkg.com/three-globe/example/img/earth-dark.jpg',\n      eventData: [/* Example IntelReports events */],\n    },\n    Timelines: {\n      globeImageUrl: '//unpkg.com/three-globe/example/img/earth-dark.jpg',\n      eventData: [/* Example Timelines events */],\n    },\n    CrisisZones: {\n      globeImageUrl: '//unpkg.com/three-globe/example/img/earth-dark.jpg',\n      eventData: [/* Example CrisisZones events */],\n    },\n  },\n  GeoPolitical: {\n    NationalTerritories: {\n      globeImageUrl: '//unpkg.com/three-globe/example/img/earth-blue-marble.jpg',\n      eventData: [/* Example NationalTerritories events */],\n    },\n    DiplomaticEvents: {\n      globeImageUrl: '//unpkg.com/three-globe/example/img/earth-blue-marble.jpg',\n      eventData: [/* Example DiplomaticEvents events */],\n    },\n    ResourceZones: {\n      globeImageUrl: '//unpkg.com/three-globe/example/img/earth-blue-marble.jpg',\n      eventData: [/* Example ResourceZones events */],\n    },\n  },\n  EcoNatural: {\n    SpaceWeather: {\n      globeImageUrl: '//unpkg.com/three-globe/example/img/earth-day.jpg',\n      eventData: [/* Example SpaceWeather events */],\n    },\n    EcologicalDisasters: {\n      globeImageUrl: '//unpkg.com/three-globe/example/img/earth-day.jpg',\n      eventData: [/* Example EcologicalDisasters events */],\n    },\n    EarthWeather: {\n      globeImageUrl: '//unpkg.com/three-globe/example/img/earth-day.jpg',\n      eventData: [/* Example EarthWeather events */],\n    },\n  },\n};\n\nconst GlobeView: React.FC = () => {\n  const [globeData, setGlobeData] = useState<any[]>([]);\n  const globeRef = useRef<any>(null);\n  const { setFocusLocation } = useGlobeContext();\n  const { visualizationMode } = useVisualizationMode();\n\n  useEffect(() => {\n    const handleResize = () => {\n      if (globeRef.current) {\n        globeRef.current.renderer().setSize(window.innerWidth, window.innerHeight);\n        globeRef.current.camera().aspect = window.innerWidth / window.innerHeight;\n        globeRef.current.camera().updateProjectionMatrix();\n      }\n    };\n\n    window.addEventListener('resize', handleResize);\n    handleResize();\n\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  const currentConfig = visualizationConfig[visualizationMode.mode][visualizationMode.subMode];\n\n  useEffect(() => {\n    if (currentConfig) {\n      setGlobeData(currentConfig.eventData);\n    } else {\n      console.warn(`Unknown visualization mode or sub-mode: ${visualizationMode.mode}, ${visualizationMode.subMode}`);\n    }\n  }, [visualizationMode]);\n\n  const handleGlobeClick = ({ lat, lng }: { lat: number; lng: number }) => {\n    const newMarker = { lat, lng, size: 0.5, color: 'red' };\n    setGlobeData((prevData) => [...prevData, newMarker]);\n    setFocusLocation({ lat, lng });\n\n    if (globeRef.current) {\n      globeRef.current.pointOfView({ lat, lng, altitude: 1.5 });\n    }\n  };\n\n  return (\n    <div style={{ height: '100vh', width: '100%', position: 'relative' }}>\n      <Globe\n        ref={globeRef}\n        pointsData={globeData}\n        pointAltitude=\"size\"\n        pointColor=\"color\"\n        globeImageUrl={currentConfig?.globeImageUrl}\n        onGlobeClick={handleGlobeClick}\n      />\n    </div>\n  );\n};\n\nexport default GlobeView;","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Handlers/GlobeDataProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Handlers/GlobeEventHandler.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Handlers/GlobeLayerManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Hooks/useGlobeData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Hooks/useGlobeInteraction.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Hooks/useGlobeLayerControl.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Bars/BottomBar/BottomBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Bars/LeftSideBar/LeftSideBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Bars/RightSideBar/RightSideBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Bars/TopBar/TopBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Bars/TopBar/useTopBarData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Corners/BottomLeft/BottomLeft.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Corners/BottomRight/BottomRight.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Corners/TopLeft/TopLeft.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Corners/TopRight/TopRight.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/EnergyData/EnergyCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/EnergyData/EnergyChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/EnergyData/EnergyMap.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/MiniMap/MiniMap.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Overlay/Overlay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/TimeScrubber/TimeScrubber.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/ToolTip/Tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Intel/IntelReportViewer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Marketplace/ListReportForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Marketplace/MarketTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Marketplace/MarketplaceDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'marketData' is assigned a value but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[240,243],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[240,243],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { fetchMarketData } from '../../api/market';\nimport MarketTable from './MarketTable';\n\nconst MarketplaceDashboard: React.FC = () => {\n  const [marketData, setMarketData] = useState<any[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const loadMarketData = async () => {\n      try {\n        setIsLoading(true);\n        const data = await fetchMarketData();\n        setMarketData(data);\n      } catch (err) {\n        setError('Failed to fetch market data.');\n        console.error(err);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadMarketData();\n  }, []);\n\n  if (isLoading) {\n    return <div>Loading market data...</div>;\n  }\n\n  if (error) {\n    return <div>Error: {error}</div>;\n  }\n\n  return (\n    <div className=\"marketplace-dashboard\">\n      <h1 className=\"text-2xl font-bold mb-4\">Marketplace Dashboard</h1>\n      <MarketTable />\n    </div>\n  );\n};\n\nexport default MarketplaceDashboard;","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Marketplace/ReportList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Shared/Button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Shared/Card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Shared/Loader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Shared/Modal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/TinyGlobe/TinyGlobe.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/ui/Card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/context/AuthContext.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/context/AuthContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'switchNetwork' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":23},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":73,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":73,"endColumn":21}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback, useEffect } from 'react';\nimport { connectToWallet, disconnectWallet, isWalletConnected } from '../utils/wallet';\nimport { switchNetwork } from '../middleware/web3Middleware';\nimport { AuthContext } from './AuthContext';\nimport { ethers } from 'ethers';\n\ndeclare global {\n  interface Window {\n    ethereum?: ethers.providers.ExternalProvider;\n  }\n}\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [wallet, setWallet] = useState<{\n    provider: ethers.providers.Web3Provider | null;\n    address: string | null;\n    signer: ethers.Signer | null;\n  }>({ provider: null, address: null, signer: null });\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const connectWalletHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const targetChainId = 1; // Example: Ethereum Mainnet\n      const connection = await connectToWallet(targetChainId);\n      setWallet(connection);\n    } catch (error) {\n      setError(error instanceof Error ? error.message : 'An unknown error occurred.');\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const disconnectWalletHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      await disconnectWallet();\n      setWallet({ provider: null, address: null, signer: null });\n    } catch (error) {\n      setError(error instanceof Error ? error.message : 'An unknown error occurred.');\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    const checkConnection = async () => {\n      if (await isWalletConnected()) {\n        await connectWalletHandler();\n      }\n    };\n    checkConnection();\n  }, [connectWalletHandler]);\n\n  const value = {\n    isAuthenticated: !!wallet.address,\n    address: wallet.address,\n    provider: wallet.provider,\n    signer: wallet.signer,\n    connectWallet: connectWalletHandler,\n    disconnectWallet: disconnectWalletHandler,\n    isLoading,\n    error,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n\nexport const useAuth = () => {\n  const context = React.useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/context/DashboardContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'err' is defined but never used.","line":36,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":25},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":53,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":53,"endColumn":26}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useEffect, useState } from 'react';\nimport EIAService from '../services/EIAService';\n\ninterface DashboardContextType {\n    oilPrice: number | null;\n    gasolinePrice: number | null;\n    oilInventory: number | null;\n    naturalGasStorage: number | null;\n    loading: boolean;\n    error: string | null;\n}\n\nconst DashboardContext = createContext<DashboardContextType | undefined>(undefined);\n\nexport const DashboardProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n    const [oilPrice, setOilPrice] = useState<number | null>(null);\n    const [gasolinePrice, setGasolinePrice] = useState<number | null>(null);\n    const [oilInventory, setOilInventory] = useState<number | null>(null);\n    const [naturalGasStorage, setNaturalGasStorage] = useState<number | null>(null);\n    const [loading, setLoading] = useState<boolean>(true);\n    const [error, setError] = useState<string | null>(null);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const [oilPrice, gasolinePrice, oilInventory, naturalGasStorage] = await Promise.all([\n                    EIAService.getLatestOilPrice(),\n                    EIAService.getLatestGasolinePrice(),\n                    EIAService.getLatestOilInventory(),\n                    EIAService.getLatestNaturalGasStorage(),\n                ]);\n                setOilPrice(oilPrice);\n                setGasolinePrice(gasolinePrice);\n                setOilInventory(oilInventory);\n                setNaturalGasStorage(naturalGasStorage);\n            } catch (err) {\n                setError('Failed to fetch data');\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchData();\n    }, []);\n\n    return (\n        <DashboardContext.Provider value={{ oilPrice, gasolinePrice, oilInventory, naturalGasStorage, loading, error }}>\n            {children}\n        </DashboardContext.Provider>\n    );\n};\n\nexport const useDashboard = () => {\n    const context = useContext(DashboardContext);\n    if (!context) throw new Error('useDashboard must be used within DashboardProvider');\n    return context;\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/context/GlobeContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":21,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":21,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/context/GlobeContext.tsx\nimport React, { createContext, useContext, useState, ReactNode } from 'react';\n\ninterface GlobeContextType {\n  focusLocation: { lat: number; lng: number } | null;\n  setFocusLocation: (location: { lat: number; lng: number } | null) => void;\n}\n\nconst GlobeContext = createContext<GlobeContextType | undefined>(undefined);\n\nexport const GlobeProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [focusLocation, setFocusLocation] = useState<{ lat: number; lng: number } | null>(null);\n\n  return (\n    <GlobeContext.Provider value={{ focusLocation, setFocusLocation }}>\n      {children}\n    </GlobeContext.Provider>\n  );\n};\n\nexport const useGlobeContext = () => {\n  const context = useContext(GlobeContext);\n  if (!context) throw new Error('useGlobeContext must be used within a GlobeProvider');\n  return context;\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/context/IntelContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/context/MarketplaceContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":63,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":63,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { fetchMarketData } from '../api/market';\nimport { MarketplaceContextType, MarketData } from '../interfaces/Marketplace';\nimport { handleError } from '../utils/errorHandler';\n\ninterface MarketplaceState {\n  marketData: MarketData[];\n  isLoading: boolean;\n  error: string | null;\n}\n\ntype MarketplaceAction =\n  | { type: 'FETCH_START' }\n  | { type: 'FETCH_SUCCESS'; payload: MarketData[] }\n  | { type: 'FETCH_ERROR'; payload: string };\n\nconst initialState: MarketplaceState = {\n  marketData: [],\n  isLoading: false,\n  error: null,\n};\n\nconst marketplaceReducer = (state: MarketplaceState, action: MarketplaceAction): MarketplaceState => {\n  switch (action.type) {\n    case 'FETCH_START':\n      return { ...state, isLoading: true, error: null };\n    case 'FETCH_SUCCESS':\n      return { ...state, isLoading: false, marketData: action.payload };\n    case 'FETCH_ERROR':\n      return { ...state, isLoading: false, error: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst MarketplaceContext = createContext<MarketplaceContextType | undefined>(undefined);\n\nexport const MarketplaceProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [state, dispatch] = useReducer(marketplaceReducer, initialState);\n\n  const refreshMarketData = async () => {\n    dispatch({ type: 'FETCH_START' });\n    try {\n      const data = await fetchMarketData();\n      dispatch({ type: 'FETCH_SUCCESS', payload: data });\n    } catch (err) {\n      const errorMessage = handleError(err);\n      dispatch({ type: 'FETCH_ERROR', payload: errorMessage });\n    }\n  };\n\n  useEffect(() => {\n    refreshMarketData();\n  }, []);\n\n  return (\n    <MarketplaceContext.Provider value={{ ...state, refreshMarketData }}>\n      {children}\n    </MarketplaceContext.Provider>\n  );\n};\n\nexport const useMarketplace = (): MarketplaceContextType => {\n  const context = useContext(MarketplaceContext);\n  if (!context) {\n    throw new Error('useMarketplace must be used within a MarketplaceProvider');\n  }\n  return context;\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/context/SettingsContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/context/TimeDataProvider.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":90,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":90,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useEffect, useRef, useCallback, ReactNode } from 'react';\nimport { fetchHistoricalData } from '../utils/fetchHistoricalData'; // Moved `fetchHistoricalData` to a separate file\n\ninterface TimeDataContextProps {\n  currentTime: number;\n  isLive: boolean;\n  setCurrentTime: (time: number) => void;\n  toggleLive: () => void;\n  fetchDataForTime: (time: number) => Promise<void>;\n  error: string | null;\n}\n\ninterface CacheEntry {\n  timestamp: number;\n  data: Array<{ lat: number; lng: number; size: number; color: string; timestamp: number }>;\n}\n\nconst TimeDataContext = createContext<TimeDataContextProps | undefined>(undefined);\n\nexport const TimeDataProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [currentTime, setCurrentTime] = useState<number>(Date.now());\n  const [isLive, setIsLive] = useState<boolean>(true);\n  const [dataCache, setDataCache] = useState<Map<number, CacheEntry>>(new Map());\n  const [error, setError] = useState<string | null>(null);\n  const lastUpdateTimeRef = useRef<number>(0);\n\n  const toggleLive = () => {\n    setIsLive(!isLive);\n    if (!isLive) setCurrentTime(Date.now());\n  };\n\n  const fetchDataForTime = useCallback(\n    async (time: number): Promise<void> => {\n      if (dataCache.has(time)) return;\n\n      try {\n        setError(null);\n        const data = await fetchHistoricalData(time);\n        setDataCache((prev) => {\n          const newCache = new Map(prev);\n          newCache.set(time, { timestamp: Date.now(), data });\n\n          // Evict older entries (LRU logic)\n          if (newCache.size > 100) {\n            const oldestKey = Array.from(newCache.keys())[0];\n            newCache.delete(oldestKey);\n          }\n\n          return newCache;\n        });\n      } catch (err) {\n        console.error('Error fetching data:', err);\n        setError('Failed to fetch data for the selected time.');\n      }\n    },\n    [dataCache]\n  );\n\n  useEffect(() => {\n    if (!isLive) return;\n\n    const interval = setInterval(() => {\n      const now = Date.now();\n      if (now - lastUpdateTimeRef.current >= 5000) {\n        setCurrentTime(now);\n        fetchDataForTime(now);\n        lastUpdateTimeRef.current = now;\n      }\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [isLive, fetchDataForTime]);\n\n  return (\n    <TimeDataContext.Provider\n      value={{\n        currentTime,\n        isLive,\n        setCurrentTime,\n        toggleLive,\n        fetchDataForTime,\n        error,\n      }}\n    >\n      {children}\n    </TimeDataContext.Provider>\n  );\n};\n\nexport const useTimeData = () => {\n  const context = useContext(TimeDataContext);\n  if (!context) throw new Error('useTimeData must be used within a TimeDataProvider');\n  return context;\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/context/UCDPContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":4,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[116,119],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[116,119],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[168,171],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[168,171],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":16,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":16,"endColumn":21}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useState, useContext, ReactNode } from 'react';\n\ninterface UCDPContextType {\n  data: any;\n  setData: React.Dispatch<React.SetStateAction<any>>;\n}\n\nconst UCDPContext = createContext<UCDPContextType | undefined>(undefined);\n\nexport const UCDPProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [data, setData] = useState(null);\n\n  return <UCDPContext.Provider value={{ data, setData }}>{children}</UCDPContext.Provider>;\n};\n\nexport const useUCDP = () => {\n  const context = useContext(UCDPContext);\n  if (!context) throw new Error('useUCDP must be used within a UCDPProvider');\n  return context;\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/context/VisualizationModeContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":38,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":38,"endColumn":34}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createContext, useContext, useState, useEffect } from 'react';\n\n// Extend VisualizationMode to include sub-modes\nexport type VisualizationMode =\n  | { mode: 'CyberCommand'; subMode: 'IntelReports' | 'Timelines' | 'CrisisZones' }\n  | { mode: 'GeoPolitical'; subMode: 'NationalTerritories' | 'DiplomaticEvents' | 'ResourceZones' }\n  | { mode: 'EcoNatural'; subMode: 'SpaceWeather' | 'EcologicalDisasters' | 'EarthWeather' };\n\n// Create a context for VisualizationMode\ninterface VisualizationModeContextProps {\n  visualizationMode: VisualizationMode;\n  setVisualizationMode: (mode: VisualizationMode) => void;\n  resetVisualizationMode: () => void;\n}\n\nconst VisualizationModeContext = createContext<VisualizationModeContextProps | undefined>(undefined);\n\n// Provider component\nexport const VisualizationModeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [visualizationMode, setVisualizationMode] = useState<VisualizationMode>({ mode: 'CyberCommand', subMode: 'IntelReports' });\n\n  const resetVisualizationMode = () => {\n    setVisualizationMode({ mode: 'CyberCommand', subMode: 'IntelReports' }); // Default mode with sub-mode\n  };\n\n  useEffect(() => {\n    console.log(`VisualizationMode changed to: ${visualizationMode.mode}, SubMode: ${visualizationMode.subMode}`);\n  }, [visualizationMode]);\n\n  return (\n    <VisualizationModeContext.Provider value={{ visualizationMode, setVisualizationMode, resetVisualizationMode }}>\n      {children}\n    </VisualizationModeContext.Provider>\n  );\n};\n\n// Hook to use the VisualizationMode context\nexport const useVisualizationMode = () => {\n  const context = useContext(VisualizationModeContext);\n  if (!context) {\n    throw new Error('useVisualizationMode must be used within a VisualizationModeProvider');\n  }\n  return context;\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/context/WASMContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[264,267],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[264,267],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":51,"column":24,"nodeType":"Identifier","messageId":"namedExport","endLine":51,"endColumn":31}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { initializeWASM, fetchFromMiniServer as fetchFromWASM } from \"../utils/wasm\";\n\ninterface WASMContextType {\n  wasmReady: boolean;\n  fetchFromMiniServer: (url: string) => Promise<any>;\n}\n\nconst WASMContext = createContext<WASMContextType | undefined>(undefined);\n\ninterface WASMProviderProps {\n  children: React.ReactNode;\n}\n\nlet wasmInitializationPromise: Promise<void> | null = null;\n\nconst WASMProvider: React.FC<WASMProviderProps> = ({ children }) => {\n  const [wasmReady, setWasmReady] = useState(false);\n\n  useEffect(() => {\n    if (!wasmInitializationPromise) {\n      wasmInitializationPromise = initializeWASM().then(() => {\n        setWasmReady(true);\n      });\n    } else {\n      wasmInitializationPromise.then(() => {\n        setWasmReady(true);\n      });\n    }\n  }, []);\n\n  const fetchFromMiniServer = async (url: string) => {\n    return await fetchFromWASM(url);\n  };\n\n  return (\n    <WASMContext.Provider value={{ wasmReady, fetchFromMiniServer }}>\n      {children}\n    </WASMContext.Provider>\n  );\n};\n\nconst useWASM = () => {\n  const context = useContext(WASMContext);\n  if (!context) {\n    throw new Error(\"useWASM must be used within a WASMProvider\");\n  }\n  return context;\n};\n\nexport { WASMProvider, useWASM, WASMContext };","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/context/useAuth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/contracts/IntelligenceMarket.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":66,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1773,1776],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1773,1776],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { BrowserProvider, Contract } from 'ethers';\nimport IntelligenceMarketABI from './IntelligenceMarketABI.json';\n\nconst CONTRACT_ADDRESS = '0xYourContractAddressHere';\n\nexport const getIntelligenceMarketContract = (provider: BrowserProvider) => {\n  return new Contract(CONTRACT_ADDRESS, IntelligenceMarketABI, provider.getSigner());\n};\n\nexport const buyAsset = async (\n  provider: BrowserProvider,\n  assetId: string,\n  price: bigint\n) => {\n  const contract = getIntelligenceMarketContract(provider);\n  const tx = await contract.buyAsset(assetId, { value: price });\n  await tx.wait();\n  return tx;\n};\n\nexport const sellAsset = async (\n  provider: BrowserProvider,\n  assetId: string,\n  price: bigint\n) => {\n  const contract = getIntelligenceMarketContract(provider);\n  const tx = await contract.sellAsset(assetId, price);\n  await tx.wait();\n  return tx;\n};\n\nexport const listAsset = async (\n  provider: BrowserProvider,\n  name: string,\n  price: bigint\n): Promise<void> => {\n  try {\n    const contract = getIntelligenceMarketContract(provider);\n    const tx = await contract.listAsset(name, price);\n    await tx.wait();\n    console.log(`Asset listed: ${name} for price: ${price}`);\n  } catch (error) {\n    console.error('Error listing asset:', error);\n    throw error;\n  }\n};\n\nexport const purchaseAsset = async (\n  provider: BrowserProvider,\n  assetId: number\n): Promise<void> => {\n  try {\n    const contract = getIntelligenceMarketContract(provider);\n    const tx = await contract.purchaseAsset(assetId);\n    await tx.wait();\n    console.log(`Asset purchased: ${assetId}`);\n  } catch (error) {\n    console.error('Error purchasing asset:', error);\n    throw error;\n  }\n};\n\nexport const getAssetDetails = async (\n  provider: BrowserProvider,\n  assetId: number\n): Promise<any> => {\n  try {\n    const contract = getIntelligenceMarketContract(provider);\n    const asset = await contract.assets(assetId);\n    console.log(`Asset details:`, asset);\n    return asset;\n  } catch (error) {\n    console.error('Error fetching asset details:', error);\n    throw error;\n  }\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/hooks/data/useFetchConflicts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/hooks/data/useFetchData.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'options'. Either include it or remove the dependency array.","line":25,"column":6,"nodeType":"ArrayExpression","endLine":25,"endColumn":11,"suggestions":[{"desc":"Update the dependencies array to be: [options, url]","fix":{"range":[645,650],"text":"[options, url]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\n\nexport const useFetchData = <T>(url: string, options = {}) => {\n  const [data, setData] = useState<T | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      setError(null);\n\n      try {\n        const response = await fetch(url, options);\n        const result = await response.json();\n        setData(result);\n      } catch (err) {\n        setError(err as Error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [url]);\n\n  return { data, loading, error };\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/hooks/ui/useAuth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/hooks/ui/useGlobeInteractions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/hooks/useEIAData.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'err' is defined but never used.","line":25,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport EIAService from '../services/EIAService';\n\nexport const useEIAData = () => {\n  const [oilPrice, setOilPrice] = useState<number | null>(null);\n  const [gasolinePrice, setGasolinePrice] = useState<number | null>(null);\n  const [oilInventory, setOilInventory] = useState<number | null>(null);\n  const [naturalGasStorage, setNaturalGasStorage] = useState<number | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const [oilPrice, gasolinePrice, oilInventory, naturalGasStorage] = await Promise.all([\n          EIAService.getLatestOilPrice(),\n          EIAService.getLatestGasolinePrice(),\n          EIAService.getLatestOilInventory(),\n          EIAService.getLatestNaturalGasStorage(),\n        ]);\n        setOilPrice(oilPrice);\n        setGasolinePrice(gasolinePrice);\n        setOilInventory(oilInventory);\n        setNaturalGasStorage(naturalGasStorage);\n      } catch (err) {\n        setError('Failed to fetch data');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  return { oilPrice, gasolinePrice, oilInventory, naturalGasStorage, loading, error };\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/hooks/useWASM.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/hooks/useWallet.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":1,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":32}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useEffect, useState } from 'react';\nimport { fetchWalletBalance, switchNetwork } from '../middleware/web3Middleware';\n\ninterface WalletState {\n  balance: string | null;\n  isLoading: boolean;\n  error: string | null;\n}\n\nexport const useWallet = () => {\n  const [walletState, setWalletState] = useState<WalletState>({\n    balance: null,\n    isLoading: false,\n    error: null,\n  });\n\n  const fetchBalance = useCallback(async (address: string) => {\n    setWalletState((prev) => ({ ...prev, isLoading: true, error: null }));\n    try {\n      const balance = await fetchWalletBalance(address);\n      setWalletState((prev) => ({ ...prev, balance, isLoading: false }));\n    } catch (error) {\n      setWalletState((prev) => ({\n        ...prev,\n        error: error instanceof Error ? error.message : 'Failed to fetch balance',\n        isLoading: false,\n      }));\n    }\n  }, []);\n\n  const validateNetwork = useCallback(async (expectedChainId: number) => {\n    try {\n      await switchNetwork(expectedChainId);\n    } catch (error) {\n      setWalletState((prev) => ({\n        ...prev,\n        error: error instanceof Error ? error.message : 'Failed to switch network',\n      }));\n    }\n  }, []);\n\n  return {\n    ...walletState,\n    fetchBalance,\n    validateNetwork,\n  };\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/interfaces/EIAData.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[312,315],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[312,315],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface EIAData {\n    response: {\n        total: string;\n        dateFormat: string;\n        frequency: string;\n        data: {\n        period: string; // e.g., \"2025-03-07\"\n        value: number; // e.g., 67.52\n        }[];\n    };\n    request: {\n        command: string;\n        params: Record<string, any>;\n    };\n    apiVersion: string;\n}","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/interfaces/MarketData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/interfaces/Marketplace.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/layouts/HUDLayout/HUDLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/layouts/SettingsLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/layouts/StandardLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/middleware/apiHandler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/middleware/web3Middleware.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ethers' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[170,173],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[170,173],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":45,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1341,1344],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1341,1344],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ethers } from 'ethers';\n\nexport const requireWalletConnection = async (\n  wallet: WalletConnection | null,\n  callback: (connection: WalletConnection) => Promise<any>\n) => {\n  if (!wallet || !wallet.address || !wallet.provider || !wallet.signer) {\n    throw new Error('Wallet not connected. Please connect your wallet.');\n  }\n  try {\n    return await callback(wallet);\n  } catch (error) {\n    console.error('Error during wallet operation:', error);\n    throw error;\n  }\n};\n\nexport const fetchWalletBalance = async (address: string): Promise<string> => {\n  if (!address) {\n    throw new Error('Wallet address is required to fetch balance.');\n  }\n\n  // Simulate fetching balance (replace with actual implementation)\n  return '0.0';\n};\n\nexport const verifyNetwork = (chainId: number, expectedChainId: number): void => {\n  if (chainId !== expectedChainId) {\n    throw new Error(`Incorrect network. Expected chainId ${expectedChainId}, got ${chainId}`);\n  }\n};\n\nexport const switchNetwork = async (chainId: number): Promise<void> => {\n  if (!window.ethereum) {\n    throw new Error('No Web3 provider detected. Please install MetaMask.');\n  }\n\n  await window.ethereum.request({\n    method: 'wallet_switchEthereumChain',\n    params: [{ chainId: `0x${chainId.toString(16)}` }],\n  });\n};\n\nexport const addNetwork = async (\n  ethereumProvider: any, // Replace with a specific type if available\n  networkParams: {\n    chainId: number;\n    chainName: string;\n    rpcUrls: string[];\n    nativeCurrency: { name: string; symbol: string; decimals: number };\n    blockExplorerUrls?: string[];\n  }\n): Promise<void> => {\n  if (!ethereumProvider || !ethereumProvider.request) {\n    throw new Error('Ethereum provider does not support the `request` method.');\n  }\n\n  await ethereumProvider.request({\n    method: 'wallet_addEthereumChain',\n    params: [\n      {\n        chainId: `0x${networkParams.chainId.toString(16)}`,\n        chainName: networkParams.chainName,\n        rpcUrls: networkParams.rpcUrls,\n        nativeCurrency: networkParams.nativeCurrency,\n        blockExplorerUrls: networkParams.blockExplorerUrls || [],\n      },\n    ],\n  });\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/models/IntelReport.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/pages/MainPage/MainPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/pages/SettingsPage/SettingsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/routes/marketplace.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/routes/routes.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/ApiService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/BlockchainService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/ConflictZoneService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":153,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":153,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4751,4754],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4751,4754],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import axios from 'axios';\nimport { getProxiedUrl } from '../utils/ProxyUtils';\nimport xml2js from 'xml2js';\n\nconst reliefWebApiUrl = import.meta.env.VITE_RELIEF_WEB_API_URL;\nconst gdacsApiUrl = import.meta.env.VITE_GDACS_API_URL;\n\ninterface ConflictZoneData {\n  id: string;\n  date: string;\n  type: string;\n  location: string;\n  description?: string;\n  source: string;\n}\n\nconst validateResponse = (data: unknown): boolean => {\n  return Array.isArray(data);\n};\n\nexport const fetchACLEDConflictZones = async (): Promise<ConflictZoneData[]> => {\n  try {\n    const apiKey = import.meta.env.ACLED_API_KEY;\n    const response = await axios.get(getProxiedUrl(`https://api.acleddata.com/acled/read?key=${apiKey}`));\n    console.log('ACLED Response:', response.data);\n    if (!validateResponse(response.data)) {\n      throw new Error('Invalid ACLED response format');\n    }\n    return response.data.map((item: unknown) => {\n      const conflictItem = item as {\n        event_id: string;\n        event_date: string;\n        event_type: string;\n        location: string;\n        notes?: string;\n      };\n      return {\n        id: conflictItem.event_id,\n        date: conflictItem.event_date,\n        type: conflictItem.event_type,\n        location: conflictItem.location,\n        description: conflictItem.notes,\n        source: 'ACLED',\n      };\n    });\n  } catch (error) {\n    console.error('Error fetching ACLED data:', error);\n    return [];\n  }\n};\n\nexport const fetchUCDPConflictZones = async (): Promise<ConflictZoneData[]> => {\n  try {\n    const response = await axios.get(getProxiedUrl('https://ucdp.uu.se/api/v2/conflicts'));\n    console.log('UCDP Response:', response.data);\n    if (!validateResponse(response.data)) {\n      throw new Error('Invalid UCDP response format');\n    }\n    return response.data.map((item: unknown) => {\n      const conflictItem = item as {\n        id: string;\n        date_start: string;\n        type_of_conflict: string;\n        location: string;\n        description: string;\n      };\n      return {\n        id: conflictItem.id,\n        date: conflictItem.date_start,\n        type: conflictItem.type_of_conflict,\n        location: conflictItem.location,\n        description: conflictItem.description,\n        source: 'UCDP',\n      };\n    });\n  } catch (error) {\n    if (axios.isAxiosError(error)) {\n      console.error('Error fetching UCDP data:', error.response ? error.response.data : error.message);\n    } else {\n      console.error('Error fetching UCDP data:', error);\n    }\n    return [];\n  }\n};\n\nexport const fetchHOTConflictZones = async (): Promise<ConflictZoneData[]> => {\n  try {\n    const response = await axios.get(getProxiedUrl('https://tasks.hotosm.org/api/v1/projects'));\n    console.log('HOT Response:', response.data);\n    if (!validateResponse(response.data)) {\n      throw new Error('Invalid HOT response format');\n    }\n    return response.data.map((item: unknown) => {\n      const conflictItem = item as {\n        id: string;\n        created: string;\n        geometry: string;\n        name: string;\n      };\n      return {\n        id: conflictItem.id,\n        date: conflictItem.created,\n        type: 'Crisis Mapping',\n        location: conflictItem.geometry,\n        description: conflictItem.name,\n        source: 'HOT',\n      };\n    });\n  } catch (error) {\n    console.error('Error fetching HOT data:', error);\n    return [];\n  }\n};\n\nexport const fetchReliefWebConflictZones = async (): Promise<ConflictZoneData[]> => {\n  try {\n    const response = await axios.get(getProxiedUrl(reliefWebApiUrl));\n    console.log('ReliefWeb Response:', response.data);\n    if (!validateResponse(response.data.data)) {\n      throw new Error('Invalid ReliefWeb response format');\n    }\n    return response.data.data.map((item: unknown) => {\n      const conflictItem = item as {\n        id: string;\n        date: string;\n        type: string;\n        location: string;\n        description?: string;\n      };\n      return {\n        id: conflictItem.id,\n        date: conflictItem.date,\n        type: conflictItem.type,\n        location: conflictItem.location,\n        description: conflictItem.description,\n        source: 'ReliefWeb',\n      };\n    });\n  } catch (error) {\n    console.error('Error fetching ReliefWeb data:', error);\n    return [];\n  }\n};\n\nexport const fetchGDACSConflictZones = async (): Promise<ConflictZoneData[]> => {\n  try {\n    const response = await axios.get(getProxiedUrl(gdacsApiUrl), { responseType: 'text' });\n    console.log('GDACS Response:', response.data);\n    const parsedData = await xml2js.parseStringPromise(response.data);\n    if (!parsedData.rss.channel[0].item) {\n      throw new Error('Invalid GDACS response format');\n    }\n    return parsedData.rss.channel[0].item.map((item: any) => {\n      return {\n        id: item.guid[0]._,\n        date: item.pubDate[0],\n        type: item.title[0],\n        location: item['gdacs:location'][0],\n        description: item.description[0],\n        source: 'GDACS',\n      };\n    });\n  } catch (error) {\n    console.error('Error fetching GDACS data:', error);\n    return [];\n  }\n};\n\nexport const fetchAllConflictZones = async (): Promise<ConflictZoneData[]> => {\n  try {\n    const results = await Promise.allSettled([\n      fetchACLEDConflictZones(),\n      fetchUCDPConflictZones(),\n      fetchHOTConflictZones(),\n      fetchReliefWebConflictZones(),\n      fetchGDACSConflictZones(),\n    ]);\n\n    const aggregatedData = results\n      .filter(result => result.status === 'fulfilled')\n      .flatMap(result => (result as PromiseFulfilledResult<ConflictZoneData[]>).value);\n\n    return aggregatedData;\n  } catch (error) {\n    console.error('Error aggregating conflict zone data:', error);\n    return [];\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/EIAService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/FeedsService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/FiltersService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/IPFSService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/MarketDataService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/UCDPDataService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/UserDataService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/WeatherDataService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/setupTests.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/styles/theme.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/tailwind.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/types/TimeDataTypes.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":3,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[63,66],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[63,66],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface CacheEntry {\n    timestamp: number;\n    data: any[]; // Replace `any` with the appropriate type\n  }","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/types/ucdpTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/ProxyUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/errorHandler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/fetchDataUtils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[65,68],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[65,68],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export async function fetchHistoricalData(time: number): Promise<any[]> {\n    return Promise.resolve([\n      { lat: 40.7128, lng: -74.006, size: 1, color: 'red', timestamp: time },\n    ]);\n  }","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/fetchHistoricalData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/formatDate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/generateColor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/logging.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/mockData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/queryUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/wallet.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/wasm.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/wasm/wasm_mini_server.d.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[506,509],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[506,509],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":36,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1174,1177],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1174,1177],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":57,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1762,1765],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1762,1765],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":59,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1866,1869],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1866,1869],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":60,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1921,1924],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1921,1924],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":61,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1958,1961],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1958,1961],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":69,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2415,2418],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2415,2418],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2492,2495],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2492,2495],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2500,2503],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2500,2503],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/wasm/wasm_mini_server.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/wasm/wasm_mini_server_bg.wasm.d.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":4,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[134,137],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[134,137],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[242,245],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[242,245],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[299,302],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[299,302],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[338,341],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[338,341],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[811,814],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[811,814],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[890,893],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[890,893],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[898,901],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[898,901],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/workers/dataFetcher.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]