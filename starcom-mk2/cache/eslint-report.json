[{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/.eslintrc.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/__mocks__/styleMock.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/api/auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/api/eia.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/api/intelligence.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/api/market.mock.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/api/market.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/api/rss.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/cache/Cache.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/cache/CacheManager.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[128,131],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[128,131],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import Cache from './Cache';\n\nclass CacheManager {\n  private static instance: CacheManager;\n  private caches: Map<string, Cache<any>>;\n\n  private constructor() {\n    this.caches = new Map();\n  }\n\n  public static getInstance(): CacheManager {\n    if (!CacheManager.instance) {\n      CacheManager.instance = new CacheManager();\n    }\n    return CacheManager.instance;\n  }\n\n  createCache<T>(name: string, defaultTTL?: number): Cache<T> {\n    if (this.caches.has(name)) {\n      throw new Error(`Cache with name ${name} already exists`);\n    }\n    if (defaultTTL !== undefined && (typeof defaultTTL !== 'number' || defaultTTL <= 0)) {\n      throw new Error(`Invalid TTL value: ${defaultTTL}. TTL must be a positive number.`);\n    }\n    const cache = new Cache<T>(defaultTTL);\n    this.caches.set(name, cache);\n    this.log(`Cache created: ${name} with TTL: ${defaultTTL}`);\n    return cache;\n  }\n\n  getCache<T>(name: string): Cache<T> | null {\n    const cache = this.caches.get(name) as Cache<T> || null;\n    if (!cache) {\n      this.warn(`Cache not found: ${name}`);\n    }\n    return cache;\n  }\n\n  deleteCache(name: string) {\n    if (this.caches.delete(name)) {\n      this.log(`Cache deleted: ${name}`);\n    } else {\n      this.warn(`Cache delete failed: ${name} not found`);\n    }\n  }\n\n  clearAllCaches() {\n    this.caches.forEach(cache => cache.clear());\n    this.log('All caches cleared');\n  }\n\n  getAllCacheNames(): string[] {\n    return Array.from(this.caches.keys());\n  }\n\n  hasCache(name: string): boolean {\n    return this.caches.has(name);\n  }\n\n  private log(message: string) {\n    console.log(`[CacheManager] ${message}`);\n  }\n\n  private warn(message: string) {\n    console.warn(`[CacheManager] ${message}`);\n  }\n}\n\nexport default CacheManager;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/cache/CacheRegistry.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[178,181],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[178,181],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[520,523],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[520,523],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import CacheManager from './CacheManager';\n\nclass CacheRegistry {\n  private static instance: CacheRegistry;\n  private cacheManager: CacheManager;\n  private services: Map<string, any>;\n\n  private constructor() {\n    this.cacheManager = CacheManager.getInstance();\n    this.services = new Map();\n  }\n\n  public static getInstance(): CacheRegistry {\n    if (!CacheRegistry.instance) {\n      CacheRegistry.instance = new CacheRegistry();\n    }\n    return CacheRegistry.instance;\n  }\n\n  registerService(name: string, service: any) {\n    if (this.services.has(name)) {\n      throw new Error(`Service with name ${name} already registered`);\n    }\n    this.services.set(name, service);\n    console.log(`Service registered: ${name}`);\n  }\n\n  getService<T>(name: string): T | null {\n    const service = this.services.get(name) || null;\n    if (!service) {\n      console.warn(`Service not found: ${name}`);\n    }\n    return service;\n  }\n\n  getCacheManager(): CacheManager {\n    return this.cacheManager;\n  }\n}\n\nexport default CacheRegistry;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/cache/EIADataCacheService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/cache/IntelReportCache.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/AuthErrorBoundary.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/AuthErrorBoundary.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[256,259],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[256,259],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\n// AI-NOTE: Error boundary for authentication and wallet errors (see artifacts)\nclass AuthErrorBoundary extends React.Component<{\n  children: React.ReactNode\n}, { hasError: boolean; error: Error | null }> {\n  constructor(props: any) {\n    super(props);\n    this.state = { hasError: false, error: null };\n  }\n\n  static getDerivedStateFromError(error: Error) {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch() {\n    // No-op: error boundary logic does not use these parameters\n  }\n\n  handleRetry = () => {\n    this.setState({ hasError: false, error: null });\n    window.location.reload();\n  };\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div className=\"p-6 text-center\">\n          <h2 className=\"text-lg font-bold mb-2\">Authentication Error</h2>\n          <p className=\"mb-4\">{this.state.error?.message || 'An unknown error occurred.'}</p>\n          <button className=\"bg-blue-600 text-white px-4 py-2 rounded\" onClick={this.handleRetry}>\n            Retry\n          </button>\n        </div>\n      );\n    }\n    return this.props.children;\n  }\n}\n\nexport default AuthErrorBoundary;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/TermsModal.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/TermsModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/TokenGatedPage.test.minimal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/TokenGatedPage.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/TokenGatedPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/WalletStatus.modal.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/WalletStatus.network.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/WalletStatus.session.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/WalletStatus.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/WalletStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/WalletStatus.unit.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/Web3Login.accessibility.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/Web3Login.protected.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/Web3Login.wallet.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/Web3LoginPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Conflict/ConflictDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Conflict/ConflictList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/DropdownMenu/DropdownMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/EcoNatural/SpaceWeatherNormalizationPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Features/GlobeGeoEvent/GlobeGeoEvent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Features/GlobeGeoHeatmap/GlobeGeoHeatmap.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Features/GlobeGeoMarker/GlobeGeoMarker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Features/GlobeGeoOverlay/GlobeGeoOverlay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Features/GlobeGeoWeather/GlobeGeoWeather.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Features/GlobeIntelNode/GlobeIntelNode.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Features/GlobeSpaceAsset/GlobeSpaceAsset.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Features/GlobeSpaceEntity/GlobeSpaceEntity.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Features/GlobeSpacecraft/GlobeSpacecraft.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Globe.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/GlobeLoadingManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/HUDFirstLoadingManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Handlers/GlobeDataProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Handlers/GlobeEventHandler.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Handlers/GlobeLayerManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Hooks/useGlobeData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Hooks/useGlobeInteraction.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Hooks/useGlobeLayerControl.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/shaders/globeShaders.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/visualizationConfig.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Bars/BottomBar/BottomBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Bars/LeftSideBar/LeftSideBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Bars/LeftSideBar/ModeSettingsPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Bars/RightSideBar/RightSideBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Bars/TopBar/EnhancedSettingsPopup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Bars/TopBar/Marquee.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Bars/TopBar/Marquee.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Bars/TopBar/SettingsPopup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Bars/TopBar/TopBar.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Bars/TopBar/TopBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Bars/TopBar/topbarCategories.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Bars/TopBar/useTopBarData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Bars/TopBar/useTopBarPreferences.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Corners/BottomLeft/BottomLeft.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Corners/BottomRight/BottomRight.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Corners/BottomRight/IntelReportFormData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Corners/BottomRight/MapSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Corners/BottomRight/MapSelectorPopup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Corners/BottomRight/SubmitIntelReportPopup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Corners/TopLeft/TopLeft.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Corners/TopRight/TopRight.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/EnergyData/EnergyCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/EnergyData/EnergyChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/EnergyData/EnergyMap.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/MiniMap/MiniMap.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Overlay/Overlay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Settings/CyberCommandSettings/CyberCommandSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Settings/GeoPoliticalSettings/GeoPoliticalSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Settings/SpaceWeatherSettings/ElectricFieldToggleTest.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Settings/SpaceWeatherSettings/SpaceWeatherSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/TimeScrubber/TimeScrubber.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/ToolTip/Tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Intel/IntelReportList.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[749,752],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[749,752],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// AI-NOTE: Artifact-driven UI stub for intelligence report list.\n// This component fetches and displays intelligence reports using the secure API stub.\n// See artifacts/intel-report-api-integration.artifact and overlays artifact for integration plan.\n// TODO: Integrate with Solana/secure backend and overlays when live.\n\nimport React, { useEffect, useState } from 'react';\nimport { fetchIntelReports } from '../../api/intelligence';\nimport type { IntelReportOverlayMarker } from '../../interfaces/IntelReportOverlay';\n\nexport const IntelReportList: React.FC = () => {\n  const [reports, setReports] = useState<IntelReportOverlayMarker[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetchIntelReports().then((data: any[]) => {\n      // Map to overlay marker interface\n      const overlayMarkers = data.map((r) => ({\n        pubkey: r.pubkey || '',\n        title: r.title || r.label || '',\n        content: r.content || '',\n        tags: r.tags || [],\n        latitude: r.lat ?? r.latitude ?? 0,\n        longitude: r.long ?? r.longitude ?? 0,\n        timestamp: r.timestamp || Date.parse(r.date || '') || 0,\n        author: r.author || '',\n      }));\n      setReports(overlayMarkers);\n      setLoading(false);\n    });\n  }, []);\n\n  if (loading) return <div>Loading intelligence reports...</div>;\n  if (reports.length === 0) return <div>No intelligence reports found.</div>;\n\n  return (\n    <div>\n      <h2>Intelligence Reports</h2>\n      <ul>\n        {reports.map((report, idx) => (\n          <li key={report.pubkey || idx}>\n            <strong>{report.title}</strong> — {report.tags.join(', ')}<br />\n            <em>{report.content}</em><br />\n            <span>Location: {report.latitude}, {report.longitude}</span><br />\n            <span>Author: {report.author}</span>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Intel/IntelReportViewer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Intel/overlays/IntelOverlay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/IntelOverlay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/IntelReportList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Marketplace/ListReportForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Marketplace/MarketTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Marketplace/MarketplaceDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[230,233],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[230,233],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { fetchMarketData } from '../../api/market';\nimport MarketTable from './MarketTable';\n\nconst MarketplaceDashboard: React.FC = () => {\n  const [, setMarketData] = useState<any[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const loadMarketData = async () => {\n      try {\n        setIsLoading(true);\n        const data = await fetchMarketData();\n        setMarketData(data);\n      } catch (err) {\n        setError('Failed to fetch market data.');\n        console.error(err);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadMarketData();\n  }, []);\n\n  if (isLoading) {\n    return <div>Loading market data...</div>;\n  }\n\n  if (error) {\n    return <div>Error: {error}</div>;\n  }\n\n  return (\n    <div className=\"marketplace-dashboard\">\n      <h1 className=\"text-2xl font-bold mb-4\">Marketplace Dashboard</h1>\n      <MarketTable />\n    </div>\n  );\n};\n\nexport default MarketplaceDashboard;","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Marketplace/ReportList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/MintTest.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Preloader/PreloaderManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Preloader/StarcomPreloader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/SettingsInitializer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/SettingsStatusIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Shared/Button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Shared/Card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Shared/Loader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Shared/Modal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Shared/NetworkInfoBanner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Shared/SessionExpiryCountdown.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Shared/SessionExpiryCountdown.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Shared/Snackbar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Shared/Tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/SpaceWeather/SpaceWeatherStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/TinyGlobe/TinyGlobe.module.css.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/TinyGlobe/TinyGlobe.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/TinyGlobe/TinyGlobe.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/TinyGlobe/modeMapping.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/ui/Card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/context/AuthContext.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[182,185],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[182,185],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[230,233],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[230,233],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createContext } from 'react';\n\n// Updated for Solana wallet integration\nexport interface AuthContextType {\n  isAuthenticated: boolean;\n  address: string | null;\n  provider: any | null; // Solana wallet provider\n  signer: any | null; // Solana wallet signer\n  connectWallet: () => Promise<void>;\n  disconnectWallet: () => Promise<void>;\n  isLoading: boolean;\n  error: string | null;\n  connectionStatus: 'idle' | 'connecting' | 'connected' | 'error';\n  switchNetwork: () => Promise<void>;\n  // Add SIWE/localStorage session helpers for decentralized login\n  authenticate: () => Promise<boolean>;\n  logout: () => void;\n  isSessionValid: () => boolean;\n  authError: string | null;\n  expectedChainId: number;\n  expectedNetworkName: string;\n  setError: (err: string | null) => void;\n}\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\n\n// TODO: Solana wallet context in progress. See artifacts/intel-report-stage1-plan.artifact\n// AI-NOTE: EVM/ethers.js version archived in legacy-evm/AuthContext.ts. Implement Solana logic here.","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/context/AuthContext.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'solanaWallet'. Either include it or remove the dependency array.","line":63,"column":6,"nodeType":"ArrayExpression","endLine":63,"endColumn":42,"suggestions":[{"desc":"Update the dependencies array to be: [solanaWallet, authenticate]","fix":{"range":[2577,2613],"text":"[solanaWallet, authenticate]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'solanaWallet'. Either include it or remove the dependency array.","line":75,"column":6,"nodeType":"ArrayExpression","endLine":75,"endColumn":31,"suggestions":[{"desc":"Update the dependencies array to be: [solanaWallet]","fix":{"range":[2967,2992],"text":"[solanaWallet]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\nimport { AuthContext, AuthContextType } from './AuthContext';\nimport { useWallet } from '@solana/wallet-adapter-react';\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode; value?: AuthContextType }> = ({ children, value }) => {\n  // Use Solana wallet adapter directly\n  const solanaWallet = useWallet();\n  \n  const [authError, setAuthError] = useState<string | null>(null);\n\n  // SIWE/localStorage session helpers for decentralized login\n  const isSessionValid = useCallback(() => {\n    const auth = JSON.parse(localStorage.getItem('auth') || '{}');\n    if (!auth.signature || auth.expiry < Date.now()) return false;\n    if (!solanaWallet.publicKey) return false;\n    // For Solana, we'll implement signature verification later\n    // For now, just check if wallet is connected and session exists\n    return solanaWallet.connected && auth.address === solanaWallet.publicKey?.toString();\n  }, [solanaWallet.publicKey, solanaWallet.connected]);\n\n  const authenticate = useCallback(async () => {\n    if (!solanaWallet.connected || !solanaWallet.publicKey) return false;\n    setAuthError(null);\n    try {\n      // For MVP, we'll create a simple session without signature verification\n      // TODO: Implement proper Solana message signing for authentication\n      const sessionData = {\n        address: solanaWallet.publicKey.toString(),\n        signature: 'solana-session-placeholder', // TODO: Replace with real signature\n        nonce: Math.floor(Math.random() * 1000000).toString(),\n        expiry: Date.now() + 86400000 // 24 hours\n      };\n      localStorage.setItem('auth', JSON.stringify(sessionData));\n      return true;\n    } catch (err) {\n      setAuthError(err instanceof Error ? err.message : 'Authentication failed');\n      return false;\n    }\n  }, [solanaWallet.connected, solanaWallet.publicKey]);\n\n  function logout() {\n    localStorage.removeItem('auth');\n    setAuthError(null);\n  }\n\n  const expectedChainId = 101; // Solana mainnet (devnet would be different)\n  const expectedNetworkName = 'Solana Devnet';\n\n  const connectWalletHandler = useCallback(async () => {\n    try {\n      setAuthError(null);\n      if (solanaWallet.connect) {\n        await solanaWallet.connect();\n        // Auto-authenticate after successful connection\n        setTimeout(async () => {\n          await authenticate();\n        }, 1000);\n      }\n    } catch (error) {\n      console.error('Wallet connection failed:', error);\n      setAuthError(error instanceof Error ? error.message : 'Connection failed');\n    }\n  }, [solanaWallet.connect, authenticate]);\n\n  const disconnectWalletHandler = useCallback(async () => {\n    try {\n      if (solanaWallet.disconnect) {\n        await solanaWallet.disconnect();\n      }\n      logout();\n    } catch (error) {\n      console.error('Wallet disconnection failed:', error);\n      setAuthError(error instanceof Error ? error.message : 'Disconnection failed');\n    }\n  }, [solanaWallet.disconnect]);\n\n  const switchNetworkHandler = useCallback(async () => {\n    // Solana wallets typically don't support network switching\n    // This would be handled in wallet settings\n    setAuthError('Network switching must be done in your wallet settings');\n  }, []);\n\n  const contextValue: AuthContextType = {\n    isAuthenticated: solanaWallet.connected && isSessionValid(),\n    address: solanaWallet.publicKey?.toString() || null,\n    provider: solanaWallet,\n    signer: solanaWallet,\n    connectWallet: connectWalletHandler,\n    disconnectWallet: disconnectWalletHandler,\n    isLoading: solanaWallet.connecting,\n    error: authError,\n    connectionStatus: solanaWallet.connected ? 'connected' : \n                     solanaWallet.connecting ? 'connecting' : \n                     authError ? 'error' : 'idle',\n    switchNetwork: switchNetworkHandler,\n    authenticate,\n    logout,\n    isSessionValid,\n    authError,\n    expectedChainId,\n    expectedNetworkName,\n    setError: setAuthError,\n  };\n\n  return (\n    <AuthContext.Provider value={value || contextValue}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// AI-NOTE: EVM/ethers.js version archived in legacy-evm/AuthContext.tsx. Implement Solana logic here.\n","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/context/DashboardContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'err' is defined but never used.","line":36,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":25},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":53,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":53,"endColumn":26}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useEffect, useState } from 'react';\nimport EIAService from '../services/EIAService';\n\ninterface DashboardContextType {\n    oilPrice: number | null;\n    gasolinePrice: number | null;\n    oilInventory: number | null;\n    naturalGasStorage: number | null;\n    loading: boolean;\n    error: string | null;\n}\n\nconst DashboardContext = createContext<DashboardContextType | undefined>(undefined);\n\nexport const DashboardProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n    const [oilPrice, setOilPrice] = useState<number | null>(null);\n    const [gasolinePrice, setGasolinePrice] = useState<number | null>(null);\n    const [oilInventory, setOilInventory] = useState<number | null>(null);\n    const [naturalGasStorage, setNaturalGasStorage] = useState<number | null>(null);\n    const [loading, setLoading] = useState<boolean>(true);\n    const [error, setError] = useState<string | null>(null);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const [oilPrice, gasolinePrice, oilInventory, naturalGasStorage] = await Promise.all([\n                    EIAService.getLatestOilPrice(),\n                    EIAService.getLatestGasolinePrice(),\n                    EIAService.getLatestOilInventory(),\n                    EIAService.getLatestNaturalGasStorage(),\n                ]);\n                setOilPrice(oilPrice);\n                setGasolinePrice(gasolinePrice);\n                setOilInventory(oilInventory);\n                setNaturalGasStorage(naturalGasStorage);\n            } catch (err) {\n                setError('Failed to fetch data');\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchData();\n    }, []);\n\n    return (\n        <DashboardContext.Provider value={{ oilPrice, gasolinePrice, oilInventory, naturalGasStorage, loading, error }}>\n            {children}\n        </DashboardContext.Provider>\n    );\n};\n\nexport const useDashboard = () => {\n    const context = useContext(DashboardContext);\n    if (!context) throw new Error('useDashboard must be used within DashboardProvider');\n    return context;\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/context/GlobeContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":21,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":21,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/context/GlobeContext.tsx\nimport React, { createContext, useContext, useState, ReactNode } from 'react';\n\ninterface GlobeContextType {\n  focusLocation: { lat: number; lng: number } | null;\n  setFocusLocation: (location: { lat: number; lng: number } | null) => void;\n}\n\nconst GlobeContext = createContext<GlobeContextType | undefined>(undefined);\n\nexport const GlobeProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [focusLocation, setFocusLocation] = useState<{ lat: number; lng: number } | null>(null);\n\n  return (\n    <GlobeContext.Provider value={{ focusLocation, setFocusLocation }}>\n      {children}\n    </GlobeContext.Provider>\n  );\n};\n\nexport const useGlobeContext = () => {\n  const context = useContext(GlobeContext);\n  if (!context) throw new Error('useGlobeContext must be used within a GlobeProvider');\n  return context;\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/context/IntelContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/context/MarketplaceContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":63,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":63,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { fetchMarketData } from '../api/market';\nimport { MarketplaceContextType, MarketData } from '../interfaces/Marketplace';\nimport { handleError } from '../utils/errorHandler';\n\ninterface MarketplaceState {\n  marketData: MarketData[];\n  isLoading: boolean;\n  error: string | null;\n}\n\ntype MarketplaceAction =\n  | { type: 'FETCH_START' }\n  | { type: 'FETCH_SUCCESS'; payload: MarketData[] }\n  | { type: 'FETCH_ERROR'; payload: string };\n\nconst initialState: MarketplaceState = {\n  marketData: [],\n  isLoading: false,\n  error: null,\n};\n\nconst marketplaceReducer = (state: MarketplaceState, action: MarketplaceAction): MarketplaceState => {\n  switch (action.type) {\n    case 'FETCH_START':\n      return { ...state, isLoading: true, error: null };\n    case 'FETCH_SUCCESS':\n      return { ...state, isLoading: false, marketData: action.payload };\n    case 'FETCH_ERROR':\n      return { ...state, isLoading: false, error: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst MarketplaceContext = createContext<MarketplaceContextType | undefined>(undefined);\n\nexport const MarketplaceProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [state, dispatch] = useReducer(marketplaceReducer, initialState);\n\n  const refreshMarketData = async () => {\n    dispatch({ type: 'FETCH_START' });\n    try {\n      const data = await fetchMarketData();\n      dispatch({ type: 'FETCH_SUCCESS', payload: data });\n    } catch (err) {\n      const errorMessage = handleError(err);\n      dispatch({ type: 'FETCH_ERROR', payload: errorMessage });\n    }\n  };\n\n  useEffect(() => {\n    refreshMarketData();\n  }, []);\n\n  return (\n    <MarketplaceContext.Provider value={{ ...state, refreshMarketData }}>\n      {children}\n    </MarketplaceContext.Provider>\n  );\n};\n\nexport const useMarketplace = (): MarketplaceContextType => {\n  const context = useContext(MarketplaceContext);\n  if (!context) {\n    throw new Error('useMarketplace must be used within a MarketplaceProvider');\n  }\n  return context;\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/context/SettingsContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/context/SnackbarContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/context/SpaceWeatherContext.test.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unterminated regular expression literal.","line":87,"column":37}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/context/SpaceWeatherContext.test.ts\n// AI-NOTE: Integration tests for SpaceWeatherContext toggle functionality\n// Validates that electric field visualization can be toggled on/off correctly\n\nimport { describe, it, expect, vi, beforeEach } from 'vitest';\nimport { renderHook } from '@testing-library/react';\nimport React from 'react';\nimport { SpaceWeatherProvider, useSpaceWeatherContext } from './SpaceWeatherContext';\n\n// Mock the hooks and utilities\nvi.mock('../hooks/useEcoNaturalSettings');\nvi.mock('../hooks/useSpaceWeatherData');\nvi.mock('../utils/electricFieldNormalization');\n\nconst mockUpdateSpaceWeather = vi.fn();\nconst mockSpaceWeatherData = {\n  interMagData: null,\n  usCanadaData: null,\n  alerts: [],\n  isLoading: false,\n  error: null,\n  lastUpdated: null,\n  refresh: vi.fn()\n};\n\nconst mockConfig = {\n  spaceWeather: {\n    showElectricFields: true,\n    showGemagneticIndex: false,\n    showAlerts: true,\n    vectorIntensity: 80,\n    vectorOpacity: 60,\n    vectorScale: 1.0,\n    heatMapIntensity: 50,\n    showMagneticField: false,\n    showAuroralOval: false,\n    showKpIndex: false,\n    showSolarWind: false,\n    showMagnetopause: false,\n    timeWindow: 24,\n    alertThresholds: {\n      moderate: 1000,\n      high: 3000,\n      extreme: 5000\n    },\n    autoRefresh: true,\n    refreshInterval: 5,\n    showStatistics: true,\n    normalization: {\n      method: 'adaptive' as const,\n      outlierFactor: 1.5,\n      smoothingFactor: 0.1,\n      percentileRange: [10, 90] as [number, number],\n      clampMax: null\n    }\n  }\n};\n\nbeforeEach(() => {\n  vi.clearAllMocks();\n  \n  // Mock useEcoNaturalSettings\n  vi.mocked(require('../hooks/useEcoNaturalSettings').useEcoNaturalSettings).mockReturnValue({\n    config: mockConfig,\n    updateSpaceWeather: mockUpdateSpaceWeather,\n    isElectricFieldsEnabled: mockConfig.spaceWeather.showElectricFields,\n    vectorSettings: {\n      intensity: mockConfig.spaceWeather.vectorIntensity / 100,\n      opacity: mockConfig.spaceWeather.vectorOpacity / 100\n    },\n    alertThresholds: mockConfig.spaceWeather.alertThresholds,\n    dataSettings: {\n      autoRefresh: mockConfig.spaceWeather.autoRefresh,\n      refreshIntervalMs: mockConfig.spaceWeather.refreshInterval * 60 * 1000\n    }\n  });\n\n  // Mock useSpaceWeatherData\n  vi.mocked(require('../hooks/useSpaceWeatherData').useSpaceWeatherData).mockReturnValue(mockSpaceWeatherData);\n\n  // Mock normalization function\n  vi.mocked(require('../utils/electricFieldNormalization').normalizeElectricFieldVectors).mockReturnValue([]);\n});\n\ndescribe('SpaceWeatherContext Electric Field Toggle', () => {\n  const wrapper = ({ children }: { children: React.ReactNode }) => (\n    <SpaceWeatherProvider>{children}</SpaceWeatherProvider>\n  );\n\n  it('should show overlay when electric fields are enabled', () => {\n    const { result } = renderHook(() => useSpaceWeatherContext(), { wrapper });\n    \n    expect(result.current.shouldShowOverlay).toBe(true);\n    expect(result.current.isElectricFieldsEnabled).toBe(true);\n  });\n\n  it('should hide overlay when electric fields are disabled', () => {\n    // Mock with electric fields disabled\n    const disabledConfig = {\n      ...mockConfig,\n      spaceWeather: {\n        ...mockConfig.spaceWeather,\n        showElectricFields: false\n      }\n    };\n\n    vi.mocked(require('../hooks/useEcoNaturalSettings').useEcoNaturalSettings).mockReturnValue({\n      config: disabledConfig,\n      updateSpaceWeather: mockUpdateSpaceWeather,\n      isElectricFieldsEnabled: false,\n      vectorSettings: {\n        intensity: disabledConfig.spaceWeather.vectorIntensity / 100,\n        opacity: disabledConfig.spaceWeather.vectorOpacity / 100\n      },\n      alertThresholds: disabledConfig.spaceWeather.alertThresholds,\n      dataSettings: {\n        autoRefresh: disabledConfig.spaceWeather.autoRefresh,\n        refreshIntervalMs: disabledConfig.spaceWeather.refreshInterval * 60 * 1000\n      }\n    });\n\n    const { result } = renderHook(() => useSpaceWeatherContext(), { wrapper });\n    \n    expect(result.current.shouldShowOverlay).toBe(false);\n    expect(result.current.isElectricFieldsEnabled).toBe(false);\n  });\n\n  it('should provide normalization settings', () => {\n    const { result } = renderHook(() => useSpaceWeatherContext(), { wrapper });\n    \n    expect(result.current.settings.normalization).toEqual({\n      method: 'adaptive',\n      outlierFactor: 1.5,\n      smoothingFactor: 0.1,\n      percentileRange: [10, 90],\n      clampMax: null\n    });\n  });\n\n  it('should provide update function', () => {\n    const { result } = renderHook(() => useSpaceWeatherContext(), { wrapper });\n    \n    expect(result.current.updateSettings).toBe(mockUpdateSpaceWeather);\n  });\n\n  it('should provide empty visualization vectors when no data', () => {\n    const { result } = renderHook(() => useSpaceWeatherContext(), { wrapper });\n    \n    expect(result.current.visualizationVectors).toEqual([]);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/context/SpaceWeatherContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":160,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":160,"endColumn":36}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/context/SpaceWeatherContext.tsx\n// AI-NOTE: Context for sharing space weather data and settings across components\n// Bridges the gap between settings, data fetching, and Globe visualization\n// Updated with advanced normalization for electric field visualization\n\nimport React, { createContext, useContext, ReactNode } from 'react';\nimport { useEcoNaturalSettings } from '../hooks/useEcoNaturalSettings';\nimport { useSpaceWeatherData } from '../hooks/useSpaceWeatherData';\nimport { normalizeElectricFieldVectors, NormalizationConfig } from '../utils/electricFieldNormalization';\nimport type { ProcessedElectricFieldData, SpaceWeatherAlert } from '../types/spaceWeather';\n\ninterface SpaceWeatherContextType {\n  // Settings\n  settings: ReturnType<typeof useEcoNaturalSettings>['config']['spaceWeather'];\n  updateSettings: ReturnType<typeof useEcoNaturalSettings>['updateSpaceWeather'];\n  isElectricFieldsEnabled: boolean;\n  \n  // Data\n  interMagData: ProcessedElectricFieldData | null;\n  usCanadaData: ProcessedElectricFieldData | null;\n  alerts: SpaceWeatherAlert[];\n  isLoading: boolean;\n  error: string | null;\n  lastUpdated: Date | null;\n  refresh: () => Promise<void>;\n  \n  // Computed values for visualization\n  shouldShowOverlay: boolean;\n  visualizationVectors: Array<{\n    latitude: number;\n    longitude: number;\n    magnitude: number;\n    direction: number;\n    quality: number;\n    intensity: number; // 0-1 based on settings\n    opacity: number;   // 0-1 based on settings\n    color: string;\n    size: number;\n  }>;\n}\n\nconst SpaceWeatherContext = createContext<SpaceWeatherContextType | undefined>(undefined);\n\nexport const SpaceWeatherProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const { \n    config, \n    updateSpaceWeather, \n    isElectricFieldsEnabled,\n    vectorSettings,\n    alertThresholds,\n    dataSettings \n  } = useEcoNaturalSettings();\n  \n  const spaceWeatherData = useSpaceWeatherData({\n    autoRefresh: dataSettings.autoRefresh,\n    refreshInterval: dataSettings.refreshIntervalMs,\n    enableAlerts: config.spaceWeather.showAlerts\n  });\n\n  // Compute visualization vectors based on settings\n  const visualizationVectors = React.useMemo(() => {\n    // Return empty array if electric fields are disabled\n    if (!isElectricFieldsEnabled) return [];\n    \n    if (!spaceWeatherData.interMagData && !spaceWeatherData.usCanadaData) return [];\n    \n    const allVectors = [\n      ...(spaceWeatherData.interMagData?.vectors || []),\n      ...(spaceWeatherData.usCanadaData?.vectors || [])\n    ];\n    \n    // Apply advanced normalization\n    const normalizationConfig: NormalizationConfig = {\n      method: config.spaceWeather.normalization.method,\n      outlierFactor: config.spaceWeather.normalization.outlierFactor,\n      smoothingFactor: config.spaceWeather.normalization.smoothingFactor,\n      percentileRange: config.spaceWeather.normalization.percentileRange,\n      clampMax: config.spaceWeather.normalization.clampMax || undefined\n    };\n    \n    const normalizedVectors = normalizeElectricFieldVectors(allVectors, normalizationConfig);\n    \n    return normalizedVectors\n      .filter(vector => {\n        // Quality filter\n        if (vector.quality < 3) return false;\n        \n        // Magnitude threshold (still applied to original magnitude)\n        const magnitudeThreshold = alertThresholds.moderate / 1000; // Convert mV to V\n        return vector.originalMagnitude >= magnitudeThreshold;\n      })\n      .map(vector => {\n        // Use normalized magnitude instead of raw magnitude\n        const scaledIntensity = vector.normalizedMagnitude * vectorSettings.intensity;\n        \n        // Color based on normalized magnitude and percentile rank\n        let color: string;\n        if (vector.isOutlier) {\n          // Special color for outliers - red with reduced opacity\n          color = `rgba(255, 0, 0, ${Math.min(vectorSettings.opacity * 0.7, 0.8)})`;\n        } else if (vector.percentileRank >= 90) {\n          color = `rgba(255, 165, 0, ${vectorSettings.opacity})`;\n        } else if (vector.percentileRank >= 70) {\n          color = `rgba(255, 255, 0, ${vectorSettings.opacity})`;\n        } else if (vector.percentileRank >= 50) {\n          color = `rgba(128, 255, 0, ${vectorSettings.opacity})`;\n        } else {\n          color = `rgba(128, 0, 255, ${vectorSettings.opacity})`;\n        }\n        \n        return {\n          latitude: vector.latitude,\n          longitude: vector.longitude,\n          magnitude: vector.originalMagnitude, // Keep original for display\n          direction: vector.direction,\n          quality: vector.quality,\n          intensity: scaledIntensity,\n          opacity: vectorSettings.opacity,\n          color,\n          size: Math.min(Math.max(scaledIntensity * config.spaceWeather.vectorScale, 0.1), 2.0)\n        };\n      });\n  }, [\n    spaceWeatherData.interMagData, \n    spaceWeatherData.usCanadaData, \n    vectorSettings, \n    alertThresholds, \n    config.spaceWeather.vectorScale,\n    config.spaceWeather.normalization,\n    isElectricFieldsEnabled\n  ]);\n\n  const contextValue: SpaceWeatherContextType = {\n    // Settings\n    settings: config.spaceWeather,\n    updateSettings: updateSpaceWeather,\n    isElectricFieldsEnabled,\n    \n    // Data\n    interMagData: spaceWeatherData.interMagData,\n    usCanadaData: spaceWeatherData.usCanadaData,\n    alerts: spaceWeatherData.alerts,\n    isLoading: spaceWeatherData.isLoading,\n    error: spaceWeatherData.error,\n    lastUpdated: spaceWeatherData.lastUpdated,\n    refresh: spaceWeatherData.refresh,\n    \n    // Computed\n    shouldShowOverlay: isElectricFieldsEnabled,\n    visualizationVectors\n  };\n\n  return (\n    <SpaceWeatherContext.Provider value={contextValue}>\n      {children}\n    </SpaceWeatherContext.Provider>\n  );\n};\n\nexport const useSpaceWeatherContext = () => {\n  const context = useContext(SpaceWeatherContext);\n  if (!context) {\n    throw new Error('useSpaceWeatherContext must be used within a SpaceWeatherProvider');\n  }\n  return context;\n};\n\nexport default SpaceWeatherProvider;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/context/TimeDataProvider.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":90,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":90,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useEffect, useRef, useCallback, ReactNode } from 'react';\nimport { fetchHistoricalData } from '../utils/fetchHistoricalData'; // Moved `fetchHistoricalData` to a separate file\n\ninterface TimeDataContextProps {\n  currentTime: number;\n  isLive: boolean;\n  setCurrentTime: (time: number) => void;\n  toggleLive: () => void;\n  fetchDataForTime: (time: number) => Promise<void>;\n  error: string | null;\n}\n\ninterface CacheEntry {\n  timestamp: number;\n  data: Array<{ lat: number; lng: number; size: number; color: string; timestamp: number }>;\n}\n\nconst TimeDataContext = createContext<TimeDataContextProps | undefined>(undefined);\n\nexport const TimeDataProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [currentTime, setCurrentTime] = useState<number>(Date.now());\n  const [isLive, setIsLive] = useState<boolean>(true);\n  const [dataCache, setDataCache] = useState<Map<number, CacheEntry>>(new Map());\n  const [error, setError] = useState<string | null>(null);\n  const lastUpdateTimeRef = useRef<number>(0);\n\n  const toggleLive = () => {\n    setIsLive(!isLive);\n    if (!isLive) setCurrentTime(Date.now());\n  };\n\n  const fetchDataForTime = useCallback(\n    async (time: number): Promise<void> => {\n      if (dataCache.has(time)) return;\n\n      try {\n        setError(null);\n        const data = await fetchHistoricalData(time);\n        setDataCache((prev) => {\n          const newCache = new Map(prev);\n          newCache.set(time, { timestamp: Date.now(), data });\n\n          // Evict older entries (LRU logic)\n          if (newCache.size > 100) {\n            const oldestKey = Array.from(newCache.keys())[0];\n            newCache.delete(oldestKey);\n          }\n\n          return newCache;\n        });\n      } catch (err) {\n        console.error('Error fetching data:', err);\n        setError('Failed to fetch data for the selected time.');\n      }\n    },\n    [dataCache]\n  );\n\n  useEffect(() => {\n    if (!isLive) return;\n\n    const interval = setInterval(() => {\n      const now = Date.now();\n      if (now - lastUpdateTimeRef.current >= 5000) {\n        setCurrentTime(now);\n        fetchDataForTime(now);\n        lastUpdateTimeRef.current = now;\n      }\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [isLive, fetchDataForTime]);\n\n  return (\n    <TimeDataContext.Provider\n      value={{\n        currentTime,\n        isLive,\n        setCurrentTime,\n        toggleLive,\n        fetchDataForTime,\n        error,\n      }}\n    >\n      {children}\n    </TimeDataContext.Provider>\n  );\n};\n\nexport const useTimeData = () => {\n  const context = useContext(TimeDataContext);\n  if (!context) throw new Error('useTimeData must be used within a TimeDataProvider');\n  return context;\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/context/UCDPContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":4,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[116,119],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[116,119],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[168,171],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[168,171],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":16,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":16,"endColumn":21}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useState, useContext, ReactNode } from 'react';\n\ninterface UCDPContextType {\n  data: any;\n  setData: React.Dispatch<React.SetStateAction<any>>;\n}\n\nconst UCDPContext = createContext<UCDPContextType | undefined>(undefined);\n\nexport const UCDPProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [data, setData] = useState(null);\n\n  return <UCDPContext.Provider value={{ data, setData }}>{children}</UCDPContext.Provider>;\n};\n\nexport const useUCDP = () => {\n  const context = useContext(UCDPContext);\n  if (!context) throw new Error('useUCDP must be used within a UCDPProvider');\n  return context;\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/context/VisualizationModeContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":94,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":94,"endColumn":34}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useContext, useState, useEffect } from 'react';\nimport { settingsStorage } from '../utils/settingsStorage';\n\n// Extend VisualizationMode to include sub-modes\nexport type VisualizationMode =\n  | { mode: 'CyberCommand'; subMode: 'IntelReports' | 'Timelines' | 'CrisisZones' }\n  | { mode: 'GeoPolitical'; subMode: 'NationalTerritories' | 'DiplomaticEvents' | 'ResourceZones' }\n  | { mode: 'EcoNatural'; subMode: 'SpaceWeather' | 'EcologicalDisasters' | 'EarthWeather' };\n\n// Interface for tracking last selected submode for each primary mode\ninterface LastSelectedSubmodes {\n  CyberCommand: 'IntelReports' | 'Timelines' | 'CrisisZones';\n  GeoPolitical: 'NationalTerritories' | 'DiplomaticEvents' | 'ResourceZones';\n  EcoNatural: 'SpaceWeather' | 'EcologicalDisasters' | 'EarthWeather';\n}\n\n// Default visualization mode and submodes\nconst DEFAULT_MODE: VisualizationMode = { mode: 'CyberCommand', subMode: 'IntelReports' };\nconst DEFAULT_SUBMODES: LastSelectedSubmodes = {\n  CyberCommand: 'IntelReports',\n  GeoPolitical: 'NationalTerritories',\n  EcoNatural: 'SpaceWeather'\n};\n\n// Storage keys for persistence\nconst VISUALIZATION_MODE_STORAGE_KEY = 'visualization-mode';\nconst LAST_SUBMODES_STORAGE_KEY = 'last-selected-submodes';\n\n// Create a context for VisualizationMode\ninterface VisualizationModeContextProps {\n  visualizationMode: VisualizationMode;\n  setVisualizationMode: (mode: VisualizationMode) => void;\n  setPrimaryMode: (mode: 'CyberCommand' | 'GeoPolitical' | 'EcoNatural') => void;\n  resetVisualizationMode: () => void;\n}\n\n// Ensure React is properly loaded before creating context\nconst VisualizationModeContext = React.createContext<VisualizationModeContextProps | undefined>(undefined);\n\n// Provider component\nexport const VisualizationModeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  // Initialize with persisted values or defaults\n  const [visualizationMode, setVisualizationModeState] = useState<VisualizationMode>(() => {\n    return settingsStorage.loadSettings(VISUALIZATION_MODE_STORAGE_KEY, DEFAULT_MODE);\n  });\n\n  const [lastSelectedSubmodes, setLastSelectedSubmodesState] = useState<LastSelectedSubmodes>(() => {\n    return settingsStorage.loadSettings(LAST_SUBMODES_STORAGE_KEY, DEFAULT_SUBMODES);\n  });\n\n  // Enhanced setter that also persists to storage\n  const setVisualizationMode = (mode: VisualizationMode) => {\n    setVisualizationModeState(mode);\n    settingsStorage.saveSettings(VISUALIZATION_MODE_STORAGE_KEY, mode);\n    \n    // Update the last selected submode for this primary mode\n    setLastSelectedSubmodesState(prev => {\n      const updated = { ...prev, [mode.mode]: mode.subMode };\n      settingsStorage.saveSettings(LAST_SUBMODES_STORAGE_KEY, updated);\n      return updated;\n    });\n  };\n\n  // New function to set primary mode while preserving last selected submode\n  const setPrimaryMode = (mode: 'CyberCommand' | 'GeoPolitical' | 'EcoNatural') => {\n    const lastSubMode = lastSelectedSubmodes[mode];\n    const newVisualizationMode = { mode, subMode: lastSubMode } as VisualizationMode;\n    setVisualizationMode(newVisualizationMode);\n  };\n\n  const resetVisualizationMode = () => {\n    setVisualizationMode(DEFAULT_MODE);\n    setLastSelectedSubmodesState(DEFAULT_SUBMODES);\n    settingsStorage.saveSettings(LAST_SUBMODES_STORAGE_KEY, DEFAULT_SUBMODES);\n  };\n\n  useEffect(() => {\n    console.log(`📊 VisualizationMode changed to: ${visualizationMode.mode}, SubMode: ${visualizationMode.subMode}`);\n  }, [visualizationMode]);\n\n  return (\n    <VisualizationModeContext.Provider value={{ \n      visualizationMode, \n      setVisualizationMode, \n      setPrimaryMode,\n      resetVisualizationMode \n    }}>\n      {children}\n    </VisualizationModeContext.Provider>\n  );\n};\n\n// Hook to use the VisualizationMode context\nexport const useVisualizationMode = () => {\n  const context = useContext(VisualizationModeContext);\n  if (!context) {\n    throw new Error('useVisualizationMode must be used within a VisualizationModeProvider');\n  }\n  return context;\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/context/WASMContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[264,267],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[264,267],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":51,"column":24,"nodeType":"Identifier","messageId":"namedExport","endLine":51,"endColumn":31}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { initializeWASM, fetchFromMiniServer as fetchFromWASM } from \"../utils/wasm\";\n\ninterface WASMContextType {\n  wasmReady: boolean;\n  fetchFromMiniServer: (url: string) => Promise<any>;\n}\n\nconst WASMContext = createContext<WASMContextType | undefined>(undefined);\n\ninterface WASMProviderProps {\n  children: React.ReactNode;\n}\n\nlet wasmInitializationPromise: Promise<void> | null = null;\n\nconst WASMProvider: React.FC<WASMProviderProps> = ({ children }) => {\n  const [wasmReady, setWasmReady] = useState(false);\n\n  useEffect(() => {\n    if (!wasmInitializationPromise) {\n      wasmInitializationPromise = initializeWASM().then(() => {\n        setWasmReady(true);\n      });\n    } else {\n      wasmInitializationPromise.then(() => {\n        setWasmReady(true);\n      });\n    }\n  }, []);\n\n  const fetchFromMiniServer = async (url: string) => {\n    return await fetchFromWASM(url);\n  };\n\n  return (\n    <WASMContext.Provider value={{ wasmReady, fetchFromMiniServer }}>\n      {children}\n    </WASMContext.Provider>\n  );\n};\n\nconst useWASM = () => {\n  const context = useContext(WASMContext);\n  if (!context) {\n    throw new Error(\"useWASM must be used within a WASMProvider\");\n  }\n  return context;\n};\n\nexport { WASMProvider, useWASM, WASMContext };","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/contracts/interfaces/IIntelligenceMarketplace.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/globe-engine/GlobeEngine.spaceWeather.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/globe-engine/GlobeEngine.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_lat' is defined but never used.","line":8,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_lng' is defined but never used.","line":8,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":46}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// GlobeEngine.test.ts\n// Artifact-driven tests for GlobeEngine (see globe-testing-plan.artifact, globe-engine-api.artifact, globe-overlays.artifact)\nimport { GlobeEngine } from './GlobeEngine';\nimport { vi } from 'vitest';\n\n// Mock API services for artifact-driven integration tests\nvi.mock('../services/WeatherDataService', () => ({\n  fetchWeatherData: async (_lat: number, _lng: number) => ({\n    // _lat and _lng are intentionally unused for mock\n    location: 'Test City',\n    temperature: 20,\n    description: 'Clear',\n    windSpeed: 5,\n    humidity: 50,\n  })\n}));\nvi.mock('../services/GeoEventsService', () => ({\n  fetchNaturalEvents: async () => ([\n    { id: 1, lat: 0, lng: 0, type: 'earthquake', magnitude: 5.5 },\n    { id: 2, lat: 10, lng: 10, type: 'volcano', status: 'active' }\n  ])\n}));\nvi.mock('../services/SpaceAssetsService', () => ({\n  fetchSpaceAssets: async () => ([\n    { id: 1, lat: 0, lng: 0, type: 'satellite', name: 'ISS', altitude: 400 },\n    { id: 2, lat: 45, lng: 90, type: 'debris', name: 'Debris-123', altitude: 800 }\n  ])\n}));\n// Mock fetch for borders/territories overlays\n(globalThis as unknown as { fetch: () => Promise<{ json: () => Promise<{ features: unknown[] }> }> }).fetch = async () => ({\n  json: async () => ({\n    features: [\n      { properties: { name: 'TestBorder' }, geometry: { type: 'LineString', coordinates: [[0,0],[1,1]] } },\n      { properties: { name: 'TestTerritory' }, geometry: { type: 'Polygon', coordinates: [[[0,0],[1,1],[1,0],[0,0]]] } }\n    ]\n  })\n});\n\ndescribe('GlobeEngine Overlay Logic', () => {\n  it('should add overlays and cache overlay data', async () => {\n    const engine = new GlobeEngine({ mode: 'CyberCommand' });\n    engine.addOverlay('alerts');\n    await new Promise((resolve) => setTimeout(resolve, 600));\n    const data = engine.getOverlayData('alerts');\n    expect(Array.isArray(data)).toBe(true);\n    // Add again, should use cache\n    engine.removeOverlay('alerts');\n    engine.addOverlay('alerts');\n    expect(engine.getOverlayData('alerts')).toEqual(data);\n  });\n\n  it('should reset overlays to mode defaults on setMode', async () => {\n    const engine = new GlobeEngine({ mode: 'CyberCommand' });\n    engine.addOverlay('weather');\n    engine.setMode('EcoNatural');\n    await new Promise((resolve) => setTimeout(resolve, 600));\n    const overlays = engine.getOverlays();\n    expect(overlays).toContain('weather');\n    expect(overlays).toContain('naturalEvents');\n    expect(overlays).toContain('markers');\n    expect(overlays).not.toContain('alerts');\n  });\n\n  it('should emit overlayDataUpdated event', async () => {\n    const engine = new GlobeEngine({ mode: 'CyberCommand' });\n    await new Promise<void>((resolve) => {\n      engine.on('overlayDataUpdated', ({ payload }) => {\n        if (payload && typeof payload === 'object' && (payload as { overlay?: string }).overlay === 'alerts') {\n          expect((payload as { data?: unknown }).data).toBeDefined();\n          resolve();\n        }\n      });\n      engine.addOverlay('alerts');\n    });\n  });\n});\n\ndescribe('GlobeEngine Integration (artifact-driven)', () => {\n  it('should fetch and cache overlay data for weather and naturalEvents (mocked)', async () => {\n    const engine = new GlobeEngine({ mode: 'EcoNatural' });\n    engine.addOverlay('weather');\n    engine.addOverlay('naturalEvents');\n    await new Promise((resolve) => setTimeout(resolve, 700));\n    const weather = engine.getOverlayData('weather');\n    const events = engine.getOverlayData('naturalEvents');\n    expect(Array.isArray(weather)).toBe(true);\n    expect(Array.isArray(events)).toBe(true);\n    engine.removeOverlay('weather');\n    engine.addOverlay('weather');\n    expect(engine.getOverlayData('weather')).toEqual(weather);\n  });\n\n  it('should allow toggling overlays and emit correct events', () => {\n    const engine = new GlobeEngine({ mode: 'GeoPolitical' });\n    let addCount = 0;\n    let removeCount = 0;\n    engine.on('overlayAdded', () => {\n      addCount++;\n    });\n    engine.on('overlayRemoved', () => {\n      removeCount++;\n    });\n    engine.addOverlay('borders');\n    engine.removeOverlay('borders');\n    engine.addOverlay('borders');\n    expect(addCount).toBeGreaterThanOrEqual(2);\n    expect(removeCount).toBeGreaterThanOrEqual(1);\n  });\n\n  it('should fetch and cache overlay data for spaceAssets (mocked)', async () => {\n    const engine = new GlobeEngine({ mode: 'CyberCommand' });\n    engine.addOverlay('spaceAssets');\n    await new Promise((resolve) => setTimeout(resolve, 600));\n    const data = engine.getOverlayData('spaceAssets');\n    expect(Array.isArray(data)).toBe(true);\n    expect((data as { type?: string }[])[0]?.type).toBe('satellite');\n  });\n\n  it('should emit overlayDataLoading and overlayDataError for spaceAssets', async () => {\n    const spy = vi.spyOn(await import('../services/SpaceAssetsService'), 'fetchSpaceAssets').mockRejectedValue(new Error('Test error'));\n    const engine = new GlobeEngine({ mode: 'CyberCommand' });\n    let loading = false;\n    let error = false;\n    engine.on('overlayDataLoading', ({ payload }) => {\n      if ((payload as { overlay?: string })?.overlay === 'spaceAssets') loading = true;\n    });\n    engine.on('overlayDataError', ({ payload }) => {\n      if ((payload as { overlay?: string; error?: string })?.overlay === 'spaceAssets' && (payload as { error?: string }).error === 'Test error') error = true;\n    });\n    engine.addOverlay('spaceAssets');\n    await new Promise((resolve) => setTimeout(resolve, 600));\n    expect(loading).toBe(true);\n    expect(error).toBe(true);\n    spy.mockRestore();\n  });\n\n  it('should periodically update spaceAssets overlay (artifact-driven, fake timers)', async () => {\n    vi.useFakeTimers();\n    const engine = new GlobeEngine({ mode: 'CyberCommand' });\n    let updateCount = 0;\n    engine.on('overlayDataUpdated', ({ payload }) => {\n      if ((payload as { overlay?: string })?.overlay === 'spaceAssets') updateCount++;\n    });\n    engine.addOverlay('spaceAssets');\n    // Initial fetch\n    await vi.runOnlyPendingTimersAsync();\n    // Simulate 2 more intervals (2 minutes)\n    await vi.advanceTimersByTimeAsync(120000);\n    expect(updateCount).toBeGreaterThanOrEqual(2);\n    // Clean up interval\n    engine.removeOverlay('spaceAssets');\n    vi.useRealTimers();\n  });\n});\n// Artifact references:\n// - Test plan: globe-testing-plan.artifact\n// - Overlay API/events: globe-engine-api.artifact, globe-overlays.artifact\n","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/globe-engine/GlobeEngine.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/globe-engine/GlobeMaterialManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/globe-engine/GlobeModeMapping.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/globe-engine/GlobeTextureLoader.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/globe-engine/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/hooks/data/useFetchConflicts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/hooks/data/useFetchData.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'options'. Either include it or remove the dependency array.","line":25,"column":6,"nodeType":"ArrayExpression","endLine":25,"endColumn":11,"suggestions":[{"desc":"Update the dependencies array to be: [options, url]","fix":{"range":[645,650],"text":"[options, url]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\n\nexport const useFetchData = <T>(url: string, options = {}) => {\n  const [data, setData] = useState<T | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      setError(null);\n\n      try {\n        const response = await fetch(url, options);\n        const result = await response.json();\n        setData(result);\n      } catch (err) {\n        setError(err as Error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [url]);\n\n  return { data, loading, error };\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/hooks/ui/useAuth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/hooks/ui/useGlobeInteractions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/hooks/useAuth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/hooks/useBackendAuth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/hooks/useCyberCommandSettings.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/hooks/useEIAData.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'err' is defined but never used.","line":25,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport EIAService from '../services/EIAService';\n\nexport const useEIAData = () => {\n  const [oilPrice, setOilPrice] = useState<number | null>(null);\n  const [gasolinePrice, setGasolinePrice] = useState<number | null>(null);\n  const [oilInventory, setOilInventory] = useState<number | null>(null);\n  const [naturalGasStorage, setNaturalGasStorage] = useState<number | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const [oilPrice, gasolinePrice, oilInventory, naturalGasStorage] = await Promise.all([\n          EIAService.getLatestOilPrice(),\n          EIAService.getLatestGasolinePrice(),\n          EIAService.getLatestOilInventory(),\n          EIAService.getLatestNaturalGasStorage(),\n        ]);\n        setOilPrice(oilPrice);\n        setGasolinePrice(gasolinePrice);\n        setOilInventory(oilInventory);\n        setNaturalGasStorage(naturalGasStorage);\n      } catch (err) {\n        setError('Failed to fetch data');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  return { oilPrice, gasolinePrice, oilInventory, naturalGasStorage, loading, error };\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/hooks/useEcoNaturalSettings.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/hooks/useGeoPoliticalSettings.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/hooks/useOnChainRoles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/hooks/useSIWEAuth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/hooks/useSpaceWeatherData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/hooks/useSpaceWeatherSettings.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/hooks/useTokenGate.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_address' is defined but never used.","line":7,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_tokenMint' is defined but never used.","line":7,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":58}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/hooks/useTokenGate.ts\n\n// AI-NOTE: Archived EVM/ethers.js logic. This hook previously checked token/NFT balance using EVM/ethers.js.\n// Per artifact-driven migration and security policy, all EVM logic is removed.\n// TODO: Implement Solana-based token gate logic using @solana/web3.js or secure backend/CLI only. See artifacts/intel-report-artifact-index.artifact.\n\nexport function useTokenGate(_address: string, _tokenMint: string) {\n  // Placeholder: No EVM logic. See artifact for migration plan.\n  return { hasAccess: false, loading: false, error: null };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/hooks/useWASM.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/hooks/useWallet.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/interfaces/EIAData.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[312,315],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[312,315],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface EIAData {\n    response: {\n        total: string;\n        dateFormat: string;\n        frequency: string;\n        data: {\n        period: string; // e.g., \"2025-03-07\"\n        value: number; // e.g., 67.52\n        }[];\n    };\n    request: {\n        command: string;\n        params: Record<string, any>;\n    };\n    apiVersion: string;\n}","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/interfaces/IntelReportOverlay.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/interfaces/MarketData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/interfaces/Marketplace.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/layouts/HUDLayout/HUDLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/layouts/SettingsLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/layouts/StandardLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/middleware/apiHandler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/middleware/web3Middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/models/IntelReport.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/models/IntelReportData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/pages/IntelReportsPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[839,842],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[839,842],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// AI-NOTE: Artifact-driven route/page for intelligence reports and overlays.\n// This page displays the IntelReportList and IntelOverlay components.\n// See artifacts/intel-report-api-integration.artifact and overlays artifact for integration plan.\n// TODO: Integrate with Solana/secure backend and live overlays when available.\n\nimport React, { useEffect, useState } from 'react';\nimport { IntelReportList } from '../components/Intel/IntelReportList';\nimport { IntelOverlay } from '../components/Intel/overlays/IntelOverlay';\nimport { fetchIntelReports } from '../api/intelligence';\nimport type { IntelReportOverlayMarker } from '../interfaces/IntelReportOverlay';\n\nconst IntelReportsPage: React.FC = () => {\n  const [markers, setMarkers] = useState<IntelReportOverlayMarker[]>([]);\n  useEffect(() => {\n    fetchIntelReports().then((data: any[]) => {\n      // Map to overlay marker interface\n      const overlayMarkers = data.map((r) => ({\n        pubkey: r.pubkey || '',\n        title: r.title || r.label || '',\n        content: r.content || '',\n        tags: r.tags || [],\n        latitude: r.lat ?? r.latitude ?? 0,\n        longitude: r.long ?? r.longitude ?? 0,\n        timestamp: r.timestamp || Date.parse(r.date || '') || 0,\n        author: r.author || '',\n      }));\n      setMarkers(overlayMarkers);\n    });\n  }, []);\n  return (\n    <div>\n      <h1>Intelligence Exchange Market</h1>\n      <IntelReportList />\n      <IntelOverlay markers={markers} />\n    </div>\n  );\n};\n\nexport default IntelReportsPage;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/pages/MainPage/MainPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/pages/SettingsPage/SettingsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/routes/ProtectedRoute.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/routes/marketplace.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/routes/routes.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/AlertsService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/ApiService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/BlockchainService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/ConflictZoneService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":153,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":153,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4751,4754],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4751,4754],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import axios from 'axios';\nimport { getProxiedUrl } from '../utils/ProxyUtils';\nimport xml2js from 'xml2js';\n\nconst reliefWebApiUrl = import.meta.env.VITE_RELIEF_WEB_API_URL;\nconst gdacsApiUrl = import.meta.env.VITE_GDACS_API_URL;\n\ninterface ConflictZoneData {\n  id: string;\n  date: string;\n  type: string;\n  location: string;\n  description?: string;\n  source: string;\n}\n\nconst validateResponse = (data: unknown): boolean => {\n  return Array.isArray(data);\n};\n\nexport const fetchACLEDConflictZones = async (): Promise<ConflictZoneData[]> => {\n  try {\n    const apiKey = import.meta.env.ACLED_API_KEY;\n    const response = await axios.get(getProxiedUrl(`https://api.acleddata.com/acled/read?key=${apiKey}`));\n    console.log('ACLED Response:', response.data);\n    if (!validateResponse(response.data)) {\n      throw new Error('Invalid ACLED response format');\n    }\n    return response.data.map((item: unknown) => {\n      const conflictItem = item as {\n        event_id: string;\n        event_date: string;\n        event_type: string;\n        location: string;\n        notes?: string;\n      };\n      return {\n        id: conflictItem.event_id,\n        date: conflictItem.event_date,\n        type: conflictItem.event_type,\n        location: conflictItem.location,\n        description: conflictItem.notes,\n        source: 'ACLED',\n      };\n    });\n  } catch (error) {\n    console.error('Error fetching ACLED data:', error);\n    return [];\n  }\n};\n\nexport const fetchUCDPConflictZones = async (): Promise<ConflictZoneData[]> => {\n  try {\n    const response = await axios.get(getProxiedUrl('https://ucdp.uu.se/api/v2/conflicts'));\n    console.log('UCDP Response:', response.data);\n    if (!validateResponse(response.data)) {\n      throw new Error('Invalid UCDP response format');\n    }\n    return response.data.map((item: unknown) => {\n      const conflictItem = item as {\n        id: string;\n        date_start: string;\n        type_of_conflict: string;\n        location: string;\n        description: string;\n      };\n      return {\n        id: conflictItem.id,\n        date: conflictItem.date_start,\n        type: conflictItem.type_of_conflict,\n        location: conflictItem.location,\n        description: conflictItem.description,\n        source: 'UCDP',\n      };\n    });\n  } catch (error) {\n    if (axios.isAxiosError(error)) {\n      console.error('Error fetching UCDP data:', error.response ? error.response.data : error.message);\n    } else {\n      console.error('Error fetching UCDP data:', error);\n    }\n    return [];\n  }\n};\n\nexport const fetchHOTConflictZones = async (): Promise<ConflictZoneData[]> => {\n  try {\n    const response = await axios.get(getProxiedUrl('https://tasks.hotosm.org/api/v1/projects'));\n    console.log('HOT Response:', response.data);\n    if (!validateResponse(response.data)) {\n      throw new Error('Invalid HOT response format');\n    }\n    return response.data.map((item: unknown) => {\n      const conflictItem = item as {\n        id: string;\n        created: string;\n        geometry: string;\n        name: string;\n      };\n      return {\n        id: conflictItem.id,\n        date: conflictItem.created,\n        type: 'Crisis Mapping',\n        location: conflictItem.geometry,\n        description: conflictItem.name,\n        source: 'HOT',\n      };\n    });\n  } catch (error) {\n    console.error('Error fetching HOT data:', error);\n    return [];\n  }\n};\n\nexport const fetchReliefWebConflictZones = async (): Promise<ConflictZoneData[]> => {\n  try {\n    const response = await axios.get(getProxiedUrl(reliefWebApiUrl));\n    console.log('ReliefWeb Response:', response.data);\n    if (!validateResponse(response.data.data)) {\n      throw new Error('Invalid ReliefWeb response format');\n    }\n    return response.data.data.map((item: unknown) => {\n      const conflictItem = item as {\n        id: string;\n        date: string;\n        type: string;\n        location: string;\n        description?: string;\n      };\n      return {\n        id: conflictItem.id,\n        date: conflictItem.date,\n        type: conflictItem.type,\n        location: conflictItem.location,\n        description: conflictItem.description,\n        source: 'ReliefWeb',\n      };\n    });\n  } catch (error) {\n    console.error('Error fetching ReliefWeb data:', error);\n    return [];\n  }\n};\n\nexport const fetchGDACSConflictZones = async (): Promise<ConflictZoneData[]> => {\n  try {\n    const response = await axios.get(getProxiedUrl(gdacsApiUrl), { responseType: 'text' });\n    console.log('GDACS Response:', response.data);\n    const parsedData = await xml2js.parseStringPromise(response.data);\n    if (!parsedData.rss.channel[0].item) {\n      throw new Error('Invalid GDACS response format');\n    }\n    return parsedData.rss.channel[0].item.map((item: any) => {\n      return {\n        id: item.guid[0]._,\n        date: item.pubDate[0],\n        type: item.title[0],\n        location: item['gdacs:location'][0],\n        description: item.description[0],\n        source: 'GDACS',\n      };\n    });\n  } catch (error) {\n    console.error('Error fetching GDACS data:', error);\n    return [];\n  }\n};\n\nexport const fetchAllConflictZones = async (): Promise<ConflictZoneData[]> => {\n  try {\n    const results = await Promise.allSettled([\n      fetchACLEDConflictZones(),\n      fetchUCDPConflictZones(),\n      fetchHOTConflictZones(),\n      fetchReliefWebConflictZones(),\n      fetchGDACSConflictZones(),\n    ]);\n\n    const aggregatedData = results\n      .filter(result => result.status === 'fulfilled')\n      .flatMap(result => (result as PromiseFulfilledResult<ConflictZoneData[]>).value);\n\n    return aggregatedData;\n  } catch (error) {\n    console.error('Error aggregating conflict zone data:', error);\n    return [];\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/EIAService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/FeedsService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/FiltersService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/GeoEventsService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/IPFSService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/IntelReportService.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_wallet' is defined but never used.","line":51,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":33,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/MarketDataService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/NOAAGeomagneticService.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/NOAAGeomagneticService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/SpaceAssetsService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/SpaceWeatherCacheService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/UCDPDataService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/UserDataService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/WeatherDataService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/anchor/AnchorService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1020,1023],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1020,1023],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2412,2415],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2412,2415],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AnchorProvider, Program, web3, BN } from '@coral-xyz/anchor';\nimport { Connection, PublicKey, Keypair, SystemProgram } from '@solana/web3.js';\nimport { IDL } from '../../types/intel_market';\nimport { IntelReportData } from '../../models/IntelReportData';\n\n/**\n * Anchor service for interacting with the Intel Market smart contract\n * Provides type-safe interaction with the deployed Anchor program\n */\nexport class AnchorService {\n  private connection: Connection;\n  private programId: PublicKey;\n  private program: Program | null = null;\n\n  constructor(connection: Connection, programId: string) {\n    this.connection = connection;\n    try {\n      this.programId = new PublicKey(programId);\n    } catch {\n      console.warn('Invalid program ID provided to AnchorService, using placeholder');\n      // Create a placeholder public key for development\n      this.programId = Keypair.generate().publicKey;\n    }\n  }\n\n  /**\n   * Initialize the Anchor program with a wallet provider\n   */\n  async initialize(wallet: any): Promise<void> {\n    try {\n      // Create an Anchor provider with the wallet and connection\n      const provider = new AnchorProvider(\n        this.connection,\n        wallet,\n        { commitment: 'confirmed' }\n      );\n\n      // Initialize the program with the IDL using the new syntax\n      // Set the program ID in the provider\n      const programWithId = { ...IDL, address: this.programId.toString() };\n      this.program = new Program(\n        programWithId,\n        provider\n      );\n\n      console.log('AnchorService initialized successfully');\n    } catch (error) {\n      console.error('Failed to initialize AnchorService:', error);\n      throw new Error(`AnchorService initialization failed: ${error}`);\n    }\n  }\n\n  /**\n   * Submit an intelligence report using the Anchor program\n   */\n  async createIntelReport(report: IntelReportData, authorWallet: web3.Keypair): Promise<string> {\n    if (!this.program) {\n      throw new Error('AnchorService not initialized. Call initialize() first.');\n    }\n\n    try {\n      // Generate a new keypair for the intel report account\n      const intelReportKeypair = Keypair.generate();\n\n      // Use latitude and longitude directly from the report\n      const latitude = report.latitude;\n      const longitude = report.longitude;\n\n      // Execute the create_intel_report instruction\n      const signature = await (this.program.methods as any)\n        .createIntelReport(\n          report.title,\n          report.content,\n          report.tags,\n          latitude,\n          longitude,\n          new BN(report.timestamp)\n        )\n        .accounts({\n          intelReport: intelReportKeypair.publicKey,\n          author: authorWallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        })\n        .signers([intelReportKeypair, authorWallet])\n        .rpc();\n\n      console.log('Intel report created successfully:', signature);\n      return signature;\n    } catch (error) {\n      console.error('Error creating intel report:', error);\n      throw new Error(`Failed to create intel report: ${error}`);\n    }\n  }\n\n  /**\n   * Get the program instance\n   */\n  getProgram(): Program | null {\n    return this.program;\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/crypto/PQCryptoService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_connection' is defined but never used.","line":49,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_publicKey' is defined but never used.","line":67,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":67,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_privateKey' is defined but never used.","line":75,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":75,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_ciphertext' is defined but never used.","line":75,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":75,"endColumn":63},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_message' is defined but never used.","line":93,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":93,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_privateKey' is defined but never used.","line":93,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":93,"endColumn":54},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_signature' is defined but never used.","line":104,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":104,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_message' is defined but never used.","line":105,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":105,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_publicKey' is defined but never used.","line":106,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":106,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":168,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":168,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5646,5649],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5646,5649],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_recipientPubKey' is defined but never used.","line":235,"column":47,"nodeType":null,"messageId":"unusedVar","endLine":235,"endColumn":63},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_privateKey' is defined but never used.","line":240,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":240,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_key' is defined but never used.","line":255,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":255,"endColumn":56},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_key' is defined but never used.","line":260,"column":58,"nodeType":null,"messageId":"unusedVar","endLine":260,"endColumn":62},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_pubKeys' is defined but never used.","line":265,"column":57,"nodeType":null,"messageId":"unusedVar","endLine":265,"endColumn":65}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/services/crypto/PQCryptoService.ts\n// Post-Quantum Cryptography Service for SOCOM Compliance\n// Implements NIST ML-KEM and ML-DSA algorithms with hybrid cryptography\n// AI-NOTE: This service provides quantum-resistant security for intelligence assets\n\nimport { Connection, PublicKey } from '@solana/web3.js';\n\n/**\n * NIST Post-Quantum Cryptography Standards Implementation\n * - ML-KEM (Module-Lattice-Based Key Encapsulation Mechanism)\n * - ML-DSA (Module-Lattice-Based Digital Signature Algorithm)\n * - Hybrid Classical + Quantum-Resistant approach for Web3 compatibility\n */\n\nexport interface QuantumKeyPair {\n  publicKey: Uint8Array;\n  privateKey: Uint8Array;\n  algorithm: 'ML-KEM-512' | 'ML-KEM-768' | 'ML-KEM-1024';\n}\n\nexport interface QuantumSignatureKeyPair {\n  publicKey: Uint8Array;\n  privateKey: Uint8Array;\n  algorithm: 'ML-DSA-44' | 'ML-DSA-65' | 'ML-DSA-87';\n}\n\nexport interface HybridCiphertext {\n  quantumPart: Uint8Array;      // ML-KEM encrypted part\n  classicalPart: Uint8Array;    // ECDH encrypted part (Web3 compatibility)\n  nonce: Uint8Array;\n  algorithm: string;\n}\n\nexport interface QuantumSignature {\n  signature: Uint8Array;\n  algorithm: string;\n  timestamp: number;\n  nonce: Uint8Array;\n}\n\n/**\n * Post-Quantum Cryptography Service\n * Implements crypto-agile architecture for easy algorithm updates\n */\nexport class PQCryptoService {\n  private currentKEMAlgorithm: string = 'ML-KEM-768'; // NIST recommended\n  private currentSigAlgorithm: string = 'ML-DSA-65';  // NIST recommended\n\n  constructor(_connection: Connection) {\n    // Connection will be used for on-chain operations in full implementation\n  }\n\n  /**\n   * Key Encapsulation Mechanism (ML-KEM)\n   * Quantum-resistant key establishment\n   */\n  async generateKEMKeyPair(): Promise<QuantumKeyPair> {\n    // TODO: Integrate with liboqs or similar PQC library\n    // For now, return placeholder structure\n    return {\n      publicKey: new Uint8Array(1568), // ML-KEM-768 public key size\n      privateKey: new Uint8Array(2400), // ML-KEM-768 private key size\n      algorithm: 'ML-KEM-768'\n    };\n  }\n\n  async encapsulateSecret(_publicKey: Uint8Array): Promise<{ciphertext: Uint8Array, sharedSecret: Uint8Array}> {\n    // TODO: Implement ML-KEM encapsulation\n    return {\n      ciphertext: new Uint8Array(1088), // ML-KEM-768 ciphertext size\n      sharedSecret: new Uint8Array(32)  // 256-bit shared secret\n    };\n  }\n\n  async decapsulateSecret(_privateKey: Uint8Array, _ciphertext: Uint8Array): Promise<Uint8Array> {\n    // TODO: Implement ML-KEM decapsulation\n    return new Uint8Array(32); // 256-bit shared secret\n  }\n\n  /**\n   * Digital Signature Algorithm (ML-DSA)\n   * Quantum-resistant digital signatures\n   */\n  async generateSignatureKeyPair(): Promise<QuantumSignatureKeyPair> {\n    // TODO: Integrate with liboqs ML-DSA implementation\n    return {\n      publicKey: new Uint8Array(1952), // ML-DSA-65 public key size\n      privateKey: new Uint8Array(4032), // ML-DSA-65 private key size\n      algorithm: 'ML-DSA-65'\n    };\n  }\n\n  async signMessage(_message: Uint8Array, _privateKey: Uint8Array): Promise<QuantumSignature> {\n    // TODO: Implement ML-DSA signing\n    return {\n      signature: new Uint8Array(3309), // ML-DSA-65 signature size\n      algorithm: this.currentSigAlgorithm,\n      timestamp: Date.now(),\n      nonce: crypto.getRandomValues(new Uint8Array(32))\n    };\n  }\n\n  async verifySignature(\n    _signature: QuantumSignature, \n    _message: Uint8Array, \n    _publicKey: Uint8Array\n  ): Promise<boolean> {\n    // TODO: Implement ML-DSA verification\n    return true; // Placeholder\n  }\n\n  /**\n   * Hybrid Cryptography for Web3 Compatibility\n   * Combines quantum-resistant and classical cryptography\n   */\n  async hybridEncrypt(\n    data: Uint8Array, \n    recipientQuantumPubKey: Uint8Array,\n    recipientSolanaPubKey: PublicKey\n  ): Promise<HybridCiphertext> {\n    // Step 1: Generate ephemeral keys for both systems\n    // const kemKeys = await this.generateKEMKeyPair();\n    \n    // Step 2: Encapsulate using ML-KEM\n    const {ciphertext: quantumCiphertext, sharedSecret: quantumSecret} = \n      await this.encapsulateSecret(recipientQuantumPubKey);\n    \n    // Step 3: Classical ECDH with Solana key (for Web3 compatibility)\n    const classicalSecret = await this.generateClassicalSharedSecret(recipientSolanaPubKey);\n    \n    // Step 4: Combine secrets using HKDF\n    const combinedSecret = await this.combineSecrets(quantumSecret, classicalSecret);\n    \n    // Step 5: Encrypt data with combined secret\n    const encryptedData = await this.symmetricEncrypt(data, combinedSecret);\n    \n    return {\n      quantumPart: quantumCiphertext,\n      classicalPart: encryptedData,\n      nonce: crypto.getRandomValues(new Uint8Array(12)),\n      algorithm: `hybrid-${this.currentKEMAlgorithm}-ECDH`\n    };\n  }\n\n  async hybridDecrypt(\n    ciphertext: HybridCiphertext, \n    recipientQuantumPrivKey: Uint8Array,\n    recipientSolanaPrivKey: Uint8Array\n  ): Promise<Uint8Array> {\n    // Step 1: Decapsulate quantum part\n    const quantumSecret = await this.decapsulateSecret(recipientQuantumPrivKey, ciphertext.quantumPart);\n    \n    // Step 2: Derive classical secret\n    const classicalSecret = await this.deriveClassicalSecret(recipientSolanaPrivKey);\n    \n    // Step 3: Combine secrets\n    const combinedSecret = await this.combineSecrets(quantumSecret, classicalSecret);\n    \n    // Step 4: Decrypt data\n    return await this.symmetricDecrypt(ciphertext.classicalPart, combinedSecret);\n  }\n\n  /**\n   * Intelligence Asset Encryption\n   * Specialized methods for encrypting intelligence reports\n   */\n  async encryptIntelReport(\n    report: any, \n    authorQuantumKeys: QuantumSignatureKeyPair,\n    recipientQuantumPubKeys: Uint8Array[]\n  ): Promise<{\n    encryptedContent: HybridCiphertext,\n    quantumSignature: QuantumSignature,\n    accessList: string[]\n  }> {\n    // Step 1: Serialize report\n    const serializedReport = new TextEncoder().encode(JSON.stringify(report));\n    \n    // Step 2: Sign with quantum signature\n    const signature = await this.signMessage(serializedReport, authorQuantumKeys.privateKey);\n    \n    // Step 3: Encrypt for multiple recipients\n    const encryptedContent = await this.multiRecipientEncrypt(serializedReport, recipientQuantumPubKeys);\n    \n    return {\n      encryptedContent,\n      quantumSignature: signature,\n      accessList: recipientQuantumPubKeys.map(key => this.keyToString(key))\n    };\n  }\n\n  /**\n   * Crypto-Agility Functions\n   * Allows for easy algorithm updates as NIST standards evolve\n   */\n  async updateCryptoAlgorithms(kemAlgorithm: string, sigAlgorithm: string): Promise<void> {\n    // Validate algorithms against NIST approved list\n    const approvedKEM = ['ML-KEM-512', 'ML-KEM-768', 'ML-KEM-1024'];\n    const approvedSig = ['ML-DSA-44', 'ML-DSA-65', 'ML-DSA-87'];\n    \n    if (!approvedKEM.includes(kemAlgorithm) || !approvedSig.includes(sigAlgorithm)) {\n      throw new Error('Algorithm not NIST approved');\n    }\n    \n    this.currentKEMAlgorithm = kemAlgorithm;\n    this.currentSigAlgorithm = sigAlgorithm;\n    \n    // Store updated algorithms on-chain for audit trail\n    await this.storeAlgorithmUpdate(kemAlgorithm, sigAlgorithm);\n  }\n\n  async getCryptoInventory(): Promise<{\n    currentAlgorithms: {kem: string, signature: string},\n    supportedAlgorithms: string[],\n    lastUpdate: number,\n    complianceStatus: 'NIST-COMPLIANT' | 'DEPRECATED' | 'EXPERIMENTAL'\n  }> {\n    return {\n      currentAlgorithms: {\n        kem: this.currentKEMAlgorithm,\n        signature: this.currentSigAlgorithm\n      },\n      supportedAlgorithms: [\n        'ML-KEM-512', 'ML-KEM-768', 'ML-KEM-1024',\n        'ML-DSA-44', 'ML-DSA-65', 'ML-DSA-87'\n      ],\n      lastUpdate: Date.now(),\n      complianceStatus: 'NIST-COMPLIANT'\n    };\n  }\n\n  /**\n   * Private Helper Methods\n   */\n  private async generateClassicalSharedSecret(_recipientPubKey: PublicKey): Promise<Uint8Array> {\n    // TODO: Implement ECDH with Solana keys\n    return new Uint8Array(32);\n  }\n\n  private async deriveClassicalSecret(_privateKey: Uint8Array): Promise<Uint8Array> {\n    // TODO: Implement ECDH secret derivation\n    return new Uint8Array(32);\n  }\n\n  private async combineSecrets(quantumSecret: Uint8Array, classicalSecret: Uint8Array): Promise<Uint8Array> {\n    // Use HKDF to combine quantum and classical secrets\n    // TODO: Implement proper HKDF\n    const combined = new Uint8Array(32);\n    for (let i = 0; i < 32; i++) {\n      combined[i] = quantumSecret[i] ^ classicalSecret[i];\n    }\n    return combined;\n  }\n\n  private async symmetricEncrypt(data: Uint8Array, _key: Uint8Array): Promise<Uint8Array> {\n    // TODO: Implement AES-256-GCM encryption\n    return data; // Placeholder\n  }\n\n  private async symmetricDecrypt(ciphertext: Uint8Array, _key: Uint8Array): Promise<Uint8Array> {\n    // TODO: Implement AES-256-GCM decryption\n    return ciphertext; // Placeholder\n  }\n\n  private async multiRecipientEncrypt(data: Uint8Array, _pubKeys: Uint8Array[]): Promise<HybridCiphertext> {\n    // TODO: Implement multi-recipient encryption\n    return {\n      quantumPart: new Uint8Array(1088),\n      classicalPart: data,\n      nonce: crypto.getRandomValues(new Uint8Array(12)),\n      algorithm: `hybrid-${this.currentKEMAlgorithm}-ECDH`\n    };\n  }\n\n  private keyToString(key: Uint8Array): string {\n    return Array.from(key).map(b => b.toString(16).padStart(2, '0')).join('');\n  }\n\n  private async storeAlgorithmUpdate(kemAlgorithm: string, sigAlgorithm: string): Promise<void> {\n    // TODO: Store algorithm update on Solana for audit trail\n    console.log(`Updated algorithms: KEM=${kemAlgorithm}, SIG=${sigAlgorithm}`);\n  }\n}\n\n/**\n * Singleton instance for global use\n */\nexport const pqCryptoService = new PQCryptoService(\n  new Connection('https://api.devnet.solana.com', 'confirmed')\n);\n","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/data-service-interfaces.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":40,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Data Service Interfaces (artifact-driven)\n// See: artifacts/starcom-mk2-data-service-interfaces.artifact\n// See: artifacts/starcom-mk2-data-service-observability.artifact\n// See: artifacts/starcom-mk2-data-service-refactor-plan.artifact\n\n// Observability contract for logging/metrics/tracing\nexport interface DataServiceObserver {\n  onFetchStart?(key: string): void;\n  onFetchEnd?(key: string, durationMs: number): void;\n  onError?(key: string, error: Error): void;\n  onCacheHit?(key: string): void;\n  onCacheMiss?(key: string): void;\n  onCacheEvict?(key: string): void;\n}\n\n// Generic data provider interface\nexport interface DataProvider<T = unknown> {\n  fetchData(key: string, options?: Record<string, unknown>): Promise<T>;\n  subscribe?(key: string, onData: (data: T) => void, options?: Record<string, unknown>): () => void;\n  setObserver?(observer: DataServiceObserver): void;\n}\n\n// Generic cache service interface\nexport interface DataCacheService<T = unknown> {\n  get(key: string): T | null;\n  set(key: string, value: T, ttl?: number): void;\n  delete(key: string): void;\n  clear(): void;\n  has(key: string): boolean;\n  setObserver?(observer: DataServiceObserver): void;\n}\n\n// Example: Composing multiple providers (fallback, aggregation)\nexport class FallbackProvider<T> implements DataProvider<T> {\n  constructor(private providers: DataProvider<T>[]) {}\n  async fetchData(key: string, options?: Record<string, unknown>): Promise<T> {\n    for (const provider of this.providers) {\n      try {\n        return await provider.fetchData(key, options);\n      } catch (e) {\n        // try next provider\n      }\n    }\n    throw new Error('All providers failed');\n  }\n}\n\n// AI-NOTE: This file is artifact-driven and should be updated if the interfaces artifact changes.\n","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/data-services.all.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/eia/EIADataCacheService.observability.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/eia/EIADataCacheService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[307,310],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[307,310],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[357,360],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[357,360],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[532,535],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[532,535],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[917,920],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[917,920],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// EIADataCacheService: Implements DataCacheService for EIA domain\n// Artifacts: data-service-interfaces, data-service-observability, data-service-refactor-plan\nimport { DataCacheService, DataServiceObserver } from '../data-service-interfaces';\n\nexport class EIADataCacheService implements DataCacheService<any> {\n  private cache = new Map<string, { value: any; expiresAt?: number }>();\n  private observer?: DataServiceObserver;\n\n  setObserver(observer: DataServiceObserver) {\n    this.observer = observer;\n  }\n\n  get(key: string): any | null {\n    const entry = this.cache.get(key);\n    if (!entry) {\n      this.observer?.onCacheMiss?.(key);\n      return null;\n    }\n    if (entry.expiresAt && entry.expiresAt < Date.now()) {\n      this.cache.delete(key);\n      this.observer?.onCacheEvict?.(key);\n      return null;\n    }\n    this.observer?.onCacheHit?.(key);\n    return entry.value;\n  }\n\n  set(key: string, value: any, ttl?: number): void {\n    const expiresAt = ttl ? Date.now() + ttl : undefined;\n    this.cache.set(key, { value, expiresAt });\n  }\n\n  delete(key: string): void {\n    this.cache.delete(key);\n    this.observer?.onCacheEvict?.(key);\n  }\n\n  clear(): void {\n    this.cache.clear();\n  }\n\n  has(key: string): boolean {\n    return this.cache.has(key);\n  }\n}\n\n// AI-NOTE: This is a minimal, artifact-driven implementation. Add persistence or advanced invalidation as needed.\n","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/eia/EIADataCacheService.unit.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/eia/EIADataProvider.observability.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/eia/EIADataProvider.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/eia/EIADataProvider.unit.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/eia/EIAService.e2e.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/eia/EIAService.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/eia/EIAService.ts","messages":[{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":5,"column":5,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":15,"endColumn":6},{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":20,"column":5,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":29,"endColumn":6},{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":34,"column":5,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":43,"endColumn":6},{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":48,"column":5,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":57,"endColumn":6}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Minimal EIAService implementation for testing\nclass EIAService {\n  static async getLatestOilPrice() {\n    const url = `https://api.eia.gov/v2/seriesid/PET.RWTC.W?api_key=${import.meta.env.VITE_EIA_API_KEY}`;\n    try {\n      const res = await fetch(url);\n      if (!res.ok) throw new Error('Network response was not ok');\n      const data = await res.json();\n      // Defensive: extract value from EIA API response\n      const value = data?.response?.data?.[0]?.value;\n      if (typeof value !== 'number') throw new Error('Invalid oil price data');\n      return value;\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  static async getLatestGasolinePrice() {\n    const url = `https://api.eia.gov/v2/seriesid/PET.EMM_EPM0_PTE_NUS_DPG.W?api_key=${import.meta.env.VITE_EIA_API_KEY}`;\n    try {\n      const res = await fetch(url);\n      if (!res.ok) throw new Error('Network response was not ok');\n      const data = await res.json();\n      const value = data?.response?.data?.[0]?.value;\n      if (typeof value !== 'number') throw new Error('Invalid gasoline price data');\n      return value;\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  static async getLatestOilInventory() {\n    const url = `https://api.eia.gov/v2/seriesid/PET.WCRSTUS1.W?api_key=${import.meta.env.VITE_EIA_API_KEY}`;\n    try {\n      const res = await fetch(url);\n      if (!res.ok) throw new Error('Network response was not ok');\n      const data = await res.json();\n      const value = data?.response?.data?.[0]?.value;\n      if (typeof value !== 'number') throw new Error('Invalid oil inventory data');\n      return value;\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  static async getLatestNaturalGasStorage() {\n    const url = `https://api.eia.gov/v2/seriesid/NG.NW2_EPG0_SWO_R48_BCF.W?api_key=${import.meta.env.VITE_EIA_API_KEY}`;\n    try {\n      const res = await fetch(url);\n      if (!res.ok) throw new Error('Network response was not ok');\n      const data = await res.json();\n      const value = data?.response?.data?.[0]?.value;\n      if (typeof value !== 'number') throw new Error('Invalid natural gas storage data');\n      return value;\n    } catch (err) {\n      throw err;\n    }\n  }\n}\n\nexport default EIAService;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/eia/LegacyEIAServiceAdapter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/market/MarketDataCacheService.unit.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/market/MarketDataProvider.unit.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/nftService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/noaaSpaceWeather.integration.test.ts","messages":[{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":12,"column":43,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":12,"endColumn":44,"suggestions":[{"messageId":"removeEscape","fix":{"range":[581,582],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[581,581],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":20,"column":43,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":20,"endColumn":44,"suggestions":[{"messageId":"removeEscape","fix":{"range":[976,977],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[976,976],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":29,"column":77,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":29,"endColumn":78,"suggestions":[{"messageId":"removeEscape","fix":{"range":[1536,1537],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[1536,1536],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":45,"column":77,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":45,"endColumn":78,"suggestions":[{"messageId":"removeEscape","fix":{"range":[2540,2541],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[2540,2540],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from 'vitest';\nimport { fetch } from 'undici';\nimport type { NOAAElectricFieldData } from '../types/spaceWeather';\n\n// Integration tests for real NOAA API endpoints\n\ndescribe('NOAA Electric Field Data - Real API Integration', () => {\n  it('should discover what the NOAA InterMag directory actually contains', async () => {\n    const response = await fetch('https://services.swpc.noaa.gov/json/lists/rgeojson/InterMagEarthScope/');\n    expect(response.ok).toBe(true);\n    const html = await response.text();\n    const fileLinks = html.match(/href=\"[^\\\"]*\\.json\"/g) || [];\n    expect(fileLinks.length).toBeGreaterThan(0);\n  }, 30000);\n\n  it('should discover what the NOAA US-Canada directory actually contains', async () => {\n    const response = await fetch('https://services.swpc.noaa.gov/json/lists/rgeojson/US-Canada-1D/');\n    expect(response.ok).toBe(true);\n    const html = await response.text();\n    const fileLinks = html.match(/href=\"[^\\\"]*\\.json\"/g) || [];\n    expect(fileLinks.length).toBeGreaterThan(0);\n  }, 30000);\n\n  it('should fetch and parse actual InterMag electric field data', async () => {\n    const dirResponse = await fetch('https://services.swpc.noaa.gov/json/lists/rgeojson/InterMagEarthScope/');\n    const html = await dirResponse.text();\n    const fileLinks = html.match(/href=\"(\\d{8}T\\d{6}-\\d{2}-Efield-empirical-EMTF-[\\d.-]+x[\\d.-]+\\.json)\"/g) || [];\n    expect(fileLinks.length).toBeGreaterThan(0);\n    const latestFileMatch = fileLinks[fileLinks.length - 1].match(/href=\"([^\\\"]+)\"/);\n    expect(latestFileMatch).toBeTruthy();\n    const latestFilename = latestFileMatch![1];\n    const dataResponse = await fetch(`https://services.swpc.noaa.gov/json/lists/rgeojson/InterMagEarthScope/${latestFilename}`);\n    expect(dataResponse.ok).toBe(true);\n    const electricFieldData = await dataResponse.json() as NOAAElectricFieldData;\n    expect(electricFieldData.type).toBe('FeatureCollection');\n    expect(electricFieldData.features).toBeInstanceOf(Array);\n    expect(electricFieldData.features.length).toBeGreaterThan(0);\n  }, 30000);\n\n  it('should fetch and parse actual US-Canada electric field data', async () => {\n    const dirResponse = await fetch('https://services.swpc.noaa.gov/json/lists/rgeojson/US-Canada-1D/');\n    const html = await dirResponse.text();\n    const fileLinks = html.match(/href=\"(\\d{8}T\\d{6}-\\d{2}-Efield-US-Canada\\.json)\"/g) || [];\n    expect(fileLinks.length).toBeGreaterThan(0);\n    const latestFileMatch = fileLinks[fileLinks.length - 1].match(/href=\"([^\\\"]+)\"/);\n    const latestFilename = latestFileMatch![1];\n    const dataResponse = await fetch(`https://services.swpc.noaa.gov/json/lists/rgeojson/US-Canada-1D/${latestFilename}`);\n    expect(dataResponse.ok).toBe(true);\n    const electricFieldData = await dataResponse.json() as NOAAElectricFieldData;\n    expect(electricFieldData.type).toBe('FeatureCollection');\n    expect(electricFieldData.features).toBeInstanceOf(Array);\n    expect(electricFieldData.features.length).toBeGreaterThan(0);\n  }, 30000);\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/noaaSpaceWeather.quality.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/noaaSpaceWeather.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/noaaSpaceWeather.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/noaaSpaceWeather.unit.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/shared/FallbackProvider.unit.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/testNoaaFunctions.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/tokenService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/wallet/SolanaWalletService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/setupTests.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/styles/theme.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/tailwind.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/types/TimeDataTypes.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":3,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[63,66],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[63,66],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface CacheEntry {\n    timestamp: number;\n    data: any[]; // Replace `any` with the appropriate type\n  }","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/types/intel_market.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/types/spaceWeather.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/types/ucdpTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/ProxyUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/electricFieldNormalization.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/electricFieldNormalization.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/errorHandler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/fetchDataUtils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[65,68],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[65,68],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export async function fetchHistoricalData(time: number): Promise<any[]> {\n    return Promise.resolve([\n      { lat: 40.7128, lng: -74.006, size: 1, color: 'red', timestamp: time },\n    ]);\n  }","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/fetchHistoricalData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/formatDate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/generateColor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/logging.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/mockData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/queryUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/settingsStorage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/uiSettingsReflection.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","line":40,"column":6,"nodeType":"Identifier","endLine":40,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// AI-NOTE: Utility functions to ensure UI state reflects persistent settings\n// Helps guarantee consistency between stored settings and UI display\n\nimport React, { useEffect, useState } from 'react';\n\n/**\n * Hook to ensure form control values reflect the actual persistent state\n * Useful for components that need to sync with external state changes\n */\nexport const useSettingsReflection = <T>(persistentValue: T, onChange: (value: T) => void) => {\n  const [uiValue, setUiValue] = useState<T>(persistentValue);\n\n  // Sync UI value with persistent value when it changes\n  useEffect(() => {\n    setUiValue(persistentValue);\n  }, [persistentValue]);\n\n  // Handle UI changes and propagate to persistent storage\n  const handleUIChange = (newValue: T) => {\n    setUiValue(newValue);\n    onChange(newValue);\n  };\n\n  return {\n    value: uiValue,\n    onChange: handleUIChange,\n    isInSync: uiValue === persistentValue\n  };\n};\n\n/**\n * Hook to force UI re-render when settings change\n * Useful for components that need to reflect external setting changes\n */\nexport const useSettingsSync = (dependencies: React.DependencyList) => {\n  const [syncKey, setSyncKey] = useState(0);\n\n  useEffect(() => {\n    setSyncKey(prev => prev + 1);\n  }, dependencies);\n\n  return syncKey;\n};\n\n/**\n * Hook to validate that UI controls are showing the correct persistent values\n * Useful for debugging and ensuring UI consistency\n */\nexport const useSettingsValidation = <T extends Record<string, unknown>>(\n  componentName: string,\n  persistentSettings: T,\n  uiSettings: Partial<T>\n) => {\n  useEffect(() => {\n    const mismatches: string[] = [];\n    \n    Object.entries(uiSettings).forEach(([key, uiValue]) => {\n      const persistentValue = persistentSettings[key];\n      if (persistentValue !== uiValue) {\n        mismatches.push(`${key}: UI=${JSON.stringify(uiValue)} ≠ Persistent=${JSON.stringify(persistentValue)}`);\n      }\n    });\n\n    if (mismatches.length > 0) {\n      console.warn(`⚠️ ${componentName} UI/Persistent mismatch:`, mismatches);\n    } else {\n      console.log(`✅ ${componentName} UI state in sync with persistent settings`);\n    }\n  }, [componentName, persistentSettings, uiSettings]);\n};\n\n/**\n * Utility to create controlled input props that reflect persistent state\n */\nexport const createControlledInputProps = <T>(\n  value: T,\n  onChange: (value: T) => void,\n  transform?: {\n    toUI?: (value: T) => string | number | boolean;\n    fromUI?: (uiValue: string | number | boolean) => T;\n  }\n) => {\n  const toUI = transform?.toUI || ((v: T) => v as string | number | boolean);\n  const fromUI = transform?.fromUI || ((v: string | number | boolean) => v as T);\n\n  return {\n    value: toUI(value),\n    onChange: (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n      const target = e.target;\n      let uiValue: string | number | boolean;\n      \n      if (target.type === 'checkbox') {\n        uiValue = (target as HTMLInputElement).checked;\n      } else if (target.type === 'number' || target.type === 'range') {\n        uiValue = parseFloat(target.value) || 0;\n      } else {\n        uiValue = target.value;\n      }\n      \n      onChange(fromUI(uiValue));\n    }\n  };\n};\n\n/**\n * Debug utility to log all persistent settings to console\n */\nexport const debugPersistentSettings = (label: string, settings: Record<string, unknown>) => {\n  console.group(`🔍 ${label} - Persistent Settings Debug`);\n  Object.entries(settings).forEach(([key, value]) => {\n    console.log(`${key}:`, value);\n  });\n  console.groupEnd();\n};\n\nexport default {\n  useSettingsReflection,\n  useSettingsSync,\n  useSettingsValidation,\n  createControlledInputProps,\n  debugPersistentSettings\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/wallet.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/wasm.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/wasm/wasm_mini_server.d.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[506,509],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[506,509],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":36,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1174,1177],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1174,1177],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":57,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1762,1765],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1762,1765],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":59,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1866,1869],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1866,1869],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":60,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1921,1924],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1921,1924],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":61,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1958,1961],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1958,1961],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":69,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2415,2418],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2415,2418],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2492,2495],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2492,2495],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2500,2503],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2500,2503],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/wasm/wasm_mini_server.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/wasm/wasm_mini_server_bg.wasm.d.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":4,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[134,137],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[134,137],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[242,245],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[242,245],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[299,302],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[299,302],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[338,341],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[338,341],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[811,814],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[811,814],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[890,893],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[890,893],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[898,901],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[898,901],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/workers/dataFetcher.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]