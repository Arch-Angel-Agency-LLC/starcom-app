[{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/.eslintrc.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/__mocks__/styleMock.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/api/auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/api/eia.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/api/intelligence.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/api/market.mock.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/api/market.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/api/rss.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/cache/Cache.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/cache/CacheManager.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[128,131],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[128,131],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import Cache from './Cache';\n\nclass CacheManager {\n  private static instance: CacheManager;\n  private caches: Map<string, Cache<any>>;\n\n  private constructor() {\n    this.caches = new Map();\n  }\n\n  public static getInstance(): CacheManager {\n    if (!CacheManager.instance) {\n      CacheManager.instance = new CacheManager();\n    }\n    return CacheManager.instance;\n  }\n\n  createCache<T>(name: string, defaultTTL?: number): Cache<T> {\n    if (this.caches.has(name)) {\n      throw new Error(`Cache with name ${name} already exists`);\n    }\n    if (defaultTTL !== undefined && (typeof defaultTTL !== 'number' || defaultTTL <= 0)) {\n      throw new Error(`Invalid TTL value: ${defaultTTL}. TTL must be a positive number.`);\n    }\n    const cache = new Cache<T>(defaultTTL);\n    this.caches.set(name, cache);\n    this.log(`Cache created: ${name} with TTL: ${defaultTTL}`);\n    return cache;\n  }\n\n  getCache<T>(name: string): Cache<T> | null {\n    const cache = this.caches.get(name) as Cache<T> || null;\n    if (!cache) {\n      this.warn(`Cache not found: ${name}`);\n    }\n    return cache;\n  }\n\n  deleteCache(name: string) {\n    if (this.caches.delete(name)) {\n      this.log(`Cache deleted: ${name}`);\n    } else {\n      this.warn(`Cache delete failed: ${name} not found`);\n    }\n  }\n\n  clearAllCaches() {\n    this.caches.forEach(cache => cache.clear());\n    this.log('All caches cleared');\n  }\n\n  getAllCacheNames(): string[] {\n    return Array.from(this.caches.keys());\n  }\n\n  hasCache(name: string): boolean {\n    return this.caches.has(name);\n  }\n\n  private log(message: string) {\n    console.log(`[CacheManager] ${message}`);\n  }\n\n  private warn(message: string) {\n    console.warn(`[CacheManager] ${message}`);\n  }\n}\n\nexport default CacheManager;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/cache/CacheRegistry.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[178,181],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[178,181],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[520,523],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[520,523],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import CacheManager from './CacheManager';\n\nclass CacheRegistry {\n  private static instance: CacheRegistry;\n  private cacheManager: CacheManager;\n  private services: Map<string, any>;\n\n  private constructor() {\n    this.cacheManager = CacheManager.getInstance();\n    this.services = new Map();\n  }\n\n  public static getInstance(): CacheRegistry {\n    if (!CacheRegistry.instance) {\n      CacheRegistry.instance = new CacheRegistry();\n    }\n    return CacheRegistry.instance;\n  }\n\n  registerService(name: string, service: any) {\n    if (this.services.has(name)) {\n      throw new Error(`Service with name ${name} already registered`);\n    }\n    this.services.set(name, service);\n    console.log(`Service registered: ${name}`);\n  }\n\n  getService<T>(name: string): T | null {\n    const service = this.services.get(name) || null;\n    if (!service) {\n      console.warn(`Service not found: ${name}`);\n    }\n    return service;\n  }\n\n  getCacheManager(): CacheManager {\n    return this.cacheManager;\n  }\n}\n\nexport default CacheRegistry;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/cache/EIADataCacheService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/cache/IntelReportCache.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/AuthErrorBoundary.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/AuthErrorBoundary.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[256,259],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[256,259],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\n// AI-NOTE: Error boundary for authentication and wallet errors (see artifacts)\nclass AuthErrorBoundary extends React.Component<{\n  children: React.ReactNode\n}, { hasError: boolean; error: Error | null }> {\n  constructor(props: any) {\n    super(props);\n    this.state = { hasError: false, error: null };\n  }\n\n  static getDerivedStateFromError(error: Error) {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch() {\n    // No-op: error boundary logic does not use these parameters\n  }\n\n  handleRetry = () => {\n    this.setState({ hasError: false, error: null });\n    window.location.reload();\n  };\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div className=\"p-6 text-center\">\n          <h2 className=\"text-lg font-bold mb-2\">Authentication Error</h2>\n          <p className=\"mb-4\">{this.state.error?.message || 'An unknown error occurred.'}</p>\n          <button className=\"bg-blue-600 text-white px-4 py-2 rounded\" onClick={this.handleRetry}>\n            Retry\n          </button>\n        </div>\n      );\n    }\n    return this.props.children;\n  }\n}\n\nexport default AuthErrorBoundary;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/TermsModal.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/TermsModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/TokenGatedPage.test.minimal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/TokenGatedPage.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/TokenGatedPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/WalletStatus.modal.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/WalletStatus.network.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/WalletStatus.session.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/WalletStatus.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/WalletStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/WalletStatus.unit.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/Web3Login.accessibility.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/Web3Login.protected.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/Web3Login.wallet.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Auth/Web3LoginPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Conflict/ConflictDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Conflict/ConflictList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/DropdownMenu/DropdownMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Features/GlobeGeoEvent/GlobeGeoEvent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Features/GlobeGeoHeatmap/GlobeGeoHeatmap.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Features/GlobeGeoMarker/GlobeGeoMarker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Features/GlobeGeoOverlay/GlobeGeoOverlay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Features/GlobeGeoWeather/GlobeGeoWeather.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Features/GlobeIntelNode/GlobeIntelNode.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Features/GlobeSpaceAsset/GlobeSpaceAsset.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Features/GlobeSpaceEntity/GlobeSpaceEntity.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Features/GlobeSpacecraft/GlobeSpacecraft.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Globe.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_spaceWeatherLoading' is assigned a value but never used.","line":54,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_spaceWeatherError' is assigned a value but never used.","line":55,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":30}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/components/Globe/Globe.tsx\nimport React, { useState, useEffect, useRef } from 'react';\nimport Globe, { GlobeMethods } from 'react-globe.gl';\nimport * as THREE from 'three';\nimport { useGlobeContext } from '../../context/GlobeContext';\nimport { useVisualizationMode } from '../../context/VisualizationModeContext';\nimport { GlobeEngine, type GlobeEvent } from '../../globe-engine/GlobeEngine';\nimport { useSpaceWeatherContext } from '../../context/SpaceWeatherContext';\nimport Modal from 'react-modal';\nimport { Tooltip } from 'react-tooltip';\n\n// Artifact-driven overlay mapping (see globe-overlays.artifact, globe-mode-mapping-reference.artifact)\nconst ALL_OVERLAYS = [\n  'markers',\n  'alerts',\n  'intelMarkers',\n  'weather',\n  'naturalEvents',\n  'borders',\n  'territories',\n  'spaceAssets',\n  'spaceWeather',\n];\n\n// Artifact-driven overlay legend (see globe-overlays.artifact)\nconst OVERLAY_LEGEND: Record<string, { label: string; color: string; description: string }> = {\n  markers: { label: 'Markers', color: 'white', description: 'User-placed or data-driven markers (incidents, investigations)' },\n  alerts: { label: 'Alerts', color: 'cyan', description: 'Cyber or system alerts (real-time)' },\n  intelMarkers: { label: 'Intel Markers', color: 'orange', description: 'Intelligence report locations' },\n  weather: { label: 'Weather', color: 'blue', description: 'Weather overlays (clouds, storms)' },\n  naturalEvents: { label: 'Natural Events', color: 'red', description: 'Earthquakes, volcanoes, etc.' },\n  borders: { label: 'Borders', color: 'red', description: 'Country/region borders' },\n  territories: { label: 'Territories', color: 'green', description: 'National territories' },\n  spaceAssets: { label: 'Space Assets', color: 'lime', description: 'Satellites, space debris, and orbital objects' },\n  spaceWeather: { label: 'Space Weather', color: 'purple', description: 'NOAA electric field data (InterMag & US-Canada)' },\n};\n\nconst PERIODIC_OVERLAYS = ['spaceAssets', 'weather', 'naturalEvents', 'spaceWeather']; // Artifact-driven: overlays with periodic/real-time updates (see globe-overlays.artifact)\n\nconst GlobeView: React.FC = () => {\n  const [globeData, setGlobeData] = useState<object[]>([]);\n  const globeRef = useRef<GlobeMethods>();\n  const { setFocusLocation } = useGlobeContext();\n  const { visualizationMode } = useVisualizationMode();\n  const [globeEngine, setGlobeEngine] = useState<GlobeEngine | null>(null);\n  const [material, setMaterial] = useState<THREE.Material | null>(null);\n  const bordersRef = useRef<THREE.Group>(null);\n  const territoriesRef = useRef<THREE.Group>(null);\n  \n  // Space weather integration via context\n  const { \n    shouldShowOverlay, \n    visualizationVectors, \n    isLoading: _spaceWeatherLoading,\n    error: _spaceWeatherError \n  } = useSpaceWeatherContext();\n  \n  // Merge all overlays for UI, but only enable those mapped to the current mode by default\n  const availableOverlays = ALL_OVERLAYS;\n  const [activeOverlays, setActiveOverlays] = useState<string[]>([]);\n  const [overlayStatus, setOverlayStatus] = useState<Record<string, { loading: boolean; error: string | null; count: number }>>({});\n  const [overlayData, setOverlayData] = useState<Record<string, object[]>>({});\n  const [inspectOverlay, setInspectOverlay] = useState<string | null>(null);\n  const [modalPage, setModalPage] = useState(0); // For modal pagination\n  const MODAL_PAGE_SIZE = 50; // Artifact-driven: keep modal tables performant (see globe-overlays.artifact)\n  const [overlayLastUpdated, setOverlayLastUpdated] = useState<Record<string, number>>({});\n  const [legendOpen, setLegendOpen] = useState(false); // Legend is closed by default\n  const [overlayPanelOpen, setOverlayPanelOpen] = useState(false); // Overlay controls panel is minimized by default\n  const [containerSize, setContainerSize] = useState({ width: window.innerWidth, height: window.innerHeight });\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    // AI-NOTE: Integration with GlobeEngine per globe-engine-api.artifact\n    const engine = new GlobeEngine({ mode: visualizationMode.mode });\n    setGlobeEngine(engine);\n    // Listen for material ready\n    const checkMaterial = setInterval(() => {\n      const mat = engine.getMaterial();\n      if (mat) {\n        setMaterial(mat);\n        clearInterval(checkMaterial);\n      }\n    }, 100);\n    return () => clearInterval(checkMaterial);\n  }, [visualizationMode.mode]);\n\n  useEffect(() => {\n    // Example: update globe data if needed (can be extended for overlays)\n    setGlobeData([]); // TODO: Use overlay/event data from GlobeEngine if needed\n  }, [globeEngine]);\n\n  useEffect(() => {\n    if (!globeEngine) return;\n    // Listen for overlay data updates and status\n    const handler = ({ type, payload }: GlobeEvent) => {\n      if (type === 'overlayDataUpdated' && payload && typeof payload === 'object') {\n        const p = payload as { overlay: string; data: object[] };\n        setOverlayData((prev) => ({ ...prev, [p.overlay]: p.data || [] }));\n        setOverlayStatus((prev) => ({\n          ...prev,\n          [p.overlay]: {\n            ...(prev[p.overlay] || { loading: false, error: null, count: 0 }),\n            loading: false,\n            error: null,\n            count: Array.isArray(p.data) ? p.data.length : 0,\n          },\n        }));\n        setOverlayLastUpdated((prev) => ({ ...prev, [p.overlay]: Date.now() }));\n      }\n      if (type === 'overlayDataLoading' && payload && typeof payload === 'object') {\n        const p = payload as { overlay: string };\n        setOverlayStatus((prev) => ({\n          ...prev,\n          [p.overlay]: {\n            ...(prev[p.overlay] || { loading: false, error: null, count: 0 }),\n            loading: true,\n            error: null,\n          },\n        }));\n      }\n      if (type === 'overlayDataError' && payload && typeof payload === 'object') {\n        const p = payload as { overlay: string; error: string };\n        setOverlayStatus((prev) => ({\n          ...prev,\n          [p.overlay]: {\n            ...(prev[p.overlay] || { loading: false, error: null, count: 0 }),\n            loading: false,\n            error: p.error,\n          },\n        }));\n      }\n    };\n    globeEngine.on('overlayDataUpdated', handler);\n    globeEngine.on('overlayDataLoading', handler);\n    globeEngine.on('overlayDataError', handler);\n    // Add overlays for current mode\n    const overlays = globeEngine.getOverlays();\n    overlays.forEach((o) => globeEngine.addOverlay(o));\n    return () => {\n      // No off() method, so ignore cleanup for now\n    };\n  }, [globeEngine]);\n\n  useEffect(() => {\n    if (!globeRef.current) return;\n    // GlobeMethods type does not expose .scene(), so we cast to the correct type\n    const globeObj = globeRef.current as unknown as { scene: () => THREE.Scene };\n    const scene = globeObj && globeObj.scene();\n    const bordersGroup = bordersRef.current;\n    const territoriesGroup = territoriesRef.current;\n    if (scene && bordersGroup && !scene.children.includes(bordersGroup)) {\n      scene.add(bordersGroup);\n    }\n    if (scene && territoriesGroup && !scene.children.includes(territoriesGroup)) {\n      scene.add(territoriesGroup);\n    }\n    return () => {\n      if (scene && bordersGroup) scene.remove(bordersGroup);\n      if (scene && territoriesGroup) scene.remove(territoriesGroup);\n    };\n  }, [globeRef, bordersRef, territoriesRef, globeEngine]);\n\n  const handleGlobeClick = ({ lat, lng }: { lat: number; lng: number }) => {\n    const newMarker = { lat, lng, size: 0.5, color: 'red' };\n    setGlobeData((prevData) => [...prevData, newMarker]);\n    setFocusLocation({ lat, lng });\n    if (globeRef.current) {\n      globeRef.current.pointOfView({ lat, lng, altitude: 1.5 });\n    }\n  };\n\n  const handleOverlayToggle = (overlay: string) => {\n    if (!globeEngine) return;\n    if (activeOverlays.includes(overlay)) {\n      globeEngine.removeOverlay(overlay);\n      setActiveOverlays((prev) => prev.filter((o) => o !== overlay));\n    } else {\n      globeEngine.addOverlay(overlay);\n      setActiveOverlays((prev) => [...prev, overlay]);\n    }\n  };\n\n  // Manual refresh for overlays with periodic updates (artifact-driven, see globe-overlays.artifact)\n  const handleOverlayRefresh = (overlay: string) => {\n    if (!globeEngine) return;\n    // Remove and re-add overlay to force refresh\n    globeEngine.removeOverlay(overlay);\n    setTimeout(() => globeEngine.addOverlay(overlay), 50);\n  };\n\n  // Reset modal page when inspecting a new overlay\n  useEffect(() => {\n    setModalPage(0);\n  }, [inspectOverlay]);\n\n  useEffect(() => {\n    function handleResize() {\n      if (containerRef.current) {\n        const rect = containerRef.current.getBoundingClientRect();\n        setContainerSize({ width: rect.width, height: rect.height });\n      } else {\n        setContainerSize({ width: window.innerWidth, height: window.innerHeight });\n      }\n    }\n    window.addEventListener('resize', handleResize);\n    handleResize(); // Initial\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  // Space weather settings integration effect\n  useEffect(() => {\n    if (!globeEngine) return;\n    \n    // Control space weather overlay based on settings from context\n    const shouldShowSpaceWeather = shouldShowOverlay && \n                                   visualizationMode.mode === 'EcoNatural' &&\n                                   visualizationMode.subMode === 'SpaceWeather';\n    \n    const currentOverlays = globeEngine.getOverlays();\n    const hasSpaceWeather = currentOverlays.includes('spaceWeather');\n    \n    if (shouldShowSpaceWeather && !hasSpaceWeather) {\n      globeEngine.addOverlay('spaceWeather');\n      setActiveOverlays(prev => [...prev, 'spaceWeather']);\n    } else if (!shouldShowSpaceWeather && hasSpaceWeather) {\n      globeEngine.removeOverlay('spaceWeather');\n      setActiveOverlays(prev => prev.filter(o => o !== 'spaceWeather'));\n    }\n    \n  }, [globeEngine, shouldShowOverlay, visualizationMode.mode, visualizationMode.subMode]);\n  \n  // Space weather data visualization effect\n  useEffect(() => {\n    if (!globeEngine || !visualizationVectors.length) return;\n    \n    // Use pre-processed visualization vectors from context\n    const spaceWeatherMarkers = visualizationVectors.map(vector => ({\n      lat: vector.latitude,\n      lng: vector.longitude,\n      size: vector.size,\n      color: vector.color,\n      label: `E-Field: ${vector.magnitude.toFixed(2)} V/m`,\n      magnitude: vector.magnitude,\n      direction: vector.direction,\n      quality: vector.quality\n    }));\n    \n    // Update the overlay data using the new method\n    globeEngine.updateSpaceWeatherVisualization(spaceWeatherMarkers);\n    \n  }, [globeEngine, visualizationVectors]);\n\n  return (\n    <div ref={containerRef} style={{ height: '100vh', width: '100%', position: 'relative' }}>\n      {/* Overlay Controls Panel (minimizable, repositioned) */}\n      <div\n        style={{\n          position: 'absolute',\n          top: 64, // Adjust as needed to be just below TopBar (assume TopBar is 64px tall)\n          left: 100, // Adjust as needed to be just to the right of LeftSideBar (assume sidebar is 80px wide)\n          zIndex: 20,\n          background: 'rgba(0,0,0,0.7)',\n          color: '#fff',\n          borderRadius: 8,\n          padding: overlayPanelOpen ? 12 : 0,\n          minWidth: overlayPanelOpen ? 260 : 48,\n          minHeight: 32,\n          boxShadow: '0 2px 12px rgba(0,0,0,0.25)',\n          transition: 'all 0.2s',\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: overlayPanelOpen ? 'stretch' : 'center',\n        }}\n      >\n        <button\n          onClick={() => setOverlayPanelOpen((open) => !open)}\n          style={{\n            alignSelf: 'flex-end',\n            background: 'none',\n            border: 'none',\n            color: '#fff',\n            cursor: 'pointer',\n            fontWeight: 'bold',\n            fontSize: 18,\n            margin: 4,\n            padding: 2,\n            borderRadius: 4,\n            transition: 'background 0.2s',\n            minWidth: 32,\n          }}\n          aria-label={overlayPanelOpen ? 'Minimize overlay controls' : 'Expand overlay controls'}\n        >\n          {overlayPanelOpen ? '−' : '+'}\n        </button>\n        {overlayPanelOpen && (\n          <>\n            <div style={{ fontWeight: 'bold', marginBottom: 8 }}>Overlays</div>\n            {availableOverlays.map((overlay) => (\n              <div key={overlay} style={{ display: 'flex', alignItems: 'center', marginBottom: 4 }}>\n                <label\n                  style={{ flex: 1, display: 'flex', alignItems: 'center' }}\n                  data-tooltip-id={`tip-${overlay}`}\n                  data-tooltip-content={OVERLAY_LEGEND[overlay]?.description}\n                  aria-label={`Toggle ${OVERLAY_LEGEND[overlay]?.label || overlay} overlay`}\n                >\n                  <input\n                    type=\"checkbox\"\n                    checked={activeOverlays.includes(overlay)}\n                    onChange={() => handleOverlayToggle(overlay)}\n                    style={{ marginRight: 6 }}\n                    aria-checked={activeOverlays.includes(overlay)}\n                    aria-label={`Toggle ${OVERLAY_LEGEND[overlay]?.label || overlay} overlay`}\n                  />\n                  <span style={{ color: OVERLAY_LEGEND[overlay]?.color || '#fff', fontWeight: 500 }}>\n                    {OVERLAY_LEGEND[overlay]?.label || overlay}\n                  </span>\n                </label>\n                <Tooltip id={`tip-${overlay}`} place=\"left\" />\n                <span style={{ fontSize: 12, marginLeft: 8 }}>\n                  {overlayStatus[overlay]?.loading ? 'Loading...' : overlayStatus[overlay]?.error ? 'Error' : overlayStatus[overlay]?.count !== undefined ? `(${overlayStatus[overlay]?.count})` : ''}\n                </span>\n                {/* Manual refresh for overlays with periodic updates */}\n                {PERIODIC_OVERLAYS.includes(overlay) && activeOverlays.includes(overlay) && (\n                  <button\n                    style={{ marginLeft: 8, fontSize: 12, padding: '2px 6px', borderRadius: 4, border: 'none', background: '#444', color: '#fff', cursor: 'pointer' }}\n                    onClick={() => handleOverlayRefresh(overlay)}\n                    aria-label={`Refresh ${OVERLAY_LEGEND[overlay]?.label || overlay} overlay now`}\n                    title=\"Refresh now\"\n                  >\n                    ⟳\n                  </button>\n                )}\n                {/* Last updated timestamp for overlays with periodic updates */}\n                {PERIODIC_OVERLAYS.includes(overlay) && overlayLastUpdated[overlay] && (\n                  <span style={{ fontSize: 10, color: '#aaa', marginLeft: 6 }} aria-label={`Last updated for ${OVERLAY_LEGEND[overlay]?.label || overlay}`}>\n                    {new Date(overlayLastUpdated[overlay]).toLocaleTimeString()}\n                  </span>\n                )}\n                <button\n                  style={{ marginLeft: 8, fontSize: 12, padding: '2px 6px', borderRadius: 4, border: 'none', background: '#333', color: '#fff', cursor: 'pointer' }}\n                  onClick={() => setInspectOverlay(overlay)}\n                  disabled={!overlayData[overlay] || overlayStatus[overlay]?.loading}\n                  title=\"Inspect overlay data\"\n                  aria-label={`Inspect ${OVERLAY_LEGEND[overlay]?.label || overlay} data`}\n                >\n                  Inspect\n                </button>\n              </div>\n            ))}\n            <div style={{ marginTop: 12, borderTop: '1px solid #444', paddingTop: 8 }}>\n              <button\n                onClick={() => setLegendOpen((open) => !open)}\n                style={{\n                  display: 'flex', alignItems: 'center', marginBottom: 8, background: 'none', border: 'none', color: '#fff', cursor: 'pointer', fontWeight: 'bold', fontSize: 15\n                }}\n                aria-label={legendOpen ? 'Hide overlay legend' : 'Show overlay legend'}\n              >\n                {legendOpen ? '▼ Legend' : '▲ Legend'}\n              </button>\n              {legendOpen && (\n                <div>\n                  {availableOverlays.map((overlay) => (\n                    <div\n                      key={overlay}\n                      style={{ display: 'flex', alignItems: 'center', marginBottom: 4 }}\n                      data-tooltip-id={`legend-tip-${overlay}`}\n                      data-tooltip-content={OVERLAY_LEGEND[overlay]?.description}\n                    >\n                      <span style={{ width: 14, height: 14, background: OVERLAY_LEGEND[overlay]?.color || '#fff', borderRadius: 3, display: 'inline-block', marginRight: 8 }} />\n                      <span style={{ fontWeight: 500 }}>{OVERLAY_LEGEND[overlay]?.label || overlay}</span>\n                      <span style={{ fontSize: 12, color: '#aaa', marginLeft: 8 }}>{OVERLAY_LEGEND[overlay]?.description}</span>\n                      <Tooltip id={`legend-tip-${overlay}`} place=\"left\" />\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          </>\n        )}\n      </div>\n      {/* Overlay Data Inspection Modal (artifact-driven, see globe-overlays.artifact UI/UX guidelines) */}\n      <Modal\n        isOpen={!!inspectOverlay}\n        onRequestClose={() => setInspectOverlay(null)}\n        contentLabel=\"Overlay Data Inspector\"\n        style={{\n          content: {\n            top: '50%', left: '50%', right: 'auto', bottom: 'auto', marginRight: '-50%', transform: 'translate(-50%, -50%)',\n            background: '#222', color: '#fff', borderRadius: 8, padding: 24, minWidth: 400, maxHeight: '80vh', overflowY: 'auto',\n          },\n          overlay: { backgroundColor: 'rgba(0,0,0,0.7)' },\n        }}\n        ariaHideApp={false}\n        aria-modal=\"true\"\n        aria-label=\"Overlay Data Inspector\"\n      >\n        <h3 style={{ marginTop: 0 }}>{inspectOverlay && OVERLAY_LEGEND[inspectOverlay]?.label} Data</h3>\n        <button onClick={() => setInspectOverlay(null)} style={{ position: 'absolute', top: 16, right: 16, background: 'none', color: '#fff', border: 'none', fontSize: 18, cursor: 'pointer' }} aria-label=\"Close overlay data inspector\">×</button>\n        {inspectOverlay && overlayStatus[inspectOverlay]?.loading && <div>Loading...</div>}\n        {inspectOverlay && overlayStatus[inspectOverlay]?.error && <div style={{ color: 'red' }}>Error: {overlayStatus[inspectOverlay]?.error}</div>}\n        {inspectOverlay && overlayData[inspectOverlay] && overlayData[inspectOverlay].length > 0 ? (\n          <>\n            <table style={{ width: '100%', fontSize: 13, background: '#222', color: '#fff', borderCollapse: 'collapse' }}>\n              <thead>\n                <tr>\n                  {inspectOverlay && Object.keys(overlayData[inspectOverlay][0]).map((key) => (\n                    <th key={key} style={{ borderBottom: '1px solid #444', textAlign: 'left', padding: 4 }}>{key}</th>\n                  ))}\n                </tr>\n              </thead>\n              <tbody>\n                {inspectOverlay && overlayData[inspectOverlay].slice(modalPage * MODAL_PAGE_SIZE, (modalPage + 1) * MODAL_PAGE_SIZE).map((row, i) => (\n                  <tr key={i}>\n                    {Object.values(row).map((val, j) => (\n                      <td key={j} style={{ borderBottom: '1px solid #333', padding: 4 }}>{typeof val === 'object' ? JSON.stringify(val) : String(val)}</td>\n                    ))}\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n            {/* Pagination controls (artifact-driven, see globe-overlays.artifact UI/UX guidelines) */}\n            {overlayData[inspectOverlay].length > MODAL_PAGE_SIZE && (\n              <div style={{ marginTop: 12, display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                <button\n                  onClick={() => setModalPage((p) => Math.max(0, p - 1))}\n                  disabled={modalPage === 0}\n                  style={{ marginRight: 8, padding: '2px 8px', borderRadius: 4, border: 'none', background: '#333', color: '#fff', cursor: modalPage === 0 ? 'not-allowed' : 'pointer' }}\n                >\n                  Prev\n                </button>\n                <span style={{ fontSize: 13 }}>\n                  Page {modalPage + 1} of {Math.ceil(overlayData[inspectOverlay].length / MODAL_PAGE_SIZE)}\n                </span>\n                <button\n                  onClick={() => setModalPage((p) => p + 1)}\n                  disabled={(modalPage + 1) * MODAL_PAGE_SIZE >= overlayData[inspectOverlay].length}\n                  style={{ marginLeft: 8, padding: '2px 8px', borderRadius: 4, border: 'none', background: '#333', color: '#fff', cursor: (modalPage + 1) * MODAL_PAGE_SIZE >= overlayData[inspectOverlay].length ? 'not-allowed' : 'pointer' }}\n                >\n                  Next\n                </button>\n              </div>\n            )}\n          </>\n        ) : (\n          inspectOverlay && !overlayStatus[inspectOverlay]?.loading && !overlayStatus[inspectOverlay]?.error && <div>No data.</div>\n        )}\n      </Modal>\n      <Globe\n        ref={globeRef}\n        width={containerSize.width}\n        height={containerSize.height}\n        pointsData={globeData.filter((d: { lat?: number; lng?: number }) => d.lat !== undefined && d.lng !== undefined)}\n        pointAltitude={(d: { size?: number }) => d.size || 0.5}\n        pointColor={(d: { type?: string; color?: string }) => {\n          if (d.type === 'intel') return 'orange';\n          if (d.type === 'earthquake') return 'red';\n          if (d.type === 'volcano') return 'purple';\n          if (d.type === 'cyber') return 'cyan';\n          if (d.type === 'system') return 'yellow';\n          if (d.type === 'storm') return 'blue';\n          if (d.type === 'cloud') return 'gray';\n          return d.color || 'white';\n        }}\n        globeMaterial={material || undefined}\n        onGlobeClick={handleGlobeClick}\n        // ...existing Globe props...\n      />\n      {/* Borders and territories overlays would be attached to the Three.js scene here in a custom renderer or with react-three-fiber */}\n    </div>\n  );\n};\n\nexport default GlobeView;\n// AI-NOTE: Refactored to use GlobeEngine. See globe-engine-api.artifact for integration details.\n// Artifact references:\n// - Overlay UI/UX: globe-overlays.artifact (UI/UX Guidelines)\n// - Overlay logic: globe-engine-api.artifact, globe-modes.artifact","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Handlers/GlobeDataProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Handlers/GlobeEventHandler.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Handlers/GlobeLayerManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Hooks/useGlobeData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Hooks/useGlobeInteraction.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/Hooks/useGlobeLayerControl.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/shaders/globeShaders.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Globe/visualizationConfig.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Bars/BottomBar/BottomBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Bars/LeftSideBar/LeftSideBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Bars/LeftSideBar/ModeSettingsPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Bars/RightSideBar/RightSideBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Bars/TopBar/EnhancedSettingsPopup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Bars/TopBar/Marquee.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Bars/TopBar/Marquee.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Bars/TopBar/SettingsPopup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Bars/TopBar/TopBar.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Bars/TopBar/TopBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Bars/TopBar/topbarCategories.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Bars/TopBar/useTopBarData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Bars/TopBar/useTopBarPreferences.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Corners/BottomLeft/BottomLeft.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Corners/BottomRight/BottomRight.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Corners/BottomRight/IntelReportFormData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Corners/BottomRight/MapSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Corners/BottomRight/MapSelectorPopup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Corners/BottomRight/SubmitIntelReportPopup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Corners/TopLeft/TopLeft.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Corners/TopRight/TopRight.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/EnergyData/EnergyCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/EnergyData/EnergyChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/EnergyData/EnergyMap.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/MiniMap/MiniMap.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Overlay/Overlay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Settings/CyberCommandSettings/CyberCommandSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Settings/GeoPoliticalSettings/GeoPoliticalSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/Settings/SpaceWeatherSettings/SpaceWeatherSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/TimeScrubber/TimeScrubber.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/HUD/ToolTip/Tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Intel/IntelReportList.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[749,752],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[749,752],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// AI-NOTE: Artifact-driven UI stub for intelligence report list.\n// This component fetches and displays intelligence reports using the secure API stub.\n// See artifacts/intel-report-api-integration.artifact and overlays artifact for integration plan.\n// TODO: Integrate with Solana/secure backend and overlays when live.\n\nimport React, { useEffect, useState } from 'react';\nimport { fetchIntelReports } from '../../api/intelligence';\nimport type { IntelReportOverlayMarker } from '../../interfaces/IntelReportOverlay';\n\nexport const IntelReportList: React.FC = () => {\n  const [reports, setReports] = useState<IntelReportOverlayMarker[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetchIntelReports().then((data: any[]) => {\n      // Map to overlay marker interface\n      const overlayMarkers = data.map((r) => ({\n        pubkey: r.pubkey || '',\n        title: r.title || r.label || '',\n        content: r.content || '',\n        tags: r.tags || [],\n        latitude: r.lat ?? r.latitude ?? 0,\n        longitude: r.long ?? r.longitude ?? 0,\n        timestamp: r.timestamp || Date.parse(r.date || '') || 0,\n        author: r.author || '',\n      }));\n      setReports(overlayMarkers);\n      setLoading(false);\n    });\n  }, []);\n\n  if (loading) return <div>Loading intelligence reports...</div>;\n  if (reports.length === 0) return <div>No intelligence reports found.</div>;\n\n  return (\n    <div>\n      <h2>Intelligence Reports</h2>\n      <ul>\n        {reports.map((report, idx) => (\n          <li key={report.pubkey || idx}>\n            <strong>{report.title}</strong> — {report.tags.join(', ')}<br />\n            <em>{report.content}</em><br />\n            <span>Location: {report.latitude}, {report.longitude}</span><br />\n            <span>Author: {report.author}</span>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Intel/IntelReportViewer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Intel/overlays/IntelOverlay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/IntelOverlay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/IntelReportList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Marketplace/ListReportForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Marketplace/MarketTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Marketplace/MarketplaceDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[230,233],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[230,233],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { fetchMarketData } from '../../api/market';\nimport MarketTable from './MarketTable';\n\nconst MarketplaceDashboard: React.FC = () => {\n  const [, setMarketData] = useState<any[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const loadMarketData = async () => {\n      try {\n        setIsLoading(true);\n        const data = await fetchMarketData();\n        setMarketData(data);\n      } catch (err) {\n        setError('Failed to fetch market data.');\n        console.error(err);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadMarketData();\n  }, []);\n\n  if (isLoading) {\n    return <div>Loading market data...</div>;\n  }\n\n  if (error) {\n    return <div>Error: {error}</div>;\n  }\n\n  return (\n    <div className=\"marketplace-dashboard\">\n      <h1 className=\"text-2xl font-bold mb-4\">Marketplace Dashboard</h1>\n      <MarketTable />\n    </div>\n  );\n};\n\nexport default MarketplaceDashboard;","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Marketplace/ReportList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/MintTest.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/SettingsInitializer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/SettingsStatusIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Shared/Button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Shared/Card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Shared/Loader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Shared/Modal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Shared/NetworkInfoBanner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Shared/SessionExpiryCountdown.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Shared/SessionExpiryCountdown.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Shared/Snackbar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/Shared/Tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/SpaceWeather/SpaceWeatherStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/TinyGlobe/TinyGlobe.module.css.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/TinyGlobe/TinyGlobe.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/TinyGlobe/TinyGlobe.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/TinyGlobe/modeMapping.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/components/ui/Card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/context/AuthContext.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/context/AuthContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":176,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":176,"endColumn":21}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'connectWalletHandler', 'isSessionValid', and 'wallet.address'. Either include them or remove the dependency array.","line":137,"column":6,"nodeType":"ArrayExpression","endLine":137,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [connectWalletHandler, isSessionValid, wallet.address]","fix":{"range":[5263,5265],"text":"[connectWalletHandler, isSessionValid, wallet.address]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback, useEffect } from 'react';\nimport { connectToWallet, disconnectWallet, isWalletConnected } from '../utils/wallet';\nimport { switchNetwork } from '../middleware/web3Middleware';\nimport { AuthContext, AuthContextType } from './AuthContext';\nimport { Provider, Signer } from 'ethers';\nimport { verifyMessage } from 'ethers';\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode; value?: AuthContextType }> = ({ children, value }) => {\n  // All hooks and logic must be called unconditionally\n  const [wallet, setWallet] = useState<{\n    provider: Provider | null;\n    address: string | null;\n    signer: Signer | null;\n  }>({ provider: null, address: null, signer: null });\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [connectionStatus, setConnectionStatus] = useState<'idle' | 'connecting' | 'connected' | 'error'>('idle');\n  const [authError, setAuthError] = useState<string | null>(null);\n\n  // SIWE/localStorage session helpers for decentralized login\n  const isSessionValid = useCallback(() => {\n    const auth = JSON.parse(localStorage.getItem('auth') || '{}');\n    if (!auth.signature || auth.expiry < Date.now()) return false;\n    if (!wallet.address) return false;\n    try {\n      const recovered = verifyMessage(`Sign this message to authenticate: ${auth.nonce}`, auth.signature);\n      return recovered.toLowerCase() === wallet.address.toLowerCase();\n    } catch {\n      return false;\n    }\n  }, [wallet.address]);\n\n  const authenticate = useCallback(async (walletOverride?: typeof wallet) => {\n    const w = walletOverride || wallet;\n    if (!w.address || !w.signer) {\n      setAuthError('Wallet not connected');\n      return false;\n    }\n    setAuthError(null);\n    try {\n      const nonce = Math.floor(Math.random() * 1000000).toString();\n      const message = `Sign this message to authenticate: ${nonce}`;\n      const signature = await w.signer.signMessage(message);\n      const recovered = verifyMessage(message, signature);\n      if (recovered.toLowerCase() === w.address.toLowerCase()) {\n        localStorage.setItem('auth', JSON.stringify({ address: w.address, signature, nonce, expiry: Date.now() + 86400000 }));\n        return true;\n      } else {\n        setAuthError('Signature verification failed');\n        return false;\n      }\n    } catch (err) {\n      setAuthError(err instanceof Error ? err.message : 'Authentication failed');\n      return false;\n    }\n  }, [wallet]);\n\n  function logout() {\n    localStorage.removeItem('auth');\n  }\n\n  // Read expected chain ID from environment variable\n  const expectedChainId = Number(import.meta.env.VITE_EXPECTED_CHAIN_ID || 1);\n\n  const connectWalletHandler = useCallback(async () => {\n    console.log('[Auth] connectWalletHandler: start');\n    setIsLoading(true);\n    setError(null);\n    setConnectionStatus('connecting');\n    try {\n      console.log('[Auth] Calling connectToWallet with chainId', expectedChainId);\n      await connectToWallet();\n      console.log('[Auth] Wallet connected');\n      setWallet({ provider: null, address: null, signer: null });\n      // Authenticate using the fresh connection object\n      const authSuccess = await authenticate();\n      if (!authSuccess) {\n        setError('Authentication failed.');\n        setConnectionStatus('error');\n        setIsLoading(false);\n        return;\n      }\n      setConnectionStatus('connected');\n    } catch (error) {\n      console.error('[Auth] connectWalletHandler error:', error);\n      setError(error instanceof Error ? error.message : 'An unknown error occurred.');\n      setConnectionStatus('error');\n    } finally {\n      setIsLoading(false);\n      console.log('[Auth] connectWalletHandler: end');\n    }\n  }, [expectedChainId, authenticate]);\n\n  const disconnectWalletHandler = useCallback(async () => {\n    console.log('[Auth] disconnectWalletHandler: start');\n    setIsLoading(true);\n    setError(null);\n    setConnectionStatus('connecting');\n    try {\n      await disconnectWallet();\n      setWallet({ provider: null, address: null, signer: null });\n      setConnectionStatus('idle');\n      console.log('[Auth] Wallet disconnected');\n    } catch (error) {\n      console.error('[Auth] disconnectWalletHandler error:', error);\n      setError(error instanceof Error ? error.message : 'An unknown error occurred.');\n      setConnectionStatus('error');\n    } finally {\n      setIsLoading(false);\n      console.log('[Auth] disconnectWalletHandler: end');\n    }\n  }, []);\n\n  const switchNetworkHandler = useCallback(async () => {\n    try {\n      await switchNetwork(expectedChainId);\n      setConnectionStatus('connected');\n    } catch (error) {\n      setError(error instanceof Error ? error.message : 'An unknown error occurred.');\n      setConnectionStatus('error');\n    }\n  }, [expectedChainId]);\n\n  useEffect(() => {\n    let didRun = false;\n    const checkConnection = async () => {\n      if (didRun) return;\n      didRun = true;\n      if (!wallet.address && !(!!wallet.address && isSessionValid())) {\n        if (await isWalletConnected()) {\n          await connectWalletHandler();\n        }\n      }\n    };\n    checkConnection();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  let contextValue: AuthContextType = {\n    isAuthenticated: !!wallet.address && isSessionValid(),\n    address: wallet.address,\n    provider: wallet.provider,\n    signer: wallet.signer,\n    connectWallet: connectWalletHandler,\n    disconnectWallet: disconnectWalletHandler,\n    isLoading,\n    error,\n    connectionStatus,\n    switchNetwork: switchNetworkHandler,\n    authenticate,\n    logout,\n    isSessionValid,\n    authError,\n    expectedChainId,\n    expectedNetworkName: `Chain ${expectedChainId}`,\n    setError, // Expose setError for error modal actions\n  };\n\n  // If a value prop is provided (for testing), override the context value\n  if (value) {\n    contextValue = {\n      ...contextValue,\n      ...value,\n      expectedChainId: (value as Partial<typeof contextValue>).expectedChainId ?? expectedChainId,\n      expectedNetworkName: value?.expectedNetworkName ?? `Chain ${expectedChainId}`,\n    };\n  }\n\n  return <AuthContext.Provider value={contextValue}>{children}</AuthContext.Provider>;\n};\n\nexport const TestAuthProvider: React.FC<{ children: React.ReactNode; value: AuthContextType }> = ({ children, value }) => (\n  <AuthContext.Provider value={value}>{children}</AuthContext.Provider>\n);\n\nexport const useAuth = () => {\n  const context = React.useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\n// TODO: Solana wallet context provider in progress. See artifacts/intel-report-stage1-plan.artifact\n// AI-NOTE: EVM/ethers.js version archived in legacy-evm/AuthContext.tsx. Implement Solana logic here.","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/context/DashboardContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'err' is defined but never used.","line":36,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":25},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":53,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":53,"endColumn":26}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useEffect, useState } from 'react';\nimport EIAService from '../services/EIAService';\n\ninterface DashboardContextType {\n    oilPrice: number | null;\n    gasolinePrice: number | null;\n    oilInventory: number | null;\n    naturalGasStorage: number | null;\n    loading: boolean;\n    error: string | null;\n}\n\nconst DashboardContext = createContext<DashboardContextType | undefined>(undefined);\n\nexport const DashboardProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n    const [oilPrice, setOilPrice] = useState<number | null>(null);\n    const [gasolinePrice, setGasolinePrice] = useState<number | null>(null);\n    const [oilInventory, setOilInventory] = useState<number | null>(null);\n    const [naturalGasStorage, setNaturalGasStorage] = useState<number | null>(null);\n    const [loading, setLoading] = useState<boolean>(true);\n    const [error, setError] = useState<string | null>(null);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const [oilPrice, gasolinePrice, oilInventory, naturalGasStorage] = await Promise.all([\n                    EIAService.getLatestOilPrice(),\n                    EIAService.getLatestGasolinePrice(),\n                    EIAService.getLatestOilInventory(),\n                    EIAService.getLatestNaturalGasStorage(),\n                ]);\n                setOilPrice(oilPrice);\n                setGasolinePrice(gasolinePrice);\n                setOilInventory(oilInventory);\n                setNaturalGasStorage(naturalGasStorage);\n            } catch (err) {\n                setError('Failed to fetch data');\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchData();\n    }, []);\n\n    return (\n        <DashboardContext.Provider value={{ oilPrice, gasolinePrice, oilInventory, naturalGasStorage, loading, error }}>\n            {children}\n        </DashboardContext.Provider>\n    );\n};\n\nexport const useDashboard = () => {\n    const context = useContext(DashboardContext);\n    if (!context) throw new Error('useDashboard must be used within DashboardProvider');\n    return context;\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/context/GlobeContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":21,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":21,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/context/GlobeContext.tsx\nimport React, { createContext, useContext, useState, ReactNode } from 'react';\n\ninterface GlobeContextType {\n  focusLocation: { lat: number; lng: number } | null;\n  setFocusLocation: (location: { lat: number; lng: number } | null) => void;\n}\n\nconst GlobeContext = createContext<GlobeContextType | undefined>(undefined);\n\nexport const GlobeProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [focusLocation, setFocusLocation] = useState<{ lat: number; lng: number } | null>(null);\n\n  return (\n    <GlobeContext.Provider value={{ focusLocation, setFocusLocation }}>\n      {children}\n    </GlobeContext.Provider>\n  );\n};\n\nexport const useGlobeContext = () => {\n  const context = useContext(GlobeContext);\n  if (!context) throw new Error('useGlobeContext must be used within a GlobeProvider');\n  return context;\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/context/IntelContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/context/MarketplaceContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":63,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":63,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { fetchMarketData } from '../api/market';\nimport { MarketplaceContextType, MarketData } from '../interfaces/Marketplace';\nimport { handleError } from '../utils/errorHandler';\n\ninterface MarketplaceState {\n  marketData: MarketData[];\n  isLoading: boolean;\n  error: string | null;\n}\n\ntype MarketplaceAction =\n  | { type: 'FETCH_START' }\n  | { type: 'FETCH_SUCCESS'; payload: MarketData[] }\n  | { type: 'FETCH_ERROR'; payload: string };\n\nconst initialState: MarketplaceState = {\n  marketData: [],\n  isLoading: false,\n  error: null,\n};\n\nconst marketplaceReducer = (state: MarketplaceState, action: MarketplaceAction): MarketplaceState => {\n  switch (action.type) {\n    case 'FETCH_START':\n      return { ...state, isLoading: true, error: null };\n    case 'FETCH_SUCCESS':\n      return { ...state, isLoading: false, marketData: action.payload };\n    case 'FETCH_ERROR':\n      return { ...state, isLoading: false, error: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst MarketplaceContext = createContext<MarketplaceContextType | undefined>(undefined);\n\nexport const MarketplaceProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [state, dispatch] = useReducer(marketplaceReducer, initialState);\n\n  const refreshMarketData = async () => {\n    dispatch({ type: 'FETCH_START' });\n    try {\n      const data = await fetchMarketData();\n      dispatch({ type: 'FETCH_SUCCESS', payload: data });\n    } catch (err) {\n      const errorMessage = handleError(err);\n      dispatch({ type: 'FETCH_ERROR', payload: errorMessage });\n    }\n  };\n\n  useEffect(() => {\n    refreshMarketData();\n  }, []);\n\n  return (\n    <MarketplaceContext.Provider value={{ ...state, refreshMarketData }}>\n      {children}\n    </MarketplaceContext.Provider>\n  );\n};\n\nexport const useMarketplace = (): MarketplaceContextType => {\n  const context = useContext(MarketplaceContext);\n  if (!context) {\n    throw new Error('useMarketplace must be used within a MarketplaceProvider');\n  }\n  return context;\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/context/SettingsContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/context/SnackbarContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/context/SpaceWeatherContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":140,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":140,"endColumn":36}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/context/SpaceWeatherContext.tsx\n// AI-NOTE: Context for sharing space weather data and settings across components\n// Bridges the gap between settings, data fetching, and Globe visualization\n\nimport React, { createContext, useContext, ReactNode } from 'react';\nimport { useEcoNaturalSettings } from '../hooks/useEcoNaturalSettings';\nimport { useSpaceWeatherData } from '../hooks/useSpaceWeatherData';\nimport type { ProcessedElectricFieldData, SpaceWeatherAlert } from '../types/spaceWeather';\n\ninterface SpaceWeatherContextType {\n  // Settings\n  settings: ReturnType<typeof useEcoNaturalSettings>['config']['spaceWeather'];\n  updateSettings: ReturnType<typeof useEcoNaturalSettings>['updateSpaceWeather'];\n  isElectricFieldsEnabled: boolean;\n  \n  // Data\n  interMagData: ProcessedElectricFieldData | null;\n  usCanadaData: ProcessedElectricFieldData | null;\n  alerts: SpaceWeatherAlert[];\n  isLoading: boolean;\n  error: string | null;\n  lastUpdated: Date | null;\n  refresh: () => Promise<void>;\n  \n  // Computed values for visualization\n  shouldShowOverlay: boolean;\n  visualizationVectors: Array<{\n    latitude: number;\n    longitude: number;\n    magnitude: number;\n    direction: number;\n    quality: number;\n    intensity: number; // 0-1 based on settings\n    opacity: number;   // 0-1 based on settings\n    color: string;\n    size: number;\n  }>;\n}\n\nconst SpaceWeatherContext = createContext<SpaceWeatherContextType | undefined>(undefined);\n\nexport const SpaceWeatherProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const { \n    config, \n    updateSpaceWeather, \n    isElectricFieldsEnabled,\n    vectorSettings,\n    alertThresholds,\n    dataSettings \n  } = useEcoNaturalSettings();\n  \n  const spaceWeatherData = useSpaceWeatherData({\n    autoRefresh: dataSettings.autoRefresh,\n    refreshInterval: dataSettings.refreshIntervalMs,\n    enableAlerts: config.spaceWeather.showAlerts\n  });\n\n  // Compute visualization vectors based on settings\n  const visualizationVectors = React.useMemo(() => {\n    if (!spaceWeatherData.interMagData && !spaceWeatherData.usCanadaData) return [];\n    \n    const allVectors = [\n      ...(spaceWeatherData.interMagData?.vectors || []),\n      ...(spaceWeatherData.usCanadaData?.vectors || [])\n    ];\n    \n    return allVectors\n      .filter(vector => {\n        // Quality filter\n        if (vector.quality < 3) return false;\n        \n        // Magnitude threshold\n        const magnitudeThreshold = alertThresholds.moderate / 1000; // Convert mV to V\n        return vector.magnitude >= magnitudeThreshold;\n      })\n      .map(vector => {\n        const intensity = Math.min(vector.magnitude / 10, 1); // Normalize to 0-1\n        const scaledIntensity = intensity * vectorSettings.intensity;\n        \n        // Color based on magnitude and alert thresholds\n        let color: string;\n        const magnitudeMv = vector.magnitude * 1000; // Convert V to mV\n        if (magnitudeMv >= alertThresholds.extreme) {\n          color = `rgba(255, 0, 0, ${vectorSettings.opacity})`;\n        } else if (magnitudeMv >= alertThresholds.high) {\n          color = `rgba(255, 165, 0, ${vectorSettings.opacity})`;\n        } else if (magnitudeMv >= alertThresholds.moderate) {\n          color = `rgba(255, 255, 0, ${vectorSettings.opacity})`;\n        } else {\n          color = `rgba(128, 0, 255, ${vectorSettings.opacity})`;\n        }\n        \n        return {\n          latitude: vector.latitude,\n          longitude: vector.longitude,\n          magnitude: vector.magnitude,\n          direction: vector.direction,\n          quality: vector.quality,\n          intensity: scaledIntensity,\n          opacity: vectorSettings.opacity,\n          color,\n          size: Math.min(Math.max(scaledIntensity * config.spaceWeather.vectorScale, 0.1), 2.0)\n        };\n      });\n  }, [\n    spaceWeatherData.interMagData, \n    spaceWeatherData.usCanadaData, \n    vectorSettings, \n    alertThresholds, \n    config.spaceWeather.vectorScale\n  ]);\n\n  const contextValue: SpaceWeatherContextType = {\n    // Settings\n    settings: config.spaceWeather,\n    updateSettings: updateSpaceWeather,\n    isElectricFieldsEnabled,\n    \n    // Data\n    interMagData: spaceWeatherData.interMagData,\n    usCanadaData: spaceWeatherData.usCanadaData,\n    alerts: spaceWeatherData.alerts,\n    isLoading: spaceWeatherData.isLoading,\n    error: spaceWeatherData.error,\n    lastUpdated: spaceWeatherData.lastUpdated,\n    refresh: spaceWeatherData.refresh,\n    \n    // Computed\n    shouldShowOverlay: isElectricFieldsEnabled,\n    visualizationVectors\n  };\n\n  return (\n    <SpaceWeatherContext.Provider value={contextValue}>\n      {children}\n    </SpaceWeatherContext.Provider>\n  );\n};\n\nexport const useSpaceWeatherContext = () => {\n  const context = useContext(SpaceWeatherContext);\n  if (!context) {\n    throw new Error('useSpaceWeatherContext must be used within a SpaceWeatherProvider');\n  }\n  return context;\n};\n\nexport default SpaceWeatherProvider;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/context/TimeDataProvider.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":90,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":90,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useEffect, useRef, useCallback, ReactNode } from 'react';\nimport { fetchHistoricalData } from '../utils/fetchHistoricalData'; // Moved `fetchHistoricalData` to a separate file\n\ninterface TimeDataContextProps {\n  currentTime: number;\n  isLive: boolean;\n  setCurrentTime: (time: number) => void;\n  toggleLive: () => void;\n  fetchDataForTime: (time: number) => Promise<void>;\n  error: string | null;\n}\n\ninterface CacheEntry {\n  timestamp: number;\n  data: Array<{ lat: number; lng: number; size: number; color: string; timestamp: number }>;\n}\n\nconst TimeDataContext = createContext<TimeDataContextProps | undefined>(undefined);\n\nexport const TimeDataProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [currentTime, setCurrentTime] = useState<number>(Date.now());\n  const [isLive, setIsLive] = useState<boolean>(true);\n  const [dataCache, setDataCache] = useState<Map<number, CacheEntry>>(new Map());\n  const [error, setError] = useState<string | null>(null);\n  const lastUpdateTimeRef = useRef<number>(0);\n\n  const toggleLive = () => {\n    setIsLive(!isLive);\n    if (!isLive) setCurrentTime(Date.now());\n  };\n\n  const fetchDataForTime = useCallback(\n    async (time: number): Promise<void> => {\n      if (dataCache.has(time)) return;\n\n      try {\n        setError(null);\n        const data = await fetchHistoricalData(time);\n        setDataCache((prev) => {\n          const newCache = new Map(prev);\n          newCache.set(time, { timestamp: Date.now(), data });\n\n          // Evict older entries (LRU logic)\n          if (newCache.size > 100) {\n            const oldestKey = Array.from(newCache.keys())[0];\n            newCache.delete(oldestKey);\n          }\n\n          return newCache;\n        });\n      } catch (err) {\n        console.error('Error fetching data:', err);\n        setError('Failed to fetch data for the selected time.');\n      }\n    },\n    [dataCache]\n  );\n\n  useEffect(() => {\n    if (!isLive) return;\n\n    const interval = setInterval(() => {\n      const now = Date.now();\n      if (now - lastUpdateTimeRef.current >= 5000) {\n        setCurrentTime(now);\n        fetchDataForTime(now);\n        lastUpdateTimeRef.current = now;\n      }\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [isLive, fetchDataForTime]);\n\n  return (\n    <TimeDataContext.Provider\n      value={{\n        currentTime,\n        isLive,\n        setCurrentTime,\n        toggleLive,\n        fetchDataForTime,\n        error,\n      }}\n    >\n      {children}\n    </TimeDataContext.Provider>\n  );\n};\n\nexport const useTimeData = () => {\n  const context = useContext(TimeDataContext);\n  if (!context) throw new Error('useTimeData must be used within a TimeDataProvider');\n  return context;\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/context/UCDPContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":4,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[116,119],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[116,119],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[168,171],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[168,171],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":16,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":16,"endColumn":21}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useState, useContext, ReactNode } from 'react';\n\ninterface UCDPContextType {\n  data: any;\n  setData: React.Dispatch<React.SetStateAction<any>>;\n}\n\nconst UCDPContext = createContext<UCDPContextType | undefined>(undefined);\n\nexport const UCDPProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [data, setData] = useState(null);\n\n  return <UCDPContext.Provider value={{ data, setData }}>{children}</UCDPContext.Provider>;\n};\n\nexport const useUCDP = () => {\n  const context = useContext(UCDPContext);\n  if (!context) throw new Error('useUCDP must be used within a UCDPProvider');\n  return context;\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/context/VisualizationModeContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":93,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":93,"endColumn":34}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createContext, useContext, useState, useEffect } from 'react';\nimport { settingsStorage } from '../utils/settingsStorage';\n\n// Extend VisualizationMode to include sub-modes\nexport type VisualizationMode =\n  | { mode: 'CyberCommand'; subMode: 'IntelReports' | 'Timelines' | 'CrisisZones' }\n  | { mode: 'GeoPolitical'; subMode: 'NationalTerritories' | 'DiplomaticEvents' | 'ResourceZones' }\n  | { mode: 'EcoNatural'; subMode: 'SpaceWeather' | 'EcologicalDisasters' | 'EarthWeather' };\n\n// Interface for tracking last selected submode for each primary mode\ninterface LastSelectedSubmodes {\n  CyberCommand: 'IntelReports' | 'Timelines' | 'CrisisZones';\n  GeoPolitical: 'NationalTerritories' | 'DiplomaticEvents' | 'ResourceZones';\n  EcoNatural: 'SpaceWeather' | 'EcologicalDisasters' | 'EarthWeather';\n}\n\n// Default visualization mode and submodes\nconst DEFAULT_MODE: VisualizationMode = { mode: 'CyberCommand', subMode: 'IntelReports' };\nconst DEFAULT_SUBMODES: LastSelectedSubmodes = {\n  CyberCommand: 'IntelReports',\n  GeoPolitical: 'NationalTerritories',\n  EcoNatural: 'SpaceWeather'\n};\n\n// Storage keys for persistence\nconst VISUALIZATION_MODE_STORAGE_KEY = 'visualization-mode';\nconst LAST_SUBMODES_STORAGE_KEY = 'last-selected-submodes';\n\n// Create a context for VisualizationMode\ninterface VisualizationModeContextProps {\n  visualizationMode: VisualizationMode;\n  setVisualizationMode: (mode: VisualizationMode) => void;\n  setPrimaryMode: (mode: 'CyberCommand' | 'GeoPolitical' | 'EcoNatural') => void;\n  resetVisualizationMode: () => void;\n}\n\nconst VisualizationModeContext = createContext<VisualizationModeContextProps | undefined>(undefined);\n\n// Provider component\nexport const VisualizationModeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  // Initialize with persisted values or defaults\n  const [visualizationMode, setVisualizationModeState] = useState<VisualizationMode>(() => {\n    return settingsStorage.loadSettings(VISUALIZATION_MODE_STORAGE_KEY, DEFAULT_MODE);\n  });\n\n  const [lastSelectedSubmodes, setLastSelectedSubmodesState] = useState<LastSelectedSubmodes>(() => {\n    return settingsStorage.loadSettings(LAST_SUBMODES_STORAGE_KEY, DEFAULT_SUBMODES);\n  });\n\n  // Enhanced setter that also persists to storage\n  const setVisualizationMode = (mode: VisualizationMode) => {\n    setVisualizationModeState(mode);\n    settingsStorage.saveSettings(VISUALIZATION_MODE_STORAGE_KEY, mode);\n    \n    // Update the last selected submode for this primary mode\n    setLastSelectedSubmodesState(prev => {\n      const updated = { ...prev, [mode.mode]: mode.subMode };\n      settingsStorage.saveSettings(LAST_SUBMODES_STORAGE_KEY, updated);\n      return updated;\n    });\n  };\n\n  // New function to set primary mode while preserving last selected submode\n  const setPrimaryMode = (mode: 'CyberCommand' | 'GeoPolitical' | 'EcoNatural') => {\n    const lastSubMode = lastSelectedSubmodes[mode];\n    const newVisualizationMode = { mode, subMode: lastSubMode } as VisualizationMode;\n    setVisualizationMode(newVisualizationMode);\n  };\n\n  const resetVisualizationMode = () => {\n    setVisualizationMode(DEFAULT_MODE);\n    setLastSelectedSubmodesState(DEFAULT_SUBMODES);\n    settingsStorage.saveSettings(LAST_SUBMODES_STORAGE_KEY, DEFAULT_SUBMODES);\n  };\n\n  useEffect(() => {\n    console.log(`📊 VisualizationMode changed to: ${visualizationMode.mode}, SubMode: ${visualizationMode.subMode}`);\n  }, [visualizationMode]);\n\n  return (\n    <VisualizationModeContext.Provider value={{ \n      visualizationMode, \n      setVisualizationMode, \n      setPrimaryMode,\n      resetVisualizationMode \n    }}>\n      {children}\n    </VisualizationModeContext.Provider>\n  );\n};\n\n// Hook to use the VisualizationMode context\nexport const useVisualizationMode = () => {\n  const context = useContext(VisualizationModeContext);\n  if (!context) {\n    throw new Error('useVisualizationMode must be used within a VisualizationModeProvider');\n  }\n  return context;\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/context/WASMContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[264,267],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[264,267],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":51,"column":24,"nodeType":"Identifier","messageId":"namedExport","endLine":51,"endColumn":31}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { initializeWASM, fetchFromMiniServer as fetchFromWASM } from \"../utils/wasm\";\n\ninterface WASMContextType {\n  wasmReady: boolean;\n  fetchFromMiniServer: (url: string) => Promise<any>;\n}\n\nconst WASMContext = createContext<WASMContextType | undefined>(undefined);\n\ninterface WASMProviderProps {\n  children: React.ReactNode;\n}\n\nlet wasmInitializationPromise: Promise<void> | null = null;\n\nconst WASMProvider: React.FC<WASMProviderProps> = ({ children }) => {\n  const [wasmReady, setWasmReady] = useState(false);\n\n  useEffect(() => {\n    if (!wasmInitializationPromise) {\n      wasmInitializationPromise = initializeWASM().then(() => {\n        setWasmReady(true);\n      });\n    } else {\n      wasmInitializationPromise.then(() => {\n        setWasmReady(true);\n      });\n    }\n  }, []);\n\n  const fetchFromMiniServer = async (url: string) => {\n    return await fetchFromWASM(url);\n  };\n\n  return (\n    <WASMContext.Provider value={{ wasmReady, fetchFromMiniServer }}>\n      {children}\n    </WASMContext.Provider>\n  );\n};\n\nconst useWASM = () => {\n  const context = useContext(WASMContext);\n  if (!context) {\n    throw new Error(\"useWASM must be used within a WASMProvider\");\n  }\n  return context;\n};\n\nexport { WASMProvider, useWASM, WASMContext };","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/contracts/IntelligenceMarket.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/globe-engine/GlobeEngine.spaceWeather.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/globe-engine/GlobeEngine.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_lat' is defined but never used.","line":8,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_lng' is defined but never used.","line":8,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":46}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// GlobeEngine.test.ts\n// Artifact-driven tests for GlobeEngine (see globe-testing-plan.artifact, globe-engine-api.artifact, globe-overlays.artifact)\nimport { GlobeEngine } from './GlobeEngine';\nimport { vi } from 'vitest';\n\n// Mock API services for artifact-driven integration tests\nvi.mock('../services/WeatherDataService', () => ({\n  fetchWeatherData: async (_lat: number, _lng: number) => ({\n    // _lat and _lng are intentionally unused for mock\n    location: 'Test City',\n    temperature: 20,\n    description: 'Clear',\n    windSpeed: 5,\n    humidity: 50,\n  })\n}));\nvi.mock('../services/GeoEventsService', () => ({\n  fetchNaturalEvents: async () => ([\n    { id: 1, lat: 0, lng: 0, type: 'earthquake', magnitude: 5.5 },\n    { id: 2, lat: 10, lng: 10, type: 'volcano', status: 'active' }\n  ])\n}));\nvi.mock('../services/SpaceAssetsService', () => ({\n  fetchSpaceAssets: async () => ([\n    { id: 1, lat: 0, lng: 0, type: 'satellite', name: 'ISS', altitude: 400 },\n    { id: 2, lat: 45, lng: 90, type: 'debris', name: 'Debris-123', altitude: 800 }\n  ])\n}));\n// Mock fetch for borders/territories overlays\n(globalThis as unknown as { fetch: () => Promise<{ json: () => Promise<{ features: unknown[] }> }> }).fetch = async () => ({\n  json: async () => ({\n    features: [\n      { properties: { name: 'TestBorder' }, geometry: { type: 'LineString', coordinates: [[0,0],[1,1]] } },\n      { properties: { name: 'TestTerritory' }, geometry: { type: 'Polygon', coordinates: [[[0,0],[1,1],[1,0],[0,0]]] } }\n    ]\n  })\n});\n\ndescribe('GlobeEngine Overlay Logic', () => {\n  it('should add overlays and cache overlay data', async () => {\n    const engine = new GlobeEngine({ mode: 'CyberCommand' });\n    engine.addOverlay('alerts');\n    await new Promise((resolve) => setTimeout(resolve, 600));\n    const data = engine.getOverlayData('alerts');\n    expect(Array.isArray(data)).toBe(true);\n    // Add again, should use cache\n    engine.removeOverlay('alerts');\n    engine.addOverlay('alerts');\n    expect(engine.getOverlayData('alerts')).toEqual(data);\n  });\n\n  it('should reset overlays to mode defaults on setMode', async () => {\n    const engine = new GlobeEngine({ mode: 'CyberCommand' });\n    engine.addOverlay('weather');\n    engine.setMode('EcoNatural');\n    await new Promise((resolve) => setTimeout(resolve, 600));\n    const overlays = engine.getOverlays();\n    expect(overlays).toContain('weather');\n    expect(overlays).toContain('naturalEvents');\n    expect(overlays).toContain('markers');\n    expect(overlays).not.toContain('alerts');\n  });\n\n  it('should emit overlayDataUpdated event', async () => {\n    const engine = new GlobeEngine({ mode: 'CyberCommand' });\n    await new Promise<void>((resolve) => {\n      engine.on('overlayDataUpdated', ({ payload }) => {\n        if (payload && typeof payload === 'object' && (payload as { overlay?: string }).overlay === 'alerts') {\n          expect((payload as { data?: unknown }).data).toBeDefined();\n          resolve();\n        }\n      });\n      engine.addOverlay('alerts');\n    });\n  });\n});\n\ndescribe('GlobeEngine Integration (artifact-driven)', () => {\n  it('should fetch and cache overlay data for weather and naturalEvents (mocked)', async () => {\n    const engine = new GlobeEngine({ mode: 'EcoNatural' });\n    engine.addOverlay('weather');\n    engine.addOverlay('naturalEvents');\n    await new Promise((resolve) => setTimeout(resolve, 700));\n    const weather = engine.getOverlayData('weather');\n    const events = engine.getOverlayData('naturalEvents');\n    expect(Array.isArray(weather)).toBe(true);\n    expect(Array.isArray(events)).toBe(true);\n    engine.removeOverlay('weather');\n    engine.addOverlay('weather');\n    expect(engine.getOverlayData('weather')).toEqual(weather);\n  });\n\n  it('should allow toggling overlays and emit correct events', () => {\n    const engine = new GlobeEngine({ mode: 'GeoPolitical' });\n    let addCount = 0;\n    let removeCount = 0;\n    engine.on('overlayAdded', () => {\n      addCount++;\n    });\n    engine.on('overlayRemoved', () => {\n      removeCount++;\n    });\n    engine.addOverlay('borders');\n    engine.removeOverlay('borders');\n    engine.addOverlay('borders');\n    expect(addCount).toBeGreaterThanOrEqual(2);\n    expect(removeCount).toBeGreaterThanOrEqual(1);\n  });\n\n  it('should fetch and cache overlay data for spaceAssets (mocked)', async () => {\n    const engine = new GlobeEngine({ mode: 'CyberCommand' });\n    engine.addOverlay('spaceAssets');\n    await new Promise((resolve) => setTimeout(resolve, 600));\n    const data = engine.getOverlayData('spaceAssets');\n    expect(Array.isArray(data)).toBe(true);\n    expect((data as { type?: string }[])[0]?.type).toBe('satellite');\n  });\n\n  it('should emit overlayDataLoading and overlayDataError for spaceAssets', async () => {\n    const spy = vi.spyOn(await import('../services/SpaceAssetsService'), 'fetchSpaceAssets').mockRejectedValue(new Error('Test error'));\n    const engine = new GlobeEngine({ mode: 'CyberCommand' });\n    let loading = false;\n    let error = false;\n    engine.on('overlayDataLoading', ({ payload }) => {\n      if ((payload as { overlay?: string })?.overlay === 'spaceAssets') loading = true;\n    });\n    engine.on('overlayDataError', ({ payload }) => {\n      if ((payload as { overlay?: string; error?: string })?.overlay === 'spaceAssets' && (payload as { error?: string }).error === 'Test error') error = true;\n    });\n    engine.addOverlay('spaceAssets');\n    await new Promise((resolve) => setTimeout(resolve, 600));\n    expect(loading).toBe(true);\n    expect(error).toBe(true);\n    spy.mockRestore();\n  });\n\n  it('should periodically update spaceAssets overlay (artifact-driven, fake timers)', async () => {\n    vi.useFakeTimers();\n    const engine = new GlobeEngine({ mode: 'CyberCommand' });\n    let updateCount = 0;\n    engine.on('overlayDataUpdated', ({ payload }) => {\n      if ((payload as { overlay?: string })?.overlay === 'spaceAssets') updateCount++;\n    });\n    engine.addOverlay('spaceAssets');\n    // Initial fetch\n    await vi.runOnlyPendingTimersAsync();\n    // Simulate 2 more intervals (2 minutes)\n    await vi.advanceTimersByTimeAsync(120000);\n    expect(updateCount).toBeGreaterThanOrEqual(2);\n    // Clean up interval\n    engine.removeOverlay('spaceAssets');\n    vi.useRealTimers();\n  });\n});\n// Artifact references:\n// - Test plan: globe-testing-plan.artifact\n// - Overlay API/events: globe-engine-api.artifact, globe-overlays.artifact\n","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/globe-engine/GlobeEngine.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ProcessedElectricFieldData' is defined but never used.","line":20,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":41},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":265,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":265,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10865,10868],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10865,10868],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// GlobeEngine.ts\n// AI-NOTE: See globe-engine-architecture.artifact and globe-engine-api.artifact for design and API rationale.\n\n/**\n * GlobeEngine: Central class for creating and managing globe instances (main, tiny, etc.)\n * - Handles mode, overlays, shaders, textures, and integration with Starcom context.\n * - See globe-engine-api.artifact for API and integration details.\n */\n\nimport { GlobeModeMapping } from './GlobeModeMapping';\nimport { GlobeTextureLoader } from './GlobeTextureLoader';\nimport { GlobeMaterialManager } from './GlobeMaterialManager';\nimport * as THREE from 'three';\nimport { fetchWeatherData } from '../services/WeatherDataService';\nimport { fetchAlerts } from '../services/AlertsService';\nimport { fetchNaturalEvents } from '../services/GeoEventsService';\nimport { fetchSpaceAssets } from '../services/SpaceAssetsService';\nimport { fetchLatestElectricFieldData, transformNOAAToIntelMarkers } from '../services/noaaSpaceWeather';\nimport type { IntelReportOverlayMarker } from '../interfaces/IntelReportOverlay';\nimport type { ProcessedElectricFieldData } from '../types/spaceWeather';\n\nexport type GlobeEvent = { type: string; payload?: unknown };\n\nexport interface GlobeEngineConfig {\n  /**\n   * Initial globe mode (see globe-modes.artifact)\n   */\n  mode: string;\n  /**\n   * Initial overlays (see globe-overlays.artifact)\n   */\n  overlays?: string[];\n  /**\n   * Event callback (see globe-engine-api.artifact)\n   */\n  onEvent?: (event: GlobeEvent) => void;\n}\n\nexport class GlobeEngine {\n  private mode: string;\n  private overlays: string[];\n  private material: THREE.Material | null = null;\n  private eventHandlers: Record<string, ((event: GlobeEvent) => void)[]> = {};\n  private overlayData: Record<string, unknown> = {};\n  // Overlay data cache (see globe-overlays.artifact, UI/UX guidelines)\n  private overlayDataCache: Record<string, unknown> = {};\n  private spaceAssetsInterval: NodeJS.Timeout | null = null; // For periodic updates\n  private spaceWeatherInterval: NodeJS.Timeout | null = null; // For space weather updates\n\n  constructor(config: GlobeEngineConfig) {\n    this.mode = config.mode;\n    this.overlays = config.overlays || [];\n    if (config.onEvent) {\n      // Register the event handler for all event types\n      this.on('overlayDataLoading', config.onEvent);\n      this.on('overlayDataUpdated', config.onEvent);\n      this.on('overlayDataError', config.onEvent);\n      this.on('overlayAdded', config.onEvent);\n      this.on('overlayRemoved', config.onEvent);\n    }\n    // Async init\n    this.init();\n  }\n\n  private async init() {\n    // AI-NOTE: See globe-mode-mapping-reference.artifact, globe-modes.artifact, globe-shaders.artifact, globe-textures.artifact\n    const renderConfig = GlobeModeMapping.getRenderConfigForMode(this.mode);\n    const textureNames = [renderConfig.texture, 'blueMarble', 'earthDay', 'earthDark'];\n    const textures: Record<string, THREE.Texture> = {};\n    for (const name of textureNames) {\n      textures[`${name}Texture`] = await GlobeTextureLoader.loadTexture(name);\n    }\n    this.material = GlobeMaterialManager.getMaterialForMode(renderConfig.shader, textures);\n    // TODO: Initialize overlays\n    // If spaceAssets overlay is active, start periodic updates (artifact-driven, see globe-overlays.artifact)\n    if (this.overlays.includes('spaceAssets')) {\n      this.startSpaceAssetsUpdates();\n    } else {\n      this.stopSpaceAssetsUpdates();\n    }\n    \n    // Start space weather updates if any space weather overlays are active\n    if (this.overlays.some(o => o.startsWith('spaceWeather'))) {\n      this.startSpaceWeatherUpdates();\n    } else {\n      this.stopSpaceWeatherUpdates();\n    }\n  }\n\n  private startSpaceAssetsUpdates() {\n    this.stopSpaceAssetsUpdates();\n    // Fetch immediately, then every 60s (artifact-driven: periodic/real-time, see globe-overlays.artifact)\n    this.fetchAndUpdateSpaceAssets();\n    this.spaceAssetsInterval = setInterval(() => {\n      this.fetchAndUpdateSpaceAssets();\n    }, 60000);\n  }\n\n  private stopSpaceAssetsUpdates() {\n    if (this.spaceAssetsInterval) {\n      clearInterval(this.spaceAssetsInterval);\n      this.spaceAssetsInterval = null;\n    }\n  }\n\n  private fetchAndUpdateSpaceAssets() {\n    this.emit('overlayDataLoading', { overlay: 'spaceAssets' });\n    fetchSpaceAssets()\n      .then((data) => {\n        this.overlayDataCache['spaceAssets'] = data;\n        this.setOverlayData('spaceAssets', data);\n      })\n      .catch((err) => {\n        this.emit('overlayDataError', { overlay: 'spaceAssets', error: err?.message || String(err) });\n      });\n  }\n\n  // AI-NOTE: Space weather periodic update methods\n  private startSpaceWeatherUpdates() {\n    this.stopSpaceWeatherUpdates();\n    // Fetch immediately, then every 5 minutes (matches NOAA update frequency)\n    this.fetchAndUpdateSpaceWeather();\n    this.spaceWeatherInterval = setInterval(() => {\n      this.fetchAndUpdateSpaceWeather();\n    }, 5 * 60 * 1000); // 5 minutes\n  }\n\n  private stopSpaceWeatherUpdates() {\n    if (this.spaceWeatherInterval) {\n      clearInterval(this.spaceWeatherInterval);\n      this.spaceWeatherInterval = null;\n    }\n  }\n\n  private async fetchAndUpdateSpaceWeather() {\n    try {\n      this.emit('overlayDataLoading', { overlay: 'spaceWeather' });\n      \n      // Fetch both InterMag and US-Canada data\n      const [interMagData, usCanadaData] = await Promise.all([\n        fetchLatestElectricFieldData('InterMag'),\n        fetchLatestElectricFieldData('US-Canada')\n      ]);\n\n      // Transform to intelligence markers for globe visualization\n      const interMagMarkers = transformNOAAToIntelMarkers(interMagData, 'electric-field-intermag');\n      const usCanadaMarkers = transformNOAAToIntelMarkers(usCanadaData, 'electric-field-us-canada');\n      \n      // Combine both datasets\n      const combinedMarkers = [...interMagMarkers, ...usCanadaMarkers];\n      \n      // Cache and update - Note: actual rendering will be controlled by Globe component with settings\n      this.overlayDataCache['spaceWeather'] = combinedMarkers;\n      this.setOverlayData('spaceWeather', combinedMarkers);\n      \n    } catch (err) {\n      this.emit('overlayDataError', { overlay: 'spaceWeather', error: err instanceof Error ? err.message : String(err) });\n    }\n  }\n\n  /**\n   * Switch globe mode (see globe-modes.artifact)\n   */\n  setMode(mode: string): void {\n    this.mode = mode;\n    // Artifact-driven: Reset overlays to mode defaults (see globe-modes.artifact, globe-mode-mapping-reference.artifact)\n    const modeDefaults: Record<string, string[]> = {\n      CyberCommand: ['alerts', 'intelMarkers', 'markers', 'spaceWeather'],\n      EcoNatural: ['weather', 'naturalEvents', 'markers', 'spaceWeather'],\n      GeoPolitical: ['borders', 'territories', 'markers'],\n    };\n    const newOverlays = modeDefaults[mode] || [];\n    // Remove overlays not in new mode\n    this.overlays.forEach(o => {\n      if (!newOverlays.includes(o)) this.removeOverlay(o);\n    });\n    // Add overlays required by new mode\n    newOverlays.forEach(o => {\n      if (!this.overlays.includes(o)) this.addOverlay(o);\n    });\n    this.init();\n  }\n\n  /**\n   * Add overlay (see globe-overlays.artifact)\n   */\n  addOverlay(overlay: string) {\n    if (!this.overlays.includes(overlay)) {\n      this.overlays.push(overlay);\n      // Overlay data caching (see globe-overlays.artifact)\n      if (this.overlayDataCache[overlay]) {\n        this.setOverlayData(overlay, this.overlayDataCache[overlay]);\n        this.emit('overlayAdded', overlay);\n        // Start/stop periodic updates for spaceAssets and spaceWeather\n        if (overlay === 'spaceAssets') this.startSpaceAssetsUpdates();\n        if (overlay === 'spaceWeather') this.startSpaceWeatherUpdates();\n        return;\n      }\n      // AI-NOTE: See globe-overlays.artifact for overlay logic and data sources.\n      if (overlay === 'alerts') {\n        // Fetch alerts from real API (artifact-driven)\n        fetchAlerts().then((data) => {\n          this.overlayDataCache['alerts'] = data;\n          this.setOverlayData('alerts', data);\n        });\n      }\n      if (overlay === 'weather') {\n        // Fetch weather for key locations (artifact-driven, see globe-overlays.artifact)\n        // Example: fetch for several major cities (can be replaced with dynamic locations)\n        const locations = [\n          { lat: 35, lng: 139 }, // Tokyo\n          { lat: -33, lng: 151 }, // Sydney\n          { lat: 40.7, lng: -74 }, // New York\n          { lat: 51.5, lng: -0.1 }, // London\n        ];\n        Promise.all(locations.map(loc => fetchWeatherData(loc.lat, loc.lng)))\n          .then((results) => {\n            const data = results.map((weather, i) => ({\n              id: i + 1,\n              lat: locations[i].lat,\n              lng: locations[i].lng,\n              type: 'weather',\n              ...weather,\n            }));\n            this.overlayDataCache['weather'] = data;\n            this.setOverlayData('weather', data);\n          });\n      }\n      if (overlay === 'borders') {\n        // Fetch borders from static geojson\n        fetch('/borders.geojson')\n          .then(res => res.json())\n          .then((geojson: { features: Array<{ properties?: { name?: string }, geometry: { type: string, coordinates: number[][] } }> }) => {\n            // Parse LineString features into arrays of lat/lng\n            const lines = (geojson.features || [])\n              .filter((f) => f.geometry.type === 'LineString')\n              .map((f) => ({\n                id: f.properties?.name || 'border',\n                coordinates: f.geometry.coordinates // [lng, lat] pairs\n              }));\n            this.overlayDataCache['borders'] = lines;\n            this.setOverlayData('borders', lines);\n          });\n      }\n      if (overlay === 'territories') {\n        // Fetch territories from static geojson\n        fetch('/territories.geojson')\n          .then(res => res.json())\n          .then((geojson: { features: Array<{ properties?: { name?: string }, geometry: { type: string, coordinates: number[][][] } }> }) => {\n            // Parse Polygon features into arrays of lat/lng\n            const polygons = (geojson.features || [])\n              .filter((f) => f.geometry.type === 'Polygon')\n              .map((f) => ({\n                id: f.properties?.name || 'territory',\n                coordinates: f.geometry.coordinates // array of rings: [ [ [lng, lat], ... ] ]\n              }));\n            this.overlayDataCache['territories'] = polygons;\n            this.setOverlayData('territories', polygons);\n          });\n      }\n      if (overlay === 'intelMarkers') {\n        // AI-NOTE: Fetch intel markers from secure API (see overlays artifact)\n        // TODO: Replace mock with live fetch from API/backend/Solana\n        import('../api/intelligence').then(({ fetchIntelReports }) => {\n          fetchIntelReports().then((reports: any[]) => {\n            // Map IntelReport to IntelReportOverlayMarker\n            const overlayMarkers = reports.map((r) => ({\n              pubkey: r.pubkey || '',\n              title: r.title || r.label || '',\n              content: r.content || '',\n              tags: r.tags || [],\n              latitude: r.lat ?? r.latitude ?? 0,\n              longitude: r.long ?? r.longitude ?? 0,\n              timestamp: r.timestamp || Date.parse(r.date || '') || 0,\n              author: r.author || '',\n            }));\n            this.overlayDataCache['intelMarkers'] = overlayMarkers;\n            this.setOverlayData('intelMarkers', overlayMarkers);\n          });\n        });\n      }\n      if (overlay === 'naturalEvents') {\n        // Fetch natural events from real API (artifact-driven)\n        fetchNaturalEvents().then((data) => {\n          this.overlayDataCache['naturalEvents'] = data;\n          this.setOverlayData('naturalEvents', data);\n        });\n      }\n      if (overlay === 'spaceAssets') {\n        this.startSpaceAssetsUpdates();\n        return;\n      }\n      if (overlay === 'spaceWeather') {\n        // AI-NOTE: Fetch NOAA space weather data (electric field InterMag & US-Canada)\n        this.startSpaceWeatherUpdates();\n        return;\n      }\n      \n      // AI-NOTE: Space weather overlays integration (see NOAA-TDD-Implementation-Summary.md)\n      if (overlay === 'spaceWeatherInterMag') {\n        this.emit('overlayDataLoading', { overlay: 'spaceWeatherInterMag' });\n        fetchLatestElectricFieldData('InterMag')\n          .then((data) => {\n            // Transform to intelligence markers for visualization\n            const markers = transformNOAAToIntelMarkers(data, 'electric-field-intermag');\n            this.overlayDataCache['spaceWeatherInterMag'] = markers;\n            this.setOverlayData('spaceWeatherInterMag', markers);\n          })\n          .catch((err) => {\n            this.emit('overlayDataError', { \n              overlay: 'spaceWeatherInterMag', \n              error: err?.message || String(err) \n            });\n          });\n        // Start space weather updates if not already running\n        if (!this.spaceWeatherInterval) {\n          this.startSpaceWeatherUpdates();\n        }\n        return;\n      }\n      \n      if (overlay === 'spaceWeatherUSCanada') {\n        this.emit('overlayDataLoading', { overlay: 'spaceWeatherUSCanada' });\n        fetchLatestElectricFieldData('US-Canada')  \n          .then((data) => {\n            // Transform to intelligence markers for visualization\n            const markers = transformNOAAToIntelMarkers(data, 'electric-field-us-canada');\n            this.overlayDataCache['spaceWeatherUSCanada'] = markers;\n            this.setOverlayData('spaceWeatherUSCanada', markers);\n          })\n          .catch((err) => {\n            this.emit('overlayDataError', { \n              overlay: 'spaceWeatherUSCanada', \n              error: err?.message || String(err) \n            });\n          });\n        // Start space weather updates if not already running\n        if (!this.spaceWeatherInterval) {\n          this.startSpaceWeatherUpdates();\n        }\n        return;\n      }\n      \n      this.emit('overlayAdded', overlay);\n    }\n  }\n\n  /**\n   * Remove overlay (see globe-overlays.artifact)\n   */\n  removeOverlay(overlay: string): void {\n    this.overlays = this.overlays.filter(o => o !== overlay);\n    // Optionally clear overlay data (but keep cache for efficiency)\n    this.setOverlayData(overlay, undefined);\n    this.emit('overlayRemoved', overlay);\n    \n    // Stop periodic updates for spaceAssets and spaceWeather\n    if (overlay === 'spaceAssets') {\n      this.stopSpaceAssetsUpdates();\n    }\n    if (overlay === 'spaceWeather') {\n      this.stopSpaceWeatherUpdates();\n    }\n  }\n\n  /**\n   * Update space weather visualization with settings-based processing\n   * Called by Globe component when settings change\n   */\n  updateSpaceWeatherVisualization(processedData: unknown): void {\n    this.setOverlayData('spaceWeather', processedData);\n  }\n\n  /**\n   * Get current overlays\n   */\n  getOverlays(): string[] {\n    return this.overlays;\n  }\n\n  /**\n   * Get overlay data (see globe-overlays.artifact)\n   */\n  getOverlayData(overlay: string): unknown {\n    // AI-NOTE: Overlay data structure and update mechanism should be defined in globe-overlays.artifact\n    return this.overlayData[overlay];\n  }\n\n  /**\n   * Set overlay data (see globe-overlays.artifact)\n   */\n  setOverlayData(overlay: string, data: unknown): void {\n    // AI-NOTE: Overlay data update mechanism should be defined in globe-overlays.artifact\n    this.overlayData[overlay] = data;\n    this.emit('overlayDataUpdated', { overlay, data });\n  }\n\n  /**\n   * Register event handler (see globe-engine-api.artifact)\n   */\n  on(event: string, handler: (event: GlobeEvent) => void): void {\n    if (!this.eventHandlers[event]) this.eventHandlers[event] = [];\n    this.eventHandlers[event].push(handler);\n  }\n\n  /**\n   * Emit event (see globe-engine-api.artifact)\n   */\n  emit(event: string, payload: unknown): void {\n    (this.eventHandlers[event] || []).forEach(fn => fn({ type: event, payload }));\n  }\n\n  /**\n   * Get current globe material (see globe-shaders.artifact)\n   */\n  getMaterial(): THREE.Material | null {\n    return this.material;\n  }\n  // ...other API methods as defined in globe-engine-api.artifact\n}\n// Artifact references:\n// - Overlay logic and periodic updates: globe-overlays.artifact\n// - API/events: globe-engine-api.artifact\n\n// AI-NOTE: Overlays for intelligence markers (SIGINT/HUMINT) are currently mocked.\n// Per artifact-driven migration, overlays will fetch live data from Solana or secure backend only.\n// See artifacts/intel-report-overlays.artifact for overlay types, data sources, and migration plan.\n\nexport const intelMarkersOverlay = {\n  // TODO: Replace mock data with live Solana/secure backend integration.\n  markers: [] as IntelReportOverlayMarker[],\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/globe-engine/GlobeMaterialManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/globe-engine/GlobeModeMapping.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/globe-engine/GlobeTextureLoader.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/globe-engine/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/hooks/data/useFetchConflicts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/hooks/data/useFetchData.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'options'. Either include it or remove the dependency array.","line":25,"column":6,"nodeType":"ArrayExpression","endLine":25,"endColumn":11,"suggestions":[{"desc":"Update the dependencies array to be: [options, url]","fix":{"range":[645,650],"text":"[options, url]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\n\nexport const useFetchData = <T>(url: string, options = {}) => {\n  const [data, setData] = useState<T | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      setError(null);\n\n      try {\n        const response = await fetch(url, options);\n        const result = await response.json();\n        setData(result);\n      } catch (err) {\n        setError(err as Error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [url]);\n\n  return { data, loading, error };\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/hooks/ui/useAuth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/hooks/ui/useGlobeInteractions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/hooks/useBackendAuth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/hooks/useCyberCommandSettings.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/hooks/useEIAData.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'err' is defined but never used.","line":25,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport EIAService from '../services/EIAService';\n\nexport const useEIAData = () => {\n  const [oilPrice, setOilPrice] = useState<number | null>(null);\n  const [gasolinePrice, setGasolinePrice] = useState<number | null>(null);\n  const [oilInventory, setOilInventory] = useState<number | null>(null);\n  const [naturalGasStorage, setNaturalGasStorage] = useState<number | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const [oilPrice, gasolinePrice, oilInventory, naturalGasStorage] = await Promise.all([\n          EIAService.getLatestOilPrice(),\n          EIAService.getLatestGasolinePrice(),\n          EIAService.getLatestOilInventory(),\n          EIAService.getLatestNaturalGasStorage(),\n        ]);\n        setOilPrice(oilPrice);\n        setGasolinePrice(gasolinePrice);\n        setOilInventory(oilInventory);\n        setNaturalGasStorage(naturalGasStorage);\n      } catch (err) {\n        setError('Failed to fetch data');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  return { oilPrice, gasolinePrice, oilInventory, naturalGasStorage, loading, error };\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/hooks/useEcoNaturalSettings.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/hooks/useGeoPoliticalSettings.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/hooks/useOnChainRoles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/hooks/useSIWEAuth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/hooks/useSpaceWeatherData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/hooks/useSpaceWeatherSettings.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/hooks/useTokenGate.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_address' is defined but never used.","line":7,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_tokenMint' is defined but never used.","line":7,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":58}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/hooks/useTokenGate.ts\n\n// AI-NOTE: Archived EVM/ethers.js logic. This hook previously checked token/NFT balance using EVM/ethers.js.\n// Per artifact-driven migration and security policy, all EVM logic is removed.\n// TODO: Implement Solana-based token gate logic using @solana/web3.js or secure backend/CLI only. See artifacts/intel-report-artifact-index.artifact.\n\nexport function useTokenGate(_address: string, _tokenMint: string) {\n  // Placeholder: No EVM logic. See artifact for migration plan.\n  return { hasAccess: false, loading: false, error: null };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/hooks/useWASM.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/hooks/useWallet.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/interfaces/EIAData.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[312,315],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[312,315],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface EIAData {\n    response: {\n        total: string;\n        dateFormat: string;\n        frequency: string;\n        data: {\n        period: string; // e.g., \"2025-03-07\"\n        value: number; // e.g., 67.52\n        }[];\n    };\n    request: {\n        command: string;\n        params: Record<string, any>;\n    };\n    apiVersion: string;\n}","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/interfaces/IntelReportOverlay.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/interfaces/MarketData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/interfaces/Marketplace.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/layouts/HUDLayout/HUDLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/layouts/SettingsLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/layouts/StandardLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/middleware/apiHandler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/middleware/web3Middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/models/IntelReport.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/pages/IntelReportsPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[839,842],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[839,842],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// AI-NOTE: Artifact-driven route/page for intelligence reports and overlays.\n// This page displays the IntelReportList and IntelOverlay components.\n// See artifacts/intel-report-api-integration.artifact and overlays artifact for integration plan.\n// TODO: Integrate with Solana/secure backend and live overlays when available.\n\nimport React, { useEffect, useState } from 'react';\nimport { IntelReportList } from '../components/Intel/IntelReportList';\nimport { IntelOverlay } from '../components/Intel/overlays/IntelOverlay';\nimport { fetchIntelReports } from '../api/intelligence';\nimport type { IntelReportOverlayMarker } from '../interfaces/IntelReportOverlay';\n\nconst IntelReportsPage: React.FC = () => {\n  const [markers, setMarkers] = useState<IntelReportOverlayMarker[]>([]);\n  useEffect(() => {\n    fetchIntelReports().then((data: any[]) => {\n      // Map to overlay marker interface\n      const overlayMarkers = data.map((r) => ({\n        pubkey: r.pubkey || '',\n        title: r.title || r.label || '',\n        content: r.content || '',\n        tags: r.tags || [],\n        latitude: r.lat ?? r.latitude ?? 0,\n        longitude: r.long ?? r.longitude ?? 0,\n        timestamp: r.timestamp || Date.parse(r.date || '') || 0,\n        author: r.author || '',\n      }));\n      setMarkers(overlayMarkers);\n    });\n  }, []);\n  return (\n    <div>\n      <h1>Intelligence Exchange Market</h1>\n      <IntelReportList />\n      <IntelOverlay markers={markers} />\n    </div>\n  );\n};\n\nexport default IntelReportsPage;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/pages/MainPage/MainPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/pages/SettingsPage/SettingsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/routes/ProtectedRoute.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/routes/marketplace.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/routes/routes.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/AlertsService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/ApiService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/BlockchainService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/ConflictZoneService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":153,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":153,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4751,4754],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4751,4754],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import axios from 'axios';\nimport { getProxiedUrl } from '../utils/ProxyUtils';\nimport xml2js from 'xml2js';\n\nconst reliefWebApiUrl = import.meta.env.VITE_RELIEF_WEB_API_URL;\nconst gdacsApiUrl = import.meta.env.VITE_GDACS_API_URL;\n\ninterface ConflictZoneData {\n  id: string;\n  date: string;\n  type: string;\n  location: string;\n  description?: string;\n  source: string;\n}\n\nconst validateResponse = (data: unknown): boolean => {\n  return Array.isArray(data);\n};\n\nexport const fetchACLEDConflictZones = async (): Promise<ConflictZoneData[]> => {\n  try {\n    const apiKey = import.meta.env.ACLED_API_KEY;\n    const response = await axios.get(getProxiedUrl(`https://api.acleddata.com/acled/read?key=${apiKey}`));\n    console.log('ACLED Response:', response.data);\n    if (!validateResponse(response.data)) {\n      throw new Error('Invalid ACLED response format');\n    }\n    return response.data.map((item: unknown) => {\n      const conflictItem = item as {\n        event_id: string;\n        event_date: string;\n        event_type: string;\n        location: string;\n        notes?: string;\n      };\n      return {\n        id: conflictItem.event_id,\n        date: conflictItem.event_date,\n        type: conflictItem.event_type,\n        location: conflictItem.location,\n        description: conflictItem.notes,\n        source: 'ACLED',\n      };\n    });\n  } catch (error) {\n    console.error('Error fetching ACLED data:', error);\n    return [];\n  }\n};\n\nexport const fetchUCDPConflictZones = async (): Promise<ConflictZoneData[]> => {\n  try {\n    const response = await axios.get(getProxiedUrl('https://ucdp.uu.se/api/v2/conflicts'));\n    console.log('UCDP Response:', response.data);\n    if (!validateResponse(response.data)) {\n      throw new Error('Invalid UCDP response format');\n    }\n    return response.data.map((item: unknown) => {\n      const conflictItem = item as {\n        id: string;\n        date_start: string;\n        type_of_conflict: string;\n        location: string;\n        description: string;\n      };\n      return {\n        id: conflictItem.id,\n        date: conflictItem.date_start,\n        type: conflictItem.type_of_conflict,\n        location: conflictItem.location,\n        description: conflictItem.description,\n        source: 'UCDP',\n      };\n    });\n  } catch (error) {\n    if (axios.isAxiosError(error)) {\n      console.error('Error fetching UCDP data:', error.response ? error.response.data : error.message);\n    } else {\n      console.error('Error fetching UCDP data:', error);\n    }\n    return [];\n  }\n};\n\nexport const fetchHOTConflictZones = async (): Promise<ConflictZoneData[]> => {\n  try {\n    const response = await axios.get(getProxiedUrl('https://tasks.hotosm.org/api/v1/projects'));\n    console.log('HOT Response:', response.data);\n    if (!validateResponse(response.data)) {\n      throw new Error('Invalid HOT response format');\n    }\n    return response.data.map((item: unknown) => {\n      const conflictItem = item as {\n        id: string;\n        created: string;\n        geometry: string;\n        name: string;\n      };\n      return {\n        id: conflictItem.id,\n        date: conflictItem.created,\n        type: 'Crisis Mapping',\n        location: conflictItem.geometry,\n        description: conflictItem.name,\n        source: 'HOT',\n      };\n    });\n  } catch (error) {\n    console.error('Error fetching HOT data:', error);\n    return [];\n  }\n};\n\nexport const fetchReliefWebConflictZones = async (): Promise<ConflictZoneData[]> => {\n  try {\n    const response = await axios.get(getProxiedUrl(reliefWebApiUrl));\n    console.log('ReliefWeb Response:', response.data);\n    if (!validateResponse(response.data.data)) {\n      throw new Error('Invalid ReliefWeb response format');\n    }\n    return response.data.data.map((item: unknown) => {\n      const conflictItem = item as {\n        id: string;\n        date: string;\n        type: string;\n        location: string;\n        description?: string;\n      };\n      return {\n        id: conflictItem.id,\n        date: conflictItem.date,\n        type: conflictItem.type,\n        location: conflictItem.location,\n        description: conflictItem.description,\n        source: 'ReliefWeb',\n      };\n    });\n  } catch (error) {\n    console.error('Error fetching ReliefWeb data:', error);\n    return [];\n  }\n};\n\nexport const fetchGDACSConflictZones = async (): Promise<ConflictZoneData[]> => {\n  try {\n    const response = await axios.get(getProxiedUrl(gdacsApiUrl), { responseType: 'text' });\n    console.log('GDACS Response:', response.data);\n    const parsedData = await xml2js.parseStringPromise(response.data);\n    if (!parsedData.rss.channel[0].item) {\n      throw new Error('Invalid GDACS response format');\n    }\n    return parsedData.rss.channel[0].item.map((item: any) => {\n      return {\n        id: item.guid[0]._,\n        date: item.pubDate[0],\n        type: item.title[0],\n        location: item['gdacs:location'][0],\n        description: item.description[0],\n        source: 'GDACS',\n      };\n    });\n  } catch (error) {\n    console.error('Error fetching GDACS data:', error);\n    return [];\n  }\n};\n\nexport const fetchAllConflictZones = async (): Promise<ConflictZoneData[]> => {\n  try {\n    const results = await Promise.allSettled([\n      fetchACLEDConflictZones(),\n      fetchUCDPConflictZones(),\n      fetchHOTConflictZones(),\n      fetchReliefWebConflictZones(),\n      fetchGDACSConflictZones(),\n    ]);\n\n    const aggregatedData = results\n      .filter(result => result.status === 'fulfilled')\n      .flatMap(result => (result as PromiseFulfilledResult<ConflictZoneData[]>).value);\n\n    return aggregatedData;\n  } catch (error) {\n    console.error('Error aggregating conflict zone data:', error);\n    return [];\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/EIAService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/FeedsService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/FiltersService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/GeoEventsService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/IPFSService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/MarketDataService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/NOAAGeomagneticService.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/NOAAGeomagneticService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/SpaceAssetsService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/SpaceWeatherCacheService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/UCDPDataService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/UserDataService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/WeatherDataService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/data-service-interfaces.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":40,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Data Service Interfaces (artifact-driven)\n// See: artifacts/starcom-mk2-data-service-interfaces.artifact\n// See: artifacts/starcom-mk2-data-service-observability.artifact\n// See: artifacts/starcom-mk2-data-service-refactor-plan.artifact\n\n// Observability contract for logging/metrics/tracing\nexport interface DataServiceObserver {\n  onFetchStart?(key: string): void;\n  onFetchEnd?(key: string, durationMs: number): void;\n  onError?(key: string, error: Error): void;\n  onCacheHit?(key: string): void;\n  onCacheMiss?(key: string): void;\n  onCacheEvict?(key: string): void;\n}\n\n// Generic data provider interface\nexport interface DataProvider<T = unknown> {\n  fetchData(key: string, options?: Record<string, unknown>): Promise<T>;\n  subscribe?(key: string, onData: (data: T) => void, options?: Record<string, unknown>): () => void;\n  setObserver?(observer: DataServiceObserver): void;\n}\n\n// Generic cache service interface\nexport interface DataCacheService<T = unknown> {\n  get(key: string): T | null;\n  set(key: string, value: T, ttl?: number): void;\n  delete(key: string): void;\n  clear(): void;\n  has(key: string): boolean;\n  setObserver?(observer: DataServiceObserver): void;\n}\n\n// Example: Composing multiple providers (fallback, aggregation)\nexport class FallbackProvider<T> implements DataProvider<T> {\n  constructor(private providers: DataProvider<T>[]) {}\n  async fetchData(key: string, options?: Record<string, unknown>): Promise<T> {\n    for (const provider of this.providers) {\n      try {\n        return await provider.fetchData(key, options);\n      } catch (e) {\n        // try next provider\n      }\n    }\n    throw new Error('All providers failed');\n  }\n}\n\n// AI-NOTE: This file is artifact-driven and should be updated if the interfaces artifact changes.\n","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/data-services.all.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/eia/EIADataCacheService.observability.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/eia/EIADataCacheService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[307,310],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[307,310],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[357,360],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[357,360],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[532,535],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[532,535],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[917,920],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[917,920],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// EIADataCacheService: Implements DataCacheService for EIA domain\n// Artifacts: data-service-interfaces, data-service-observability, data-service-refactor-plan\nimport { DataCacheService, DataServiceObserver } from '../data-service-interfaces';\n\nexport class EIADataCacheService implements DataCacheService<any> {\n  private cache = new Map<string, { value: any; expiresAt?: number }>();\n  private observer?: DataServiceObserver;\n\n  setObserver(observer: DataServiceObserver) {\n    this.observer = observer;\n  }\n\n  get(key: string): any | null {\n    const entry = this.cache.get(key);\n    if (!entry) {\n      this.observer?.onCacheMiss?.(key);\n      return null;\n    }\n    if (entry.expiresAt && entry.expiresAt < Date.now()) {\n      this.cache.delete(key);\n      this.observer?.onCacheEvict?.(key);\n      return null;\n    }\n    this.observer?.onCacheHit?.(key);\n    return entry.value;\n  }\n\n  set(key: string, value: any, ttl?: number): void {\n    const expiresAt = ttl ? Date.now() + ttl : undefined;\n    this.cache.set(key, { value, expiresAt });\n  }\n\n  delete(key: string): void {\n    this.cache.delete(key);\n    this.observer?.onCacheEvict?.(key);\n  }\n\n  clear(): void {\n    this.cache.clear();\n  }\n\n  has(key: string): boolean {\n    return this.cache.has(key);\n  }\n}\n\n// AI-NOTE: This is a minimal, artifact-driven implementation. Add persistence or advanced invalidation as needed.\n","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/eia/EIADataCacheService.unit.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/eia/EIADataProvider.observability.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/eia/EIADataProvider.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/eia/EIADataProvider.unit.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/eia/EIAService.e2e.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/eia/EIAService.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/eia/EIAService.ts","messages":[{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":5,"column":5,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":15,"endColumn":6},{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":20,"column":5,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":29,"endColumn":6},{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":34,"column":5,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":43,"endColumn":6},{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":48,"column":5,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":57,"endColumn":6}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Minimal EIAService implementation for testing\nclass EIAService {\n  static async getLatestOilPrice() {\n    const url = `https://api.eia.gov/v2/seriesid/PET.RWTC.W?api_key=${import.meta.env.VITE_EIA_API_KEY}`;\n    try {\n      const res = await fetch(url);\n      if (!res.ok) throw new Error('Network response was not ok');\n      const data = await res.json();\n      // Defensive: extract value from EIA API response\n      const value = data?.response?.data?.[0]?.value;\n      if (typeof value !== 'number') throw new Error('Invalid oil price data');\n      return value;\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  static async getLatestGasolinePrice() {\n    const url = `https://api.eia.gov/v2/seriesid/PET.EMM_EPM0_PTE_NUS_DPG.W?api_key=${import.meta.env.VITE_EIA_API_KEY}`;\n    try {\n      const res = await fetch(url);\n      if (!res.ok) throw new Error('Network response was not ok');\n      const data = await res.json();\n      const value = data?.response?.data?.[0]?.value;\n      if (typeof value !== 'number') throw new Error('Invalid gasoline price data');\n      return value;\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  static async getLatestOilInventory() {\n    const url = `https://api.eia.gov/v2/seriesid/PET.WCRSTUS1.W?api_key=${import.meta.env.VITE_EIA_API_KEY}`;\n    try {\n      const res = await fetch(url);\n      if (!res.ok) throw new Error('Network response was not ok');\n      const data = await res.json();\n      const value = data?.response?.data?.[0]?.value;\n      if (typeof value !== 'number') throw new Error('Invalid oil inventory data');\n      return value;\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  static async getLatestNaturalGasStorage() {\n    const url = `https://api.eia.gov/v2/seriesid/NG.NW2_EPG0_SWO_R48_BCF.W?api_key=${import.meta.env.VITE_EIA_API_KEY}`;\n    try {\n      const res = await fetch(url);\n      if (!res.ok) throw new Error('Network response was not ok');\n      const data = await res.json();\n      const value = data?.response?.data?.[0]?.value;\n      if (typeof value !== 'number') throw new Error('Invalid natural gas storage data');\n      return value;\n    } catch (err) {\n      throw err;\n    }\n  }\n}\n\nexport default EIAService;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/eia/LegacyEIAServiceAdapter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/market/MarketDataCacheService.unit.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/market/MarketDataProvider.unit.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/nftService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/noaaSpaceWeather.integration.test.ts","messages":[{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":12,"column":43,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":12,"endColumn":44,"suggestions":[{"messageId":"removeEscape","fix":{"range":[581,582],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[581,581],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":20,"column":43,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":20,"endColumn":44,"suggestions":[{"messageId":"removeEscape","fix":{"range":[976,977],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[976,976],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":29,"column":77,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":29,"endColumn":78,"suggestions":[{"messageId":"removeEscape","fix":{"range":[1536,1537],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[1536,1536],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":45,"column":77,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":45,"endColumn":78,"suggestions":[{"messageId":"removeEscape","fix":{"range":[2540,2541],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[2540,2540],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from 'vitest';\nimport { fetch } from 'undici';\nimport type { NOAAElectricFieldData } from '../types/spaceWeather';\n\n// Integration tests for real NOAA API endpoints\n\ndescribe('NOAA Electric Field Data - Real API Integration', () => {\n  it('should discover what the NOAA InterMag directory actually contains', async () => {\n    const response = await fetch('https://services.swpc.noaa.gov/json/lists/rgeojson/InterMagEarthScope/');\n    expect(response.ok).toBe(true);\n    const html = await response.text();\n    const fileLinks = html.match(/href=\"[^\\\"]*\\.json\"/g) || [];\n    expect(fileLinks.length).toBeGreaterThan(0);\n  }, 30000);\n\n  it('should discover what the NOAA US-Canada directory actually contains', async () => {\n    const response = await fetch('https://services.swpc.noaa.gov/json/lists/rgeojson/US-Canada-1D/');\n    expect(response.ok).toBe(true);\n    const html = await response.text();\n    const fileLinks = html.match(/href=\"[^\\\"]*\\.json\"/g) || [];\n    expect(fileLinks.length).toBeGreaterThan(0);\n  }, 30000);\n\n  it('should fetch and parse actual InterMag electric field data', async () => {\n    const dirResponse = await fetch('https://services.swpc.noaa.gov/json/lists/rgeojson/InterMagEarthScope/');\n    const html = await dirResponse.text();\n    const fileLinks = html.match(/href=\"(\\d{8}T\\d{6}-\\d{2}-Efield-empirical-EMTF-[\\d.-]+x[\\d.-]+\\.json)\"/g) || [];\n    expect(fileLinks.length).toBeGreaterThan(0);\n    const latestFileMatch = fileLinks[fileLinks.length - 1].match(/href=\"([^\\\"]+)\"/);\n    expect(latestFileMatch).toBeTruthy();\n    const latestFilename = latestFileMatch![1];\n    const dataResponse = await fetch(`https://services.swpc.noaa.gov/json/lists/rgeojson/InterMagEarthScope/${latestFilename}`);\n    expect(dataResponse.ok).toBe(true);\n    const electricFieldData = await dataResponse.json() as NOAAElectricFieldData;\n    expect(electricFieldData.type).toBe('FeatureCollection');\n    expect(electricFieldData.features).toBeInstanceOf(Array);\n    expect(electricFieldData.features.length).toBeGreaterThan(0);\n  }, 30000);\n\n  it('should fetch and parse actual US-Canada electric field data', async () => {\n    const dirResponse = await fetch('https://services.swpc.noaa.gov/json/lists/rgeojson/US-Canada-1D/');\n    const html = await dirResponse.text();\n    const fileLinks = html.match(/href=\"(\\d{8}T\\d{6}-\\d{2}-Efield-US-Canada\\.json)\"/g) || [];\n    expect(fileLinks.length).toBeGreaterThan(0);\n    const latestFileMatch = fileLinks[fileLinks.length - 1].match(/href=\"([^\\\"]+)\"/);\n    const latestFilename = latestFileMatch![1];\n    const dataResponse = await fetch(`https://services.swpc.noaa.gov/json/lists/rgeojson/US-Canada-1D/${latestFilename}`);\n    expect(dataResponse.ok).toBe(true);\n    const electricFieldData = await dataResponse.json() as NOAAElectricFieldData;\n    expect(electricFieldData.type).toBe('FeatureCollection');\n    expect(electricFieldData.features).toBeInstanceOf(Array);\n    expect(electricFieldData.features.length).toBeGreaterThan(0);\n  }, 30000);\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/noaaSpaceWeather.quality.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/noaaSpaceWeather.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/noaaSpaceWeather.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/noaaSpaceWeather.unit.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/shared/FallbackProvider.unit.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/testNoaaFunctions.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/services/tokenService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/setupTests.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/styles/theme.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/tailwind.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/types/TimeDataTypes.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":3,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[63,66],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[63,66],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface CacheEntry {\n    timestamp: number;\n    data: any[]; // Replace `any` with the appropriate type\n  }","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/types/spaceWeather.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/types/ucdpTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/ProxyUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/errorHandler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/fetchDataUtils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[65,68],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[65,68],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export async function fetchHistoricalData(time: number): Promise<any[]> {\n    return Promise.resolve([\n      { lat: 40.7128, lng: -74.006, size: 1, color: 'red', timestamp: time },\n    ]);\n  }","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/fetchHistoricalData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/formatDate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/generateColor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/logging.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/mockData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/queryUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/settingsStorage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/uiSettingsReflection.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","line":40,"column":6,"nodeType":"Identifier","endLine":40,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// AI-NOTE: Utility functions to ensure UI state reflects persistent settings\n// Helps guarantee consistency between stored settings and UI display\n\nimport React, { useEffect, useState } from 'react';\n\n/**\n * Hook to ensure form control values reflect the actual persistent state\n * Useful for components that need to sync with external state changes\n */\nexport const useSettingsReflection = <T>(persistentValue: T, onChange: (value: T) => void) => {\n  const [uiValue, setUiValue] = useState<T>(persistentValue);\n\n  // Sync UI value with persistent value when it changes\n  useEffect(() => {\n    setUiValue(persistentValue);\n  }, [persistentValue]);\n\n  // Handle UI changes and propagate to persistent storage\n  const handleUIChange = (newValue: T) => {\n    setUiValue(newValue);\n    onChange(newValue);\n  };\n\n  return {\n    value: uiValue,\n    onChange: handleUIChange,\n    isInSync: uiValue === persistentValue\n  };\n};\n\n/**\n * Hook to force UI re-render when settings change\n * Useful for components that need to reflect external setting changes\n */\nexport const useSettingsSync = (dependencies: React.DependencyList) => {\n  const [syncKey, setSyncKey] = useState(0);\n\n  useEffect(() => {\n    setSyncKey(prev => prev + 1);\n  }, dependencies);\n\n  return syncKey;\n};\n\n/**\n * Hook to validate that UI controls are showing the correct persistent values\n * Useful for debugging and ensuring UI consistency\n */\nexport const useSettingsValidation = <T extends Record<string, unknown>>(\n  componentName: string,\n  persistentSettings: T,\n  uiSettings: Partial<T>\n) => {\n  useEffect(() => {\n    const mismatches: string[] = [];\n    \n    Object.entries(uiSettings).forEach(([key, uiValue]) => {\n      const persistentValue = persistentSettings[key];\n      if (persistentValue !== uiValue) {\n        mismatches.push(`${key}: UI=${JSON.stringify(uiValue)} ≠ Persistent=${JSON.stringify(persistentValue)}`);\n      }\n    });\n\n    if (mismatches.length > 0) {\n      console.warn(`⚠️ ${componentName} UI/Persistent mismatch:`, mismatches);\n    } else {\n      console.log(`✅ ${componentName} UI state in sync with persistent settings`);\n    }\n  }, [componentName, persistentSettings, uiSettings]);\n};\n\n/**\n * Utility to create controlled input props that reflect persistent state\n */\nexport const createControlledInputProps = <T>(\n  value: T,\n  onChange: (value: T) => void,\n  transform?: {\n    toUI?: (value: T) => string | number | boolean;\n    fromUI?: (uiValue: string | number | boolean) => T;\n  }\n) => {\n  const toUI = transform?.toUI || ((v: T) => v as string | number | boolean);\n  const fromUI = transform?.fromUI || ((v: string | number | boolean) => v as T);\n\n  return {\n    value: toUI(value),\n    onChange: (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n      const target = e.target;\n      let uiValue: string | number | boolean;\n      \n      if (target.type === 'checkbox') {\n        uiValue = (target as HTMLInputElement).checked;\n      } else if (target.type === 'number' || target.type === 'range') {\n        uiValue = parseFloat(target.value) || 0;\n      } else {\n        uiValue = target.value;\n      }\n      \n      onChange(fromUI(uiValue));\n    }\n  };\n};\n\n/**\n * Debug utility to log all persistent settings to console\n */\nexport const debugPersistentSettings = (label: string, settings: Record<string, unknown>) => {\n  console.group(`🔍 ${label} - Persistent Settings Debug`);\n  Object.entries(settings).forEach(([key, value]) => {\n    console.log(`${key}:`, value);\n  });\n  console.groupEnd();\n};\n\nexport default {\n  useSettingsReflection,\n  useSettingsSync,\n  useSettingsValidation,\n  createControlledInputProps,\n  debugPersistentSettings\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/wallet.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/utils/wasm.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/wasm/wasm_mini_server.d.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[506,509],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[506,509],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":36,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1174,1177],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1174,1177],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":57,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1762,1765],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1762,1765],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":59,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1866,1869],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1866,1869],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":60,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1921,1924],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1921,1924],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":61,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1958,1961],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1958,1961],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":69,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2415,2418],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2415,2418],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2492,2495],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2492,2495],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2500,2503],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2500,2503],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/wasm/wasm_mini_server.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/wasm/wasm_mini_server_bg.wasm.d.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":4,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[134,137],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[134,137],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[242,245],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[242,245],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[299,302],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[299,302],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[338,341],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[338,341],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[811,814],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[811,814],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[890,893],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[890,893],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[898,901],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[898,901],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jono/Documents/GitHub/starcom-app/starcom-mk2/src/workers/dataFetcher.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]