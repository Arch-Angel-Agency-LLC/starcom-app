<!-- filepath: /Users/jono/Documents/GitHub/starcom-app/starcom-mk2/ONBOARDING.md -->

# Starcom dApp Developer Onboarding Protocol

**Project**: Intelligence Exchange Marketplace with Cyber Command Interface  
**Audience**: GitHub Copilot AI Agent ‚Äî Technical development support  
**Stack**: React/TypeScript + Web3 + Nostr + IPFS  
**Theme**: Earth Alliance cyber operations (motivational context)

---

## 1. Project Overview (TECHNICAL FOCUS)

**PRIMARY PROJECT: STARCOM DAPP**
- **Core Functionality**: Intelligence Exchange Marketplace for trading and verifying intel
- **User Interface**: 3D cyber command interface with Earth Alliance theming
- **Technical Stack**: React/TypeScript, Web3 (Solana/Ethereum), Nostr, IPFS
- **Authentication**: Web3 wallet integration (currently being refactored)
- **Deployment**: Decentralized hosting with serverless functions

**AI-NOTE**: Earth Alliance is motivational theming. Focus on technical dApp development.

---

## 2. Development Setup & Onboarding

1. **Run the automated onboarding script:**
   - The onboarding process is fully automated: `.husky` git hooks run `npm run onboard` automatically
   - Generates `cache/code-summary.json` and `cache/code-health.json` with current project state
   - No manual input required. Artifacts are automatically generated and kept current.

2. **Load technical context from artifacts:**
   - Use `cache/code-summary.json` for project structure, key directories, and entry points
   - Use `cache/code-health.json` for lint/test status, TODOs, and development issues
   - Review `docs/BUILD-STATUS.md` for current development status
   - Check `artifacts/authentication-refactor-roadmap.artifact` for current authentication work

3. **Reference technical development conventions:**
   - Always read the `.primer` for technical stack overview and development patterns
   - Use existing artifacts and implementations before creating new code
   - Follow React/TypeScript best practices with Web3 integration patterns
   - Maintain Earth Alliance theming in UI components (motivational context)

---

## 3. Development Protocols & Best Practices
- **Technical Priority**: Starcom dApp functionality and Intelligence Exchange Marketplace
- **Architecture**: Maintain decentralized, Web3-first design patterns
- **Security**: Implement quantum-safe cryptography and secure Web3 practices
- **Always check for and use existing artifacts before generating new code**
- **Update artifacts after significant changes to maintain documentation accuracy**
- **Leave `AI-NOTE:` comments for non-obvious technical decisions or architecture choices**
- **Use structured TODOs**: `TODO: [QUESTION] ‚Äî [FILE/ARTIFACT]`
- **CRITICAL: Always use safe test runner for any test execution to prevent system freezes**

**Development Mindset**: Build robust dApp functionality with immersive Earth Alliance theming.

---

## 4. Data Accumulation Prevention (MANDATORY)

### System Data Bloat Prevention
The dApp includes data-intensive systems (3D visualization, IPFS storage, blockchain data) that can cause system bloat. **CRITICAL prevention measures:**

#### Browser Storage Bloat Prevention:
- **Files**: `src/utils/browserStorageManager.ts`, `src/hooks/useStorageMonitoring.ts`
- **Risk**: localStorage accumulation from settings, cache, intelligence data, and 3D visualization assets
- **Limits**: 2MB max for Starcom data, 5MB max total localStorage (IPFS monitored separately)
- **Auto-cleanup**: Removes old entries when approaching 80% of limits
- **Monitoring**: Use `useStorageMonitoring` hook in development environment

### AI-NOTE: Data Bloat Root Causes
1. **Data Fetching**: Python script creates permanent timestamped files
2. **Browser Storage**: Settings and cache data accumulates in localStorage
3. **Development Artifacts**: Build and cache files can grow during development
4. **Copilot Sessions**: Extended AI sessions may trigger repeated data fetches

**VIOLATION OF DATA LIMITS WILL CAUSE SYSTEM STORAGE BLOAT**

---

## 6. Safe Testing Protocol (MANDATORY)

### AI Agent Test Safety Rules:
1. **NEVER run tests directly** - Always use the safe test runner
2. **Use timeout traps** - All tests must have execution limits
3. **Monitor output volume** - Prevent infinite logging scenarios
4. **Detect stack overflows** - Kill processes on recursion detection

### Required Commands:
```bash
# Safe test execution (ALWAYS use this)
npm run test:safe

# For NOAA-specific tests (known to cause freezes)
npm run test:noaa-safe

# NEVER use these commands directly:
# npm test (FORBIDDEN)
# npx vitest (FORBIDDEN)
# npm run test (FORBIDDEN)
```

### Safety Mechanism Files:
- **Safe Runner:** `scripts/safe-test-runner.ts`
- **NOAA Safe Test:** `scripts/test-noaa-safe.ts`
- **Package Scripts:** Updated with safe test commands

### AI-NOTE: Test Freeze Prevention
This protocol was implemented after identifying that data tests cause system freezes/stack overflows. The safe test runner includes:
- 30-second timeout traps
- Output line limiting (max 100 lines)
- Stack overflow pattern detection
- Memory usage limits
- Process termination on infinite loops

**VIOLATION OF THIS PROTOCOL CAN CAUSE SYSTEM FREEZES**

---

## 7. Project Overview
- **Starcom App**: Decentralized web3 3D global cyber command interface for cyber investigations, intelligence, financial analysis, and monitoring.
- Built with React, TypeScript, Vite, Rust/WASM, Solidity, and artifact-driven development.

### Artifacts & Scripts
- **Onboarding Script:** `scripts/onboard.cjs`
- **Summary Artifact:** `cache/code-summary.json`
- **Health Artifact:** `cache/code-health.json`
- **Project Primer:** `.primer`
- **Authentication Implementation:** `artifacts/authentication-implementation.artifact`

### Current Development Phase: Authentication Refactor
**Status:** üîÑ **IN PROGRESS** (Not Complete)  
**Goal:** Remove broken authentication UI and implement minimal, functional auth system

**CRITICAL**: Authentication is NOT complete. Previous "COMPLETE" status reports have been archived as premature.

#### Current State:
- ‚ùå **Broken Authentication UI** exists in BottomLeft corner
- ‚ùå **Mixed EVM/Solana code** needs cleanup
- ‚ùå **No contextual auth** implementation yet
- ‚úÖ **Solana wallet adapter** is working
- ‚úÖ **Authentication artifacts** are current and accurate

#### Phase Objectives:
1. **Remove non-functional login UI** from BottomLeft corner
2. **Implement contextual authentication** that doesn't block unnecessary features
3. **Add minimal wallet status** to TopBar or appropriate location
4. **Ensure app works fully without login** for all non-blockchain features
5. **Clean up legacy EVM authentication** code

#### Key Implementation Files:
- **Planning:** `docs/development/authentication-refactor-plan.md`
- **Implementation Guide:** `artifacts/authentication-implementation.artifact`
- **Current Broken Auth:** `src/components/HUD/Corners/BottomLeft/BottomLeft.tsx`
- **Auth Context:** `src/context/AuthContext.tsx`
- **Auth Hook:** `src/hooks/useAuth.ts`

#### Authentication Philosophy:
- **No artificial barriers** - only require auth when blockchain operations needed
- **Contextual prompts** - show auth requirements inline with features
- **Progressive enhancement** - app fully functional without wallet connection
- **Minimal UI footprint** - no prominent auth UI taking up screen real estate

### Directory Anchors
- `src/`: Main app code (tests are colocated with their modules)
- `artifacts/`: Generated/reference artifacts
- `docs/`: Reference material and design notes
- `contracts/`: Smart contracts and ABIs
- `wasm-ephemeris/`, `wasm-mini-server/`: Rust/WASM modules

### Artifact-Driven Workflow
1. Check for existing artifacts before creating new ones.
2. When adding features, create/update artifacts in `artifacts/` and/or `docs/`.
3. Link code, tests, and docs to relevant artifacts.
4. **When running tests, ALWAYS use the safe test runner protocol.**
5. Use structured TODOs: `TODO: [QUESTION] ‚Äî [FILE/ARTIFACT]`
6. Leave `AI-NOTE:` comments for future agents.
