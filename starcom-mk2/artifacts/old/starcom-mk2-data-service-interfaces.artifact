# starcom-mk2 Data Service Interfaces.artifact

## Purpose
Define robust, extensible TypeScript interfaces and contracts for DataProvider, DataCacheService, and related abstractions, supporting error handling, observability, streaming, and multi-provider composition.

## Interfaces
```ts
// Observability contract for logging/metrics/tracing
export interface DataServiceObserver {
  onFetchStart?(key: string): void;
  onFetchEnd?(key: string, durationMs: number): void;
  onError?(key: string, error: Error): void;
  onCacheHit?(key: string): void;
  onCacheMiss?(key: string): void;
  onCacheEvict?(key: string): void;
}

// Generic data provider interface
export interface DataProvider<T = unknown> {
  fetchData(key: string, options?: Record<string, unknown>): Promise<T>;
  subscribe?(key: string, onData: (data: T) => void, options?: Record<string, unknown>): () => void;
  setObserver?(observer: DataServiceObserver): void;
}

// Generic cache service interface
export interface DataCacheService<T = unknown> {
  get(key: string): T | null;
  set(key: string, value: T, ttl?: number): void;
  delete(key: string): void;
  clear(): void;
  has(key: string): boolean;
  setObserver?(observer: DataServiceObserver): void;
}

// Example: Composing multiple providers (fallback, aggregation)
export class FallbackProvider<T> implements DataProvider<T> {
  constructor(private providers: DataProvider<T>[]) {}
  async fetchData(key: string, options?: Record<string, unknown>): Promise<T> {
    for (const provider of this.providers) {
      try {
        return await provider.fetchData(key, options);
      } catch (e) {
        // try next provider
      }
    }
    throw new Error('All providers failed');
  }
}
```

## Example Usage
- Implement a provider for EIA, Market, Weather, etc. by extending DataProvider and using observer hooks for logging/metrics.
- Implement a cache service for each domain, supporting TTL and observability.
- Use FallbackProvider or similar for multi-source/aggregation scenarios.

## Extensibility Notes
- Interfaces must support all current and future data domains (see refactor plan).
- Add streaming/subscription support for real-time data (Nostr, RSS, etc.).
- Add error handling, config, and observability hooks as needed.
- Encourage domain-specific extension via generics and composition.
