# Globe Shader Unification & Refactor Plan (2025-06-13)

## Goal
Unify and refactor shader handling for both Globe and TinyGlobe, ensuring visual consistency, maintainability, and best practices.

---

## File/Mode Mapping Table
| File                                      | Mode/Submode           | Shader/Material Used      | Custom/Default |
|--------------------------------------------|------------------------|--------------------------|---------------|
| src/components/Globe/Globe.tsx             | All standard modes     | react-globe.gl default   | Default       |
| src/components/TinyGlobe/TinyGlobe.tsx     | hologram               | Hologram (custom)        | Custom        |
| src/components/TinyGlobe/TinyGlobe.tsx     | dayNight               | DayNight (custom)        | Custom        |
| src/components/TinyGlobe/TinyGlobe.tsx     | blueMarble             | BlueMarble (custom)      | Custom        |
| src/components/TinyGlobe/TinyGlobe.tsx     | All standard modes     | react-globe.gl default   | Default       |

> TODO: Expand this table as new modes/materials are added. Link to code lines if possible.

---

## API Contract
- **Shader Selector Utility:**
  - `getGlobeMaterial(mode: string, submode: string, textures: object): THREE.Material | undefined`
  - Returns a custom material for special modes, or `undefined` for default.
- **Material Creators:**
  - `createHologramMaterial(textures: object): THREE.ShaderMaterial`
  - `createDayNightMaterial(textures: object): THREE.ShaderMaterial`
  - `createBlueMarbleMaterial(textures: object): THREE.ShaderMaterial`

---

## Migration Steps
1. Move all custom shader code from TinyGlobe.tsx to `src/components/Globe/shaders/`.
2. Refactor Globe and TinyGlobe to import and use the shared shader utilities.
3. Replace all direct material assignment with the shader selector utility.
4. Remove legacy/duplicated shader code from components.

---

## Test/Pass Criteria
- [ ] All visualization modes render as expected in both Globe and TinyGlobe.
- [ ] No visual drift between components for standard modes.
- [ ] Custom modes (e.g., hologram) render identically in both components if used.
- [ ] No runtime errors or warnings related to materials/shaders.
- [ ] (Optional) Before/after screenshots for each mode.

---

## Visual Evidence/Review Process
- [ ] Capture before/after screenshots for each mode in both components.
- [ ] Review by human or designer for visual consistency.
- [ ] Record feedback and sign-off in the progress artifact.

---

## Rollback Plan
- [ ] Commit all changes before refactor.
- [ ] If issues arise, revert to previous commit or restore legacy shader code.
- [ ] Document any legacy code that must be preserved.

---

## Ownership/Timeline
- **AI Agent (Copilot):** Code migration, artifact updates, initial testing.
- **Human Reviewer:** Visual review, feedback, and sign-off.
- **Target Completion:** 2025-06-20

---

## Stakeholder Feedback
- [ ] Section for reviewer/designer feedback after visual review.

---

## Gotchas/Issues
- Three.js/React-Three version mismatches can break shader compatibility.
- Only override material when absolutely necessary; default is preferred for maintainability.
- Custom shaders must be tested on both macOS and Windows for color/gamma consistency.
- Document any edge cases or legacy quirks encountered.

---

## Cross-Component Consistency Checklist
- [ ] Globe and TinyGlobe use the same shader logic for all shared modes.
- [ ] No visual or functional drift after refactor.
- [ ] All changes are reflected in both components.

---

## Checklist
- [ ] Centralize custom shaders
- [ ] Export material creators
- [ ] Implement shader selector utility
- [ ] Refactor Globe and TinyGlobe usage
- [ ] Document shader usage
- [ ] Test all modes
- [ ] Document results
