# starcom-mk2-web3-login-api.artifact

### How to Use This Artifact
- Use this file as the single source of truth for all public interfaces, context values, hooks, and utility functions for the login system.
- Reference this artifact before generating, editing, or refactoring any login-related code.
- See cross-references below for related artifacts and files.

### Cross-References
- Related artifacts: `starcom-mk2-web3-login-design.artifact`, `starcom-mk2-web3-login-implementation-plan.artifact`, `starcom-mk2-web3-login-ui-flows.artifact`, `starcom-mk2-web3-login-test-plan.artifact`, `starcom-mk2-web3-login-known-issues.artifact`, `starcom-mk2-web3-login-changelog.artifact`
- Related code: `src/context/AuthContext.ts`, `src/context/AuthContext.tsx`, `src/hooks/useWallet.ts`, `src/utils/wallet.ts`, `src/components/Auth/WalletStatus.tsx`, `src/components/Auth/TermsModal.tsx`

---

### AuthContext API
```ts
interface AuthContextType {
  isAuthenticated: boolean;
  address: string | null;
  provider: Provider | null;
  signer: Signer | null;
  connectWallet(): Promise<void>;
  disconnectWallet(): Promise<void>;
  isLoading: boolean;
  error: string | null;
  connectionStatus: 'idle' | 'connecting' | 'connected' | 'error';
  switchNetwork(targetChainId: number): Promise<void>;
  // BackendSession and authenticateWithBackend removed for decentralization
}
```

---

### Hooks
```ts
useAuth(): AuthContextType;
useWallet(): WalletState;
// useBackendAuth removed for decentralization
```

---

### Utility Functions
```ts
connectToWallet(targetChainId: number): Promise<WalletConnection>;
disconnectWallet(): Promise<void>;
isWalletConnected(): Promise<boolean>;
switchNetwork(chainId: number): Promise<void>;
// requestBackendNonce and submitBackendSignature removed for decentralization
```

---

### Example Usage
```tsx
const { isAuthenticated, connectWallet, disconnectWallet } = useAuth();
```

---

### On-Chain Roles & Token Gating (Finalized)
```ts
// Role-based access control and token gating for protected features/routes
interface OnChainRole {
  role: string; // e.g. 'ADMIN', 'USER', 'MODERATOR'
  hasRole: boolean;
}

interface TokenGate {
  tokenAddress: string;
  requiredBalance: string; // e.g. '1' for 1 NFT or 1 token
  hasAccess: boolean;
}

// Hooks (implemented):
useOnChainRoles(address: string | null): OnChainRole[];
// - Checks if address is contract owner (ADMIN) or not (USER) using ethers.js and contract.owner().
// - Requires contract address and ABI in src/contracts/IntelligenceMarketABI.json.
// - Returns roles: ADMIN (if owner), USER (always true).

useTokenGate(address: string | null, tokenAddress: string, requiredBalance: string): TokenGate;
// - Checks ERC-20 token balance using ethers.js and standard ERC20 ABI.
// - Returns hasAccess=true if balance >= requiredBalance (in token units).
// - Requires token contract address and ABI in src/contracts/ERC20ABI.json.
```

---

### Example Usage (Finalized)
```tsx
const roles = useOnChainRoles(address);
const isAdmin = roles.find(r => r.role === 'ADMIN')?.hasRole;
const tokenGate = useTokenGate(address, TOKEN_ADDRESS, '1');
if (!tokenGate.hasAccess) return <p>Access denied: You need the token.</p>;
```

---

### AI-NOTE
- On-chain role and token gating APIs are now implemented and tested. See changelog for details.
- If you add or change any public API, update this artifact and reference the change in the changelog.
