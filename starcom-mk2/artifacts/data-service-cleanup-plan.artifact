# Data Service Cleanup and Migration Plan

## Overview
This artifact outlines the plan to clean up unused/legacy data services and migrate useful functionality to the new centralized data management system.

## Service Audit Results

### ‚úÖ ACTIVELY USED SERVICES (Keep & Migrate)
1. **EIAService.ts** - Used by DashboardContext, useEIAData hook
   - Migration: Already started with EIADataProvider in centralized system
   - Action: Complete migration, then deprecate old service

2. **noaaSpaceWeather.ts** - Used by GlobeEngine, useSpaceWeatherData
   - Migration: Create NOAADataProvider for centralized system
   - Action: Migrate functions to provider pattern

3. **SpaceWeatherCacheService.ts** - Used by useSpaceWeatherData
   - Migration: Already implements DataCacheService interface
   - Action: Integrate with centralized manager

4. **WeatherDataService.ts** - Used by GlobeEngine
   - Migration: Create WeatherDataProvider
   - Action: Migrate to provider pattern

5. **AlertsService.ts** - Used by GlobeEngine
   - Migration: Create AlertsDataProvider
   - Action: Migrate to provider pattern

6. **GeoEventsService.ts** - Used by GlobeEngine
   - Migration: Create GeoEventsDataProvider
   - Action: Migrate to provider pattern

7. **SpaceAssetsService.ts** - Used by GlobeEngine
   - Migration: Create SpaceAssetsDataProvider
   - Action: Migrate to provider pattern

8. **IntelReportService.ts** - Used by intelligence API
   - Migration: Create IntelDataProvider
   - Action: Migrate to provider pattern

### üîÑ PARTIALLY USED SERVICES (Evaluate & Decide)
1. **ConflictZoneService.ts** - Multiple functions, check usage
   - Action: Audit actual usage, migrate if needed

2. **MarketDataService.ts** - Used by marketplace but limited
   - Action: Evaluate if worth migrating or can be simplified

### ‚ùå UNUSED/LEGACY SERVICES (Remove or Archive)
1. **ApiService.ts** - Generic service, likely unused
2. **BlockchainService.ts** - Legacy EVM service
3. **FeedsService.ts** - No imports found
4. **FiltersService.ts** - No imports found
5. **IPFSService.ts** - No imports found
6. **UCDPDataService.ts** - No imports found
7. **UserDataService.ts** - No imports found
8. **NOAAGeomagneticService.ts** - Partial implementation, not used

### üèóÔ∏è NEW STRUCTURE SERVICES (Keep & Enhance)
1. **data-management/** - New centralized architecture
2. **eia/** - New provider structure
3. **market/** - New provider structure
4. **shared/** - Common utilities
5. **crypto/** - Security services
6. **wallet/** - Wallet integration
7. **anchor/** - Solana integration

## Migration Strategy

### Phase 1: Create New Providers
1. Create NOAADataProvider for space weather data
2. Create WeatherDataProvider for weather data
3. Create AlertsDataProvider for alerts
4. Create GeoEventsDataProvider for geo events
5. Create SpaceAssetsDataProvider for space assets
6. Create IntelDataProvider for intelligence reports

### Phase 2: Update Consumers
1. Update GlobeEngine to use centralized data manager
2. Update hooks to use new providers
3. Update contexts to use new providers

### Phase 3: Remove Legacy Services
1. Archive unused services to legacy folder
2. Remove imports and references
3. Update documentation

## Implementation Plan

### Step 1: NOAA Data Provider (Priority 1)
- Migrate noaaSpaceWeather.ts functionality
- Support all NOAA endpoints from audit
- Integrate with existing caching

### Step 2: Globe Engine Providers (Priority 2)
- Create providers for all GlobeEngine dependencies
- Ensure minimal disruption to existing functionality

### Step 3: Legacy Cleanup (Priority 3)
- Remove unused services
- Clean up imports
- Update tests

## Benefits
- Unified data fetching architecture
- Better caching and observability
- Easier to add new data sources
- Consistent error handling
- Better testability
- Reduced code duplication

## Files to Modify
- GlobeEngine.ts (update imports and data fetching)
- useSpaceWeatherData.ts (update to use centralized manager)
- Various other hooks and contexts
- Remove unused service files

## Files to Create
- Multiple new provider classes
- Migration utilities
- Updated integration tests

## Estimated Effort
- Phase 1: ~8-12 hours
- Phase 2: ~6-8 hours  
- Phase 3: ~4-6 hours
- Total: ~18-26 hours

This cleanup will significantly improve the codebase's maintainability and set up the foundation for extensive NOAA endpoint expansion.
