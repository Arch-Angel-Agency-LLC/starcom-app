# NOAA Space Weather Data Analysis — Electric Field Integration

## Analysis Summary

**AI-NOTE:** Comprehensive analysis of NOAA SWPC data acquisition patterns for electric field datasets, focusing on `electric_field_interMag` and `electric_field_us_canada` integration into Starcom App.

## Data Acquisition Architecture

### Base API Structure
- **Base URL**: `https://services.swpc.noaa.gov/json/`
- **Data Categories**: Primary, Secondary, Tertiary endpoints
- **Electric Field Endpoints**:
  - `electric_field_us_canada`: `lists/rgeojson/US-Canada-1D/`
  - `electric_field_interMag`: `lists/rgeojson/InterMagEarthScope/`

### Key Discovery: Dynamic File Resolution
The NOAA API uses **timestamped files** rather than static endpoints for electric field data:
- Pattern: `YYYYMMDDTHHMMSS-15-Efield-empirical-EMTF-2022.12-0.5x0.5.json`
- Resolution Strategy:
  1. Try index file (`index.json`)
  2. Try latest alias (`latest.json`)
  3. Parse directory listing with regex: `(\d{8}T\d{6}-15-Efield-[\w.-]+\.json)`

## Data Structure Analysis

### GeoJSON FeatureCollection Format
```typescript
interface NOAAElectricFieldData {
  time_tag: string;          // "2025-02-23"
  cadence: number;           // 60 (seconds)
  product_version: string;   // "InterMagEarthScope" | "US-Canada-1D"
  type: "FeatureCollection";
  features: ElectricFieldFeature[];
}

interface ElectricFieldFeature {
  type: "Feature";
  geometry: {
    type: "Point";
    coordinates: [longitude: number, latitude: number]; // [lon, lat] format
  };
  properties: {
    Ex: number;                        // East-west electric field (V/m)
    Ey: number;                        // North-south electric field (V/m)
    quality_flag: number;              // Data reliability indicator
    distance_nearest_station: number;  // Distance from monitoring station (km)
  };
}
```

### Key Data Characteristics
- **Geospatial**: Uses standard GeoJSON format for globe visualization
- **Real-time**: 60-second cadence updates
- **Coverage**: 
  - InterMag: Global coverage focusing on magnetic observatories
  - US-Canada: North American regional focus
- **Quality Indicators**: Built-in data reliability flags

## Integration Strategy for Starcom App

### 1. Data Fetching Service
Create `src/services/noaaSpaceWeatherService.ts`:
- Implement dynamic file resolution logic
- Handle retry logic with exponential backoff
- Cache management for real-time updates
- Error handling for API failures

### 2. Globe Visualization Integration
Electric field data maps perfectly to Starcom's 3D globe:
- **GeoJSON coordinates** → Direct Three.js globe plotting
- **Electric field vectors** (Ex, Ey) → Directional overlays
- **Quality flags** → Visual intensity/opacity modulation

### 3. Intelligence Layer Correlation
Electric field anomalies indicate:
- **Geomagnetic storms** → Infrastructure threat analysis
- **Solar activity** → Satellite/communication disruption
- **Ground-induced currents** → Power grid vulnerability assessment

## Technical Implementation Patterns

### Robust HTTP Client Pattern
```python
# Key patterns from reference code:
session = requests.Session()
retry = Retry(total=5, backoff_factor=1, status_forcelist=[429, 500, 502, 503, 504])
adapter = HTTPAdapter(max_retries=retry)
session.mount('http://', adapter)
session.mount('https://', adapter)
```

### Dynamic Endpoint Resolution
```python
# Pattern for handling timestamped files:
def get_latest_file_url(base_url, directory_key):
    # 1. Try index.json
    # 2. Try latest.json alias  
    # 3. Parse directory listing with regex
    # 4. Sort by timestamp, return latest
```

### Data Validation & Quality Control
- **Quality flags**: Filter unreliable data points
- **Distance thresholds**: Weight data by station proximity
- **Temporal consistency**: Detect data gaps or anomalies

## Starcom Integration Points

### Globe Engine Integration
- **File**: `src/globe-engine/overlays/`
- **Data Type**: Electric field vector overlays
- **Visualization**: Color-coded intensity maps with directional arrows

### Intelligence Analysis
- **File**: `src/api/intelligence.ts`
- **Use Case**: Correlate electric field anomalies with intelligence reports
- **Alert System**: Threshold-based warnings for geomagnetic events

### Real-time Data Pipeline
- **File**: `src/workers/spaceWeatherWorker.ts`
- **Function**: Background data fetching every 60 seconds
- **Storage**: IndexedDB for offline capability

## Security & Performance Considerations

### Rate Limiting
- NOAA SWPC has implicit rate limits
- Implement client-side throttling
- Use conditional requests (If-Modified-Since headers)

### Data Volume Management
- Each dataset: ~50-100KB per update
- Retention policy: Keep 24-48 hours of historical data
- Compression: Use gzip for storage

### Error Recovery
- Graceful degradation when API unavailable
- Fallback to cached/historical data
- User notification of data staleness

## Implementation Complete ✅

### Files Created:
1. **`src/types/spaceWeather.ts`** — TypeScript interfaces for NOAA data structures
2. **`src/services/noaaSpaceWeatherService.ts`** — Complete service implementation with:
   - Dynamic file URL resolution (3-tier strategy)
   - Robust HTTP client with retry logic
   - Data processing and visualization preparation
   - Alert generation based on field strength thresholds
   - Caching with TTL for performance

3. **`src/hooks/useSpaceWeatherData.ts`** — React hook for UI integration:
   - Auto-refresh capability
   - Loading and error states
   - Visualization data preparation
   - Alert region mapping

4. **`src/components/SpaceWeather/SpaceWeatherStatus.tsx`** — Demo UI component:
   - Real-time status display
   - Alert visualization
   - Field strength indicators
   - Responsive Tailwind CSS styling

5. **`src/services/noaaSpaceWeatherService.test.ts`** — Comprehensive test suite:
   - Data processing validation
   - Error handling tests
   - Caching behavior verification
   - Alert generation testing

### Integration Ready
The NOAA space weather integration is complete and ready for integration with:
- **Globe Engine**: Electric field vectors as GeoJSON overlays
- **Intelligence API**: Correlation with intelligence reports
- **HUD System**: Real-time space weather status display
- **Alert System**: Geomagnetic storm warnings

### Next Steps for Implementation

1. **Create TypeScript interfaces** for NOAA data structures
2. **Implement HTTP client** with retry/caching logic
3. **Integrate with Globe Engine** for visualization
4. **Add to Intelligence API** for correlation analysis
5. **Create monitoring dashboard** for space weather status

## Artifact Dependencies
- `intel-report-integration-plan.artifact` — Overall integration strategy
- `intel-report-overlays.artifact` — Globe visualization patterns
- `intel-report-api-integration.artifact` — Service architecture

**Priority**: High — Electric field data provides critical real-time intelligence for infrastructure threat assessment and geomagnetic event monitoring.
