# Authentication Implementation Artifacts

**Artifact Type:** Development Specifications  
**Phase:** Authentication Refactor  
**Created:** June 23, 2025  

## üéØ **Component Architecture Specification**

### **AuthGate Component**
Smart wrapper for features requiring authentication:

```typescript
interface AuthGateProps {
  children: React.ReactNode;
  fallback?: React.ReactNode;
  requirement: 'wallet' | 'session' | 'both';
  action?: string; // Description of what requires auth
  inline?: boolean; // Show inline prompt vs redirect
}

const AuthGate: React.FC<AuthGateProps> = ({
  children,
  fallback,
  requirement,
  action = "this action",
  inline = true
}) => {
  const { connected, isAuthenticated } = useAuth();
  
  const hasWallet = requirement === 'wallet' && connected;
  const hasSession = requirement === 'session' && isAuthenticated;
  const hasBoth = requirement === 'both' && connected && isAuthenticated;
  
  const hasAccess = requirement === 'wallet' ? hasWallet :
                   requirement === 'session' ? hasSession : hasBoth;
  
  if (hasAccess) return <>{children}</>;
  
  if (fallback) return <>{fallback}</>;
  
  if (inline) {
    return <InlineConnector action={action} requirement={requirement} />;
  }
  
  return null;
};
```

### **WalletStatus Component**
Minimal status display for TopBar integration:

```typescript
interface WalletStatusProps {
  size?: 'small' | 'medium';
  showAddress?: boolean;
  position?: 'topbar' | 'sidebar';
}

const WalletStatus: React.FC<WalletStatusProps> = ({
  size = 'medium',
  showAddress = true,
  position = 'topbar'
}) => {
  const { connected, address, connectWallet, isLoading } = useAuth();
  
  if (isLoading) {
    return <span className="wallet-status loading">Connecting...</span>;
  }
  
  if (connected && address) {
    return (
      <div className={`wallet-status connected ${size} ${position}`}>
        <span className="status-dot"></span>
        {showAddress && (
          <span className="address">{address.slice(0, 6)}...</span>
        )}
      </div>
    );
  }
  
  return (
    <button 
      className={`wallet-connect-btn ${size} ${position}`}
      onClick={connectWallet}
    >
      Connect
    </button>
  );
};
```

### **InlineConnector Component**
Contextual authentication prompt:

```typescript
interface InlineConnectorProps {
  action: string;
  requirement: 'wallet' | 'session' | 'both';
  size?: 'small' | 'medium' | 'large';
  variant?: 'button' | 'card' | 'banner';
}

const InlineConnector: React.FC<InlineConnectorProps> = ({
  action,
  requirement,
  size = 'medium',
  variant = 'button'
}) => {
  const { connectWallet, authenticate } = useAuth();
  
  const handleConnect = async () => {
    if (requirement === 'wallet' || requirement === 'both') {
      await connectWallet();
    }
    if (requirement === 'session' || requirement === 'both') {
      await authenticate();
    }
  };
  
  const message = `Connect wallet to ${action}`;
  
  if (variant === 'button') {
    return (
      <button className={`inline-connector button ${size}`} onClick={handleConnect}>
        üîó {message}
      </button>
    );
  }
  
  if (variant === 'card') {
    return (
      <div className={`inline-connector card ${size}`}>
        <p>{message}</p>
        <button onClick={handleConnect}>Connect Wallet</button>
      </div>
    );
  }
  
  return (
    <div className={`inline-connector banner ${size}`}>
      <span>‚ö†Ô∏è {message}</span>
      <button onClick={handleConnect}>Connect</button>
    </div>
  );
};
```

## üé® **CSS Specifications**

### **Wallet Status Styles**
```css
/* Base wallet status styles */
.wallet-status {
  display: flex;
  align-items: center;
  gap: 6px;
  font-family: 'Aldrich-Regular', monospace;
  transition: all 0.2s ease;
}

.wallet-status.connected {
  color: #00ff88;
}

.wallet-status.loading {
  color: #ff6b35;
}

.wallet-status .status-dot {
  width: 8px;
  height: 8px;
  border-radius: 50%;
  background: #00ff88;
  box-shadow: 0 0 6px #00ff88;
}

.wallet-status .address {
  font-size: 0.85em;
  letter-spacing: 0.5px;
}

/* Size variants */
.wallet-status.small {
  font-size: 0.8rem;
}

.wallet-status.medium {
  font-size: 0.9rem;
}

/* Position variants */
.wallet-status.topbar {
  padding: 4px 8px;
}

.wallet-status.sidebar {
  padding: 2px 4px;
}

/* Connect button */
.wallet-connect-btn {
  background: rgba(0, 196, 255, 0.1);
  border: 1px solid rgba(0, 196, 255, 0.4);
  color: #00c4ff;
  padding: 4px 12px;
  border-radius: 4px;
  font-family: inherit;
  font-size: inherit;
  cursor: pointer;
  transition: all 0.2s ease;
}

.wallet-connect-btn:hover {
  background: rgba(0, 196, 255, 0.2);
  border-color: #00c4ff;
  box-shadow: 0 0 8px rgba(0, 196, 255, 0.3);
}

.wallet-connect-btn.small {
  padding: 2px 8px;
  font-size: 0.8rem;
}
```

### **Inline Connector Styles**
```css
/* Inline authentication prompts */
.inline-connector {
  display: inline-flex;
  align-items: center;
  gap: 8px;
  border-radius: 4px;
  transition: all 0.2s ease;
}

.inline-connector.button {
  padding: 6px 12px;
  background: rgba(255, 107, 53, 0.1);
  border: 1px solid rgba(255, 107, 53, 0.4);
  color: #ff6b35;
  cursor: pointer;
  text-decoration: none;
}

.inline-connector.button:hover {
  background: rgba(255, 107, 53, 0.2);
  border-color: #ff6b35;
}

.inline-connector.card {
  flex-direction: column;
  padding: 12px;
  background: rgba(0, 10, 20, 0.9);
  border: 1px solid rgba(0, 196, 255, 0.3);
  backdrop-filter: blur(10px);
}

.inline-connector.card p {
  margin: 0 0 8px 0;
  color: #ffffff;
}

.inline-connector.card button {
  background: rgba(0, 196, 255, 0.2);
  border: 1px solid #00c4ff;
  color: #00c4ff;
  padding: 6px 12px;
  border-radius: 4px;
  cursor: pointer;
}

.inline-connector.banner {
  padding: 8px 16px;
  background: rgba(255, 107, 53, 0.1);
  border: 1px solid rgba(255, 107, 53, 0.3);
  border-radius: 6px;
  justify-content: space-between;
  width: 100%;
}

.inline-connector.banner span {
  color: #ff6b35;
}

.inline-connector.banner button {
  background: rgba(255, 107, 53, 0.2);
  border: 1px solid #ff6b35;
  color: #ff6b35;
  padding: 4px 12px;
  border-radius: 4px;
  cursor: pointer;
}
```

## üîß **Hook Specifications**

### **Enhanced useAuth Hook**
```typescript
interface AuthState {
  // Connection state
  connected: boolean;
  connecting: boolean;
  address: string | null;
  
  // Session state  
  isAuthenticated: boolean;
  sessionValid: boolean;
  
  // Error state
  error: string | null;
  
  // Network state
  network: string;
  chainId: number;
}

interface AuthActions {
  connectWallet: () => Promise<void>;
  disconnectWallet: () => Promise<void>;
  authenticate: () => Promise<boolean>;
  logout: () => void;
  clearError: () => void;
  switchNetwork: (chainId: number) => Promise<void>;
}

const useAuth = (): AuthState & AuthActions => {
  // Implementation with enhanced error handling
  // and better state management
};
```

### **Feature Gate Hook**
```typescript
interface FeatureAccess {
  hasAccess: boolean;
  reason?: string;
  requirement: 'wallet' | 'session' | 'both' | 'none';
}

const useFeatureAccess = (feature: string): FeatureAccess => {
  const { connected, isAuthenticated } = useAuth();
  
  const featureRequirements: Record<string, 'wallet' | 'session' | 'both' | 'none'> = {
    'marketplace-purchase': 'wallet',
    'asset-creation': 'wallet', 
    'collaboration-create': 'both',
    'intel-submit': 'wallet',
    'bookmarks': 'session',
    'globe-view': 'none',
    'marketplace-browse': 'none'
  };
  
  const requirement = featureRequirements[feature] || 'none';
  
  if (requirement === 'none') {
    return { hasAccess: true, requirement };
  }
  
  if (requirement === 'wallet') {
    return { 
      hasAccess: connected, 
      requirement,
      reason: connected ? undefined : 'Wallet connection required'
    };
  }
  
  if (requirement === 'session') {
    return { 
      hasAccess: isAuthenticated, 
      requirement,
      reason: isAuthenticated ? undefined : 'Authentication required'
    };
  }
  
  // 'both'
  return {
    hasAccess: connected && isAuthenticated,
    requirement,
    reason: !connected ? 'Wallet connection required' : 
            !isAuthenticated ? 'Authentication required' : undefined
  };
};
```

## üì± **Integration Patterns**

### **TopBar Integration**
```typescript
// In TopBar.tsx - minimal integration
const TopBar: React.FC = () => {
  return (
    <header className={styles.topBar}>
      <button className={styles.settingsButton}>‚öôÔ∏è</button>
      <div className={styles.marqueeSection}>
        <Marquee dataPoints={dataPoints} />
      </div>
      <WalletStatus size="small" position="topbar" />
    </header>
  );
};
```

### **Marketplace Integration**
```typescript
// In marketplace components
const AssetPurchaseButton: React.FC<{asset: Asset}> = ({ asset }) => {
  return (
    <AuthGate 
      requirement="wallet" 
      action={`purchase ${asset.name}`}
      fallback={
        <InlineConnector 
          action={`purchase ${asset.name}`}
          requirement="wallet"
          variant="button"
        />
      }
    >
      <button onClick={() => purchaseAsset(asset.id)}>
        Buy {asset.price} SOL
      </button>
    </AuthGate>
  );
};
```

### **Collaboration Integration**
```typescript
// In collaboration components
const CreateSessionButton: React.FC = () => {
  return (
    <AuthGate requirement="both" action="create collaboration session">
      <button onClick={createSession}>
        Create Session
      </button>
    </AuthGate>
  );
};
```

## üß™ **Testing Specifications**

### **Component Tests**
```typescript
// AuthGate.test.tsx
describe('AuthGate', () => {
  it('renders children when requirements met', () => {
    render(
      <MockAuthProvider connected={true} authenticated={true}>
        <AuthGate requirement="both">
          <div>Protected Content</div>
        </AuthGate>
      </MockAuthProvider>
    );
    expect(screen.getByText('Protected Content')).toBeInTheDocument();
  });
  
  it('renders fallback when requirements not met', () => {
    render(
      <MockAuthProvider connected={false}>
        <AuthGate 
          requirement="wallet" 
          fallback={<div>Connect Wallet</div>}
        >
          <div>Protected Content</div>
        </AuthGate>
      </MockAuthProvider>
    );
    expect(screen.getByText('Connect Wallet')).toBeInTheDocument();
  });
});
```

### **Integration Tests**
```typescript
// auth-flow.test.tsx
describe('Authentication Flow', () => {
  it('completes full wallet connection flow', async () => {
    render(<App />);
    
    // Initially not connected
    expect(screen.getByText('Connect')).toBeInTheDocument();
    
    // Click connect
    fireEvent.click(screen.getByText('Connect'));
    
    // Wait for connection
    await waitFor(() => {
      expect(screen.getByText(/[a-zA-Z0-9]{6}\.\.\./)).toBeInTheDocument();
    });
    
    // Verify protected features now available
    expect(screen.queryByText('Connect wallet to')).not.toBeInTheDocument();
  });
});
```

## üìä **Performance Specifications**

### **Lazy Loading**
```typescript
// Lazy load wallet components
const WalletModal = lazy(() => import('@solana/wallet-adapter-react-ui').then(module => ({
  default: module.WalletModalProvider
})));

// Code splitting for auth components
const AuthGate = lazy(() => import('./components/Auth/AuthGate'));
```

### **Error Boundaries**
```typescript
const AuthErrorBoundary: React.FC<{children: React.ReactNode}> = ({ children }) => {
  return (
    <ErrorBoundary
      fallback={
        <div className="auth-error">
          Authentication system unavailable. Some features may be limited.
        </div>
      }
    >
      {children}
    </ErrorBoundary>
  );
};
```

---

These artifacts provide concrete implementation specifications for the authentication refactor, ensuring consistent, functional, and user-friendly wallet integration throughout the application.
