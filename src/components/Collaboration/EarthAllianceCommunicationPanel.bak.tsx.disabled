import React, { useState, useEffect, useRef, useCallback } from 'react';
import { useChat } from '../../context/ChatContext';
import { format } from 'date-fns';
import styles from './EarthAllianceCommunicationPanel.module.css';
import { ClearanceLevel, AgencyType } from '../../types/features/collaboration';
import { ChatMessage, ChatChannel, ChatUser } from '../../lib/chat/ChatInterface';

// Define message types
type MessageType = 'text' | 'intelligence' | 'alert' | 'status' | 'evidence' | 'verification' | 'emergency';

// Enhanced message with Earth Alliance specific fields
interface EarthAllianceMessage extends ChatMessage {
  type: MessageType;
  senderAgency?: AgencyType;
  clearanceLevel?: ClearanceLevel;
  pqcEncrypted?: boolean;
}

// Enhanced channel with Earth Alliance specific fields
interface EarthAllianceChannel extends ChatChannel {
  resistanceCell?: string;
  geographicRegion?: string;
  clearanceLevel?: ClearanceLevel;
  agency?: AgencyType;
  isActive?: boolean;
  channelType?: 'general' | 'evidence' | 'verification' | 'emergency';
}

// Evidence form interface
interface EvidenceForm {
  title: string;
  description: string;
  corruptionType: 'financial' | 'political' | 'media' | 'tech' | 'pharma' | 'energy' | 'military';
  evidenceType: 'document' | 'testimony' | 'financial_record' | 'communication' | 'video' | 'audio';
  targetEntities: string[];
  sourceProtection: 'public' | 'pseudonymous' | 'anonymous' | 'high_security';
  riskLevel: 'low' | 'medium' | 'high' | 'extreme';
}

// Verification form interface
interface VerificationForm {
  originalMessageId: string;
  verificationStatus: 'verified' | 'disputed' | 'requires_more_evidence';
  sourcesProvided: number;
  expertiseArea: string;
  confidenceLevel: number;
  additionalEvidence: string;
}

// Emergency coordination form interface
interface EmergencyForm {
  emergencyType: 'operational_security' | 'member_compromise' | 'evidence_critical' | 'timeline_threat';
  urgencyLevel: 'low' | 'medium' | 'high' | 'critical';
  description: string;
  actionRequired: string;
  timeframe: string;
  affectedRegions: string[];
  resourcesNeeded: string[];
}

interface EarthAllianceCommunicationPanelProps {
  cellCode?: string;
  region?: string;
  userDID?: string;
  operativeLevel?: 'civilian' | 'coordinator' | 'cell_leader' | 'alliance_command';
  securityLevel?: 'standard' | 'enhanced' | 'maximum';
}

const EarthAllianceCommunicationPanel: React.FC<EarthAllianceCommunicationPanelProps> = ({
  cellCode = 'ALPHA-001',
  region = 'Global',
  userDID = 'did:earth-alliance:operative',
  operativeLevel = 'civilian',
  securityLevel = 'enhanced'
}) => {
  // Use ChatContext
  const { 
    messages: contextMessages, 
    channels, 
    isConnected, 
    isLoading: contextLoading, 
    error: contextError,
    sendMessage, 
    connect, 
    setCurrentChannel,
    createChannel,
    provider,
    currentChannel
  } = useChat();

  // Local state for Earth Alliance specific functionality
  const [channelMessages, setChannelMessages] = useState<ChatMessage[]>([]);
  const [activeChannel, setActiveChannel] = useState<ChatChannel | null>(null);
  const [newMessage, setNewMessage] = useState('');
  const [messageType, setMessageType] = useState<MessageType>('text');
  const [bridgeStatus, setBridgeStatus] = useState<Record<string, {
    isHealthy: boolean;
    successRate: number;
    averageLatency: number;
    score: number;
  }>>({});
  const [activePanel, setActivePanel] = useState<'general' | 'evidence' | 'coordination' | 'verification'>('general');
  const messagesEndRef = useRef<HTMLDivElement>(null);
  
  // Form state for evidence submission
  const [evidenceForm, setEvidenceForm] = useState<EvidenceForm>({
    title: '',
    description: '',
    corruptionType: 'financial',
    evidenceType: 'document',
    targetEntities: [''],
    sourceProtection: 'pseudonymous',
    riskLevel: 'medium'
  });
  
  // Form state for truth verification
  const [verificationForm, setVerificationForm] = useState<VerificationForm>({
    originalMessageId: '',
    verificationStatus: 'verified',
    sourcesProvided: 1,
    expertiseArea: '',
    confidenceLevel: 80,
    additionalEvidence: ''
  });
  
  // Form state for emergency coordination
  const [emergencyForm, setEmergencyForm] = useState<EmergencyForm>({
    emergencyType: 'operational_security',
    urgencyLevel: 'medium',
    description: '',
    actionRequired: '',
    timeframe: '',
    affectedRegions: [''],
    resourcesNeeded: ['']
  });

  // Local error state for Earth Alliance specific functionality
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState<boolean>(contextLoading);
  const [retryCount, setRetryCount] = useState<number>(0);
  const maxRetries = 3;

  // Derived state to simplify usage
  const isServiceAvailable = isConnected && provider !== null;

  // Initialize Earth Alliance chat channel
  const initializeEarthAlliance = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);
      
      // Connect to chat provider if not already connected
      if (!isConnected) {
        console.log('Connecting to chat provider...');
        await connect({
          options: {
            userId: userDID,
            userName: `EA-${cellCode}`,
            metadata: {
              operativeLevel,
              region,
              securityLevel
            }
          }
        });
      }
      
      // Look for existing Earth Alliance channel
      const existingChannel = channels.find(c => 
        c.name === `EA-${cellCode}` || 
        c.id === cellCode ||
        (c.metadata?.resistanceCell === cellCode)
      );
      
      if (existingChannel) {
        console.log('Found existing Earth Alliance channel:', existingChannel.name);
        setActiveChannel(existingChannel);
        setCurrentChannel(existingChannel.id);
      } else {
        // Create new Earth Alliance channel
        console.log('Creating new Earth Alliance channel for cell:', cellCode);
        const channelName = `EA-${cellCode}-${region}`;
        
        try {
          await createChannel(
            channelName,
            'team',
            [userDID],
          );
          
          // Find the newly created channel
          const newChannel = channels.find(c => c.name === channelName);
          if (newChannel) {
            setActiveChannel(newChannel);
            setCurrentChannel(newChannel.id);
          }
        } catch (channelError) {
          console.error('Failed to create Earth Alliance channel:', channelError);
          setError(`Failed to create channel: ${channelError instanceof Error ? channelError.message : 'Unknown error'}`);
        }
      }
      
      // Set bridge status from provider capabilities
      if (provider) {
        const providerWithCapabilities = provider as any;
        if (providerWithCapabilities.getCapabilities) {
          const capabilities = await providerWithCapabilities.getCapabilities();
          
          // Convert capabilities to bridge status format
          const bridgeStatusFromCapabilities: Record<string, {
            isHealthy: boolean;
            successRate: number;
            averageLatency: number;
            score: number;
          }> = {};
          
          if (capabilities.endpoints) {
            for (const endpoint of capabilities.endpoints) {
              bridgeStatusFromCapabilities[endpoint.url] = {
                isHealthy: endpoint.status === 'connected',
                successRate: endpoint.reliability || 0.5,
                averageLatency: endpoint.latency || 100,
                score: endpoint.priority || 0.5
              };
            }
          }
          
          if (Object.keys(bridgeStatusFromCapabilities).length > 0) {
            setBridgeStatus(bridgeStatusFromCapabilities);
          } else {
            // Set default status if no endpoints available
            setBridgeStatus({
              'primary-relay': { isHealthy: true, successRate: 0.9, averageLatency: 100, score: 1.0 },
              'backup-relay': { isHealthy: true, successRate: 0.8, averageLatency: 150, score: 0.8 }
            });
          }
        }
      }
      
      setRetryCount(0);
    } catch (error) {
      console.error('Error initializing Earth Alliance communications:', error);
      setError(`Initialization error: ${error instanceof Error ? error.message : 'Unknown error'}`);
      
      // Increment retry counter and try again if under max retries
      if (retryCount < maxRetries) {
        const retryDelay = Math.min(1000 * Math.pow(2, retryCount), 10000);
        setTimeout(() => {
          setRetryCount(prev => prev + 1);
          initializeEarthAlliance();
        }, retryDelay);
      }
    } finally {
      setLoading(false);
    }
  }, [cellCode, region, userDID, securityLevel, isConnected, connect, channels, createChannel, 
       setCurrentChannel, provider, retryCount]);

  // Effect to initialize Earth Alliance communications
  useEffect(() => {
    initializeEarthAlliance();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  // Effect to update channel messages when current channel changes
  useEffect(() => {
    if (currentChannel && contextMessages[currentChannel]) {
      setChannelMessages(contextMessages[currentChannel]);
    }
  }, [currentChannel, contextMessages]);

  // Effect to scroll to bottom when messages change
  useEffect(() => {
    scrollToBottom();
  }, [channelMessages]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  // Send regular message using ChatContext
  const handleSendMessage = async () => {
    if (!newMessage.trim() || !activeChannel) return;
    
    if (!isConnected || !provider) {
      setError('Cannot send message: Service unavailable');
      return;
    }

    try {
      // Include metadata with the message
      // We need to extend the message with our metadata by manipulating the context
      const metadataExtension = {
        operativeLevel,
        reclamationCell: cellCode,
        region,
        securityLevel,
        messageType
      };
      
      // For evidence, verification, and emergency messages, we'll add additional metadata
      if (messageType === 'evidence' || messageType === 'verification' || messageType === 'emergency') {
        console.log(`Sending specialized message type: ${messageType}`);
      }
      
      // Send via ChatContext
      await sendMessage(`[${messageType.toUpperCase()}] ${newMessage}`);
      
      setNewMessage('');
      setError(null);
    } catch (error) {
      console.error('Failed to send Earth Alliance message:', error);
      setError(`Failed to send message: ${error instanceof Error ? error.message : 'Unknown error'}`);
      
      // Since we couldn't send through the provider, add a local message for better UX
      if (activeChannel) {
        const localMessage: ChatMessage = {
          id: `local-${Date.now()}`,
          channelId: activeChannel.id,
          senderId: userDID,
          senderName: `EA-${cellCode}`,
          content: `[${messageType.toUpperCase()}] ${newMessage}`,
          timestamp: Date.now(),
          status: 'failed',
          type: messageType as any,
          metadata: { 
            deliveryStatus: 'local-only',
            operativeLevel,
            reclamationCell: cellCode,
            region,
            securityLevel
          }
        };
        
        // Add to local state
        setChannelMessages(prev => [...prev, localMessage]);
        setNewMessage('');
      }
    }
  };

  // Submit evidence using ChatContext
  const handleSubmitEvidence = async () => {
    if (!activeChannel) return;
    
    if (!isConnected || !provider) {
      setError('Cannot submit evidence: Service unavailable');
      return;
    }

    try {
      // Format evidence as a structured message
      const evidenceContent = JSON.stringify({
        type: 'evidence',
        title: evidenceForm.title,
        description: evidenceForm.description,
        corruptionType: evidenceForm.corruptionType,
        evidenceType: evidenceForm.evidenceType,
        targetEntities: evidenceForm.targetEntities,
        sourceProtection: evidenceForm.sourceProtection,
        riskLevel: evidenceForm.riskLevel,
        submittedBy: userDID,
        timestamp: Date.now()
      });
      
      // Send via ChatContext
      await sendMessage(`[EVIDENCE] ${evidenceForm.title}\n${evidenceForm.description}`);
      
      // Reset form
      setEvidenceForm({
        title: '',
        description: '',
        corruptionType: 'financial',
        evidenceType: 'document',
        targetEntities: [''],
        sourceProtection: 'pseudonymous',
        riskLevel: 'medium'
      });

      setActivePanel('general');
      setError(null);
    } catch (error) {
      console.error('Failed to submit evidence:', error);
      setError(`Failed to submit evidence: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  };

  // Submit truth verification using ChatContext
  const handleSubmitVerification = async () => {
    if (!activeChannel) return;
    
    if (!isConnected || !provider) {
      setError('Cannot submit verification: Service unavailable');
      return;
    }

    try {
      // Format verification as a structured message
      const verificationContent = `[VERIFICATION] 
Status: ${verificationForm.verificationStatus.toUpperCase()}
Original Message: ${verificationForm.originalMessageId}
Sources: ${verificationForm.sourcesProvided}
Expertise: ${verificationForm.expertiseArea}
Confidence: ${verificationForm.confidenceLevel}%
Additional Evidence: ${verificationForm.additionalEvidence}`;
      
      // Send via ChatContext
      await sendMessage(verificationContent);
      
      // Reset form
      setVerificationForm({
        originalMessageId: '',
        verificationStatus: 'verified',
        sourcesProvided: 1,
        expertiseArea: '',
        confidenceLevel: 80,
        additionalEvidence: ''
      });

      setActivePanel('general');
      setError(null);
    } catch (error) {
      console.error('Failed to submit verification:', error);
      setError(`Failed to submit verification: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  };

  // Send emergency coordination using ChatContext
  const handleSendEmergency = async () => {
    if (!activeChannel) return;
    
    if (!isConnected || !provider) {
      setError('Cannot send emergency coordination: Service unavailable');
      return;
    }

    try {
      // Format emergency as a structured message
      const emergencyContent = `[EMERGENCY - ${emergencyForm.urgencyLevel.toUpperCase()}] 
Type: ${emergencyForm.emergencyType.replace('_', ' ').toUpperCase()}
Description: ${emergencyForm.description}
Action Required: ${emergencyForm.actionRequired}
Timeframe: ${emergencyForm.timeframe}
Affected Regions: ${emergencyForm.affectedRegions.join(', ')}
Resources Needed: ${emergencyForm.resourcesNeeded.join(', ')}`;
      
      // Send via ChatContext with high priority flag
      await sendMessage(emergencyContent);
      
      // Reset form
      setEmergencyForm({
        emergencyType: 'operational_security',
        urgencyLevel: 'medium',
        description: '',
        actionRequired: '',
        timeframe: '',
        affectedRegions: [''],
        resourcesNeeded: ['']
      });

      setActivePanel('general');
      setError(null);
    } catch (error) {
      console.error('Failed to send emergency coordination:', error);
      setError(`Failed to send emergency coordination: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  };

  const getMessageTypeIcon = (type: MessageType | string) => {
    switch (type) {
      case 'evidence': return '📁';
      case 'verification': return '✅';
      case 'emergency': return '🚨';
      case 'alert': return '⚠️';
      case 'intelligence': return '🕵️';
      default: return '💬';
    }
  };

  const getBridgeHealthIndicator = (bridge: string) => {
    const health = bridgeStatus[bridge];
    if (!health) return '⚪';
    if (health.isHealthy && health.successRate > 0.8) return '🟢';
    if (health.isHealthy && health.successRate > 0.5) return '🟡';
    return '🔴';
  };

  // Get current user ID for message styling
  const currentUserId = React.useMemo(() => {
    // Try multiple approaches to get the current user ID
    const providerWithUserId = provider as { userId?: string };
    if (providerWithUserId?.userId) return providerWithUserId.userId;
    
    const providerWithOptions = provider as { options?: { userId?: string } };
    if (providerWithOptions?.options?.userId) return providerWithOptions.options.userId;
    
    return userDID;
  }, [provider, userDID]);

  // Format timestamp
  const formatTime = (timestamp: number) => {
    try {
      return format(new Date(timestamp), 'h:mm a');
    } catch (err) {
      console.error('Error formatting timestamp:', timestamp, err);
      return 'Invalid time';
    }
  };

  // Render error state
  const renderErrorState = () => (
    <div>
      <p className={styles.errorMessage}>{error || 'Earth Alliance communication service is currently unavailable.'}</p>
      <p>Our systems are experiencing technical difficulties. Please try again later.</p>
      <button 
        className={styles.retryButton}
        onClick={() => {
          setIsServiceAvailable(true);
          setRetryCount(0);
          setError(null);
        }}
      >
        Retry Connection
      </button>
    </div>
  );
        </div>
      </div>
    );
  }

  // Render loading state
  if (loading) {
    return (
      <div className={styles.earthAlliancePanel}>
        <div className={styles.header}>
          <div className={styles.titleSection}>
            <h2>🌍 Earth Alliance Communications</h2>
            <div className={styles.cellInfo}>
              <span>Cell: {cellCode}</span>
              <span>Region: {region}</span>
              <span className={styles.connecting}>🟡 CONNECTING...</span>
            </div>
          </div>
        </div>
        
        <div className={styles.loadingContainer}>
          <div className={styles.loadingSpinner}></div>
          <p>Establishing secure connection to Earth Alliance network...</p>
          <p className={styles.smallText}>Attempt {retryCount + 1} of {maxRetries + 1}</p>
        </div>
      </div>
    );
  }

  return (
    <div className={styles.earthAlliancePanel}>
      {/* Header */}
      <div className={styles.header}>
        <div className={styles.titleSection}>
          <h2>🌍 Earth Alliance Communications</h2>
          <div className={styles.cellInfo}>
            <span>Cell: {cellCode}</span>
            <span>Region: {region}</span>
            <span>Security: {securityLevel.toUpperCase()}</span>
            <span className={isConnected ? styles.connected : styles.disconnected}>
              {isConnected ? '🟢 OPERATIONAL' : '🔴 OFFLINE'}
            </span>
          </div>
        </div>

        {/* Bridge Status */}
        <div className={styles.bridgeStatus}>
          <span>Bridges:</span>
          {Object.keys(bridgeStatus).map(bridge => (
            <span key={bridge} title={bridge}>
              {getBridgeHealthIndicator(bridge)}
            </span>
          ))}
        </div>
      </div>

      {/* Error notification */}
      {error && (
        <div className={styles.errorNotification}>
          <span className={styles.errorIcon}>⚠️</span>
          <span className={styles.errorText}>{error}</span>
          <button 
            className={styles.errorDismiss}
            onClick={() => setError(null)}
          >
            ×
          </button>
        </div>
      )}

      {/* Panel Navigation */}
      <div className={styles.panelNavigation}>
        <button 
          className={activePanel === 'general' ? styles.active : ''}
          onClick={() => setActivePanel('general')}
        >
          💬 General
        </button>
        <button 
          className={activePanel === 'evidence' ? styles.active : ''}
          onClick={() => setActivePanel('evidence')}
        >
          📁 Evidence
        </button>
        <button 
          className={activePanel === 'coordination' ? styles.active : ''}
          onClick={() => setActivePanel('coordination')}
        >
          🚨 Emergency
        </button>
        <button 
          className={activePanel === 'verification' ? styles.active : ''}
          onClick={() => setActivePanel('verification')}
        >
          ✅ Verify
        </button>
      </div>

      {/* General Communication Panel */}
      {activePanel === 'general' && (
        <>
          {/* Messages Display */}
          <div className={styles.messagesContainer}>
            {messages.length === 0 ? (
              <div className={styles.emptyState}>
                <div className={styles.emptyIcon}>💬</div>
                <div className={styles.emptyText}>No messages in this channel yet.</div>
              </div>
            ) : (
              messages.map((message) => (
                <div key={message.id} className={styles.message}>
                  <div className={styles.messageHeader}>
                    <span className={styles.messageType}>
                      {getMessageTypeIcon(message.messageType)}
                    </span>
                    <span className={styles.sender}>
                      {message.senderDID.slice(0, 20)}...
                    </span>
                    <span className={styles.timestamp}>
                      {new Date(message.timestamp).toLocaleTimeString()}
                    </span>
                    <span className={styles.security}>
                      {message.pqcEncrypted ? '🔐 PQC' : '🔒 STD'}
                    </span>
                  </div>
                  <div className={styles.messageContent}>
                    {message.content}
                  </div>
                  {message.metadata && (
                    <div className={styles.messageMetadata}>
                      {Object.entries(message.metadata).map(([key, value]) => (
                        <span key={key}>{key}: {String(value)}</span>
                      ))}
                    </div>
                  )}
                </div>
              ))
            )}
            <div ref={messagesEndRef} />
          </div>

          {/* Message Input */}
          <div className={styles.messageInput}>
            <select 
              value={messageType} 
              onChange={(e) => setMessageType(e.target.value as NostrMessage['messageType'])}
              disabled={!isConnected || !isServiceAvailable}
            >
              <option value="text">Text</option>
              <option value="intelligence">Intelligence</option>
              <option value="alert">Alert</option>
              <option value="status">Status</option>
            </select>
            <input
              type="text"
              value={newMessage}
              onChange={(e) => setNewMessage(e.target.value)}
              placeholder={isConnected ? "Enter message for Earth Alliance network..." : "Communication currently unavailable"}
              onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
              disabled={!isConnected || !isServiceAvailable}
            />
            <button 
              onClick={handleSendMessage} 
              disabled={!isConnected || !newMessage.trim() || !isServiceAvailable}
            >
              Send
            </button>
          </div>
        </>
      )}

      {/* Evidence Submission Panel */}
      {activePanel === 'evidence' && (
        <div className={styles.evidencePanel}>
          <h3>📁 Submit Corruption Evidence</h3>
          {!isConnected || !isServiceAvailable ? (
            <div className={styles.panelDisabledMessage}>
              <p>⚠️ Evidence submission is unavailable while offline</p>
            </div>
          ) : (
            <div className={styles.form}>
              <input
                type="text"
                placeholder="Evidence Title"
                value={evidenceForm.title}
                onChange={(e) => setEvidenceForm({...evidenceForm, title: e.target.value})}
              />
              <textarea
                placeholder="Detailed Description"
                value={evidenceForm.description}
                onChange={(e) => setEvidenceForm({...evidenceForm, description: e.target.value})}
              />
              <select
                value={evidenceForm.corruptionType}
                onChange={(e) => setEvidenceForm({...evidenceForm, corruptionType: e.target.value as 'financial' | 'political' | 'media' | 'tech' | 'pharma' | 'energy' | 'military'})}
              >
                <option value="financial">Financial</option>
                <option value="political">Political</option>
                <option value="media">Media</option>
                <option value="tech">Technology</option>
                <option value="pharma">Pharmaceutical</option>
                <option value="energy">Energy</option>
                <option value="military">Military</option>
              </select>
              <select
                value={evidenceForm.sourceProtection}
                onChange={(e) => setEvidenceForm({...evidenceForm, sourceProtection: e.target.value as 'public' | 'pseudonymous' | 'anonymous' | 'high_security'})}
              >
                <option value="public">Public</option>
                <option value="pseudonymous">Pseudonymous</option>
                <option value="anonymous">Anonymous</option>
                <option value="high_security">High Security</option>
              </select>
              <button 
                onClick={handleSubmitEvidence}
                disabled={!isConnected || !isServiceAvailable}
              >
                Submit Evidence
              </button>
            </div>
          )}
        </div>
      )}

      {/* Truth Verification Panel */}
      {activePanel === 'verification' && (
        <div className={styles.verificationPanel}>
          <h3>✅ Truth Verification</h3>
          {!isConnected || !isServiceAvailable ? (
            <div className={styles.panelDisabledMessage}>
              <p>⚠️ Truth verification is unavailable while offline</p>
            </div>
          ) : (
            <div className={styles.form}>
              <input
                type="text"
                placeholder="Original Message ID"
                value={verificationForm.originalMessageId}
                onChange={(e) => setVerificationForm({...verificationForm, originalMessageId: e.target.value})}
              />
              <input
                type="text"
                placeholder="Your Expertise Area"
                value={verificationForm.expertiseArea}
                onChange={(e) => setVerificationForm({...verificationForm, expertiseArea: e.target.value})}
              />
              <input
                type="range"
                min="0"
                max="100"
                value={verificationForm.confidenceLevel}
                onChange={(e) => setVerificationForm({...verificationForm, confidenceLevel: Number(e.target.value)})}
              />
              <span>Confidence: {verificationForm.confidenceLevel}%</span>
              <select
                value={verificationForm.verificationStatus}
                onChange={(e) => setVerificationForm({...verificationForm, verificationStatus: e.target.value as 'verified' | 'disputed' | 'requires_more_evidence'})}
              >
                <option value="verified">Verified</option>
                <option value="disputed">Disputed</option>
                <option value="requires_more_evidence">Needs More Evidence</option>
              </select>
              <button 
                onClick={handleSubmitVerification}
                disabled={!isConnected || !isServiceAvailable}
              >
                Submit Verification
              </button>
            </div>
          )}
        </div>
      )}

      {/* Emergency Coordination Panel */}
      {activePanel === 'coordination' && (
        <div className={styles.emergencyPanel}>
          <h3>🚨 Emergency Coordination</h3>
          {!isConnected || !isServiceAvailable ? (
            <div className={styles.panelDisabledMessage}>
              <p>⚠️ Emergency coordination is unavailable while offline</p>
            </div>
          ) : (
            <div className={styles.form}>
              <select
                value={emergencyForm.urgencyLevel}
                onChange={(e) => setEmergencyForm({...emergencyForm, urgencyLevel: e.target.value as 'low' | 'medium' | 'high' | 'critical'})}
              >
                <option value="low">Low</option>
                <option value="medium">Medium</option>
                <option value="high">High</option>
                <option value="critical">CRITICAL</option>
              </select>
              <select
                value={emergencyForm.emergencyType}
                onChange={(e) => setEmergencyForm({...emergencyForm, emergencyType: e.target.value as 'operational_security' | 'member_compromise' | 'evidence_critical' | 'timeline_threat'})}
              >
                <option value="operational_security">Operational Security</option>
                <option value="member_compromise">Member Compromise</option>
                <option value="evidence_critical">Critical Evidence</option>
                <option value="timeline_threat">Timeline Threat</option>
              </select>
              <textarea
                placeholder="Emergency Description"
                value={emergencyForm.description}
                onChange={(e) => setEmergencyForm({...emergencyForm, description: e.target.value})}
              />
              <input
                type="text"
                placeholder="Action Required"
                value={emergencyForm.actionRequired}
                onChange={(e) => setEmergencyForm({...emergencyForm, actionRequired: e.target.value})}
              />
              <input
                type="text"
                placeholder="Timeframe"
                value={emergencyForm.timeframe}
                onChange={(e) => setEmergencyForm({...emergencyForm, timeframe: e.target.value})}
              />
              <button 
                onClick={handleSendEmergency}
                className={styles.emergencyButton}
                disabled={!isConnected || !isServiceAvailable}
              >
                Send Emergency Coordination
              </button>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default EarthAllianceCommunicationPanel;
