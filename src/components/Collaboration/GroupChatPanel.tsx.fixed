import React, { useState, useEffect, useRef, useCallback } from 'react';
import { useWallet } from '@solana/wallet-adapter-react';
import NostrService, { NostrMessage, NostrTeamChannel } from '../../services/nostrService';
import { AgencyType, ClearanceLevel } from '../../types';
import styles from './GroupChatPanel.module.css';

interface GroupChatPanelProps {
  teamId?: string;
  channelName?: string;
  className?: string;
}

const GroupChatPanel: React.FC<GroupChatPanelProps> = ({
  teamId = 'starcom-main-chat',
  channelName = 'Main Team Chat',
  className = ''
}) => {
  const { connected, publicKey } = useWallet();
  const [messages, setMessages] = useState<NostrMessage[]>([]);
  const [activeChannel, setActiveChannel] = useState<NostrTeamChannel | null>(null);
  const [newMessage, setNewMessage] = useState('');
  const [isConnected, setIsConnected] = useState(false);
  const [isTyping, setIsTyping] = useState(false);
  const [userDID, setUserDID] = useState<string>('');
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);
  
  // Safely get NostrService instance with error handling
  const getNostrService = useCallback(() => {
    try {
      // Check if NostrService exists and getInstance method is available
      if (typeof NostrService === 'undefined') {
        throw new Error('NostrService is not defined');
      }
      
      if (typeof NostrService.getInstance !== 'function') {
        throw new Error('NostrService.getInstance is not a function');
      }
      
      const service = NostrService.getInstance();
      
      if (!service) {
        throw new Error('Failed to get NostrService instance');
      }
      
      return service;
    } catch (err) {
      console.error('Error getting NostrService instance:', err);
      setError(err instanceof Error ? err.message : 'Unknown error with NostrService');
      setIsConnected(false);
      return null;
    }
  }, []);

  // Initialize user and channel
  const initializeGroupChat = useCallback(async (userDid: string) => {
    setLoading(true);
    setError(null);
    
    try {
      const nostrService = getNostrService();
      
      if (!nostrService) {
        throw new Error('NostrService is not available');
      }
      
      // Check if isReady method exists and call it
      if (typeof nostrService.isReady !== 'function') {
        throw new Error('NostrService.isReady is not implemented');
      }
      
      if (!nostrService.isReady()) {
        console.log('NostrService not ready, initializing...');
        
        // Check if initialize method exists
        if (typeof nostrService.initialize === 'function') {
          await nostrService.initialize();
        } else {
          throw new Error('NostrService.initialize is not implemented');
        }
      }
      
      // Check if setUserDID method exists
      if (typeof nostrService.setUserDID !== 'function') {
        throw new Error('NostrService.setUserDID is not implemented');
      }
      
      nostrService.setUserDID(userDid);
      
      // Check if createTeamChannel method exists
      if (typeof nostrService.createTeamChannel !== 'function') {
        throw new Error('NostrService.createTeamChannel is not implemented');
      }
      
      // Create or join group chat channel
      const channel = await nostrService.createTeamChannel(
        teamId,
        channelName,
        'CONFIDENTIAL' as ClearanceLevel,
        'CYBER_COMMAND' as AgencyType,
        'Secure group chat for team coordination'
      );
      
      // Check if joinTeamChannel method exists
      if (typeof nostrService.joinTeamChannel !== 'function') {
        throw new Error('NostrService.joinTeamChannel is not implemented');
      }
      
      await nostrService.joinTeamChannel(channel.id, userDid, 'CONFIDENTIAL');
      setActiveChannel(channel);
      
      // Check if getChannelMessages method exists
      if (typeof nostrService.getChannelMessages !== 'function') {
        throw new Error('NostrService.getChannelMessages is not implemented');
      }
      
      const channelMessages = nostrService.getChannelMessages(channel.id);
      setMessages(channelMessages);
      setIsConnected(true);
      
    } catch (err) {
      console.error('Failed to initialize group chat:', err);
      setError(err instanceof Error ? err.message : 'Failed to initialize group chat');
      setIsConnected(false);
    } finally {
      setLoading(false);
    }
  }, [teamId, channelName, getNostrService]);

  // Handle user authentication and setup
  useEffect(() => {
    if (connected && publicKey) {
      const did = `did:sol:${publicKey.toString()}`;
      setUserDID(did);
      initializeGroupChat(did).catch(err => {
        console.error('Error in chat initialization:', err);
        setError(err instanceof Error ? err.message : 'Error initializing chat');
      });
    } else {
      setIsConnected(false);
    }
  }, [connected, publicKey, initializeGroupChat]);

  // Scroll to bottom when messages change
  useEffect(() => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [messages]);

  // Handle sending messages
  const handleSendMessage = async () => {
    if (!newMessage.trim() || !isConnected || !activeChannel) return;
    
    try {
      const nostrService = getNostrService();
      
      if (!nostrService) {
        throw new Error('NostrService is not available');
      }
      
      // Check if sendMessage method exists
      if (typeof nostrService.sendMessage !== 'function') {
        throw new Error('NostrService.sendMessage is not implemented');
      }
      
      await nostrService.sendMessage(activeChannel.id, newMessage, 'text');
      
      // Refresh messages
      if (typeof nostrService.getChannelMessages === 'function') {
        const updatedMessages = nostrService.getChannelMessages(activeChannel.id);
        setMessages(updatedMessages);
      }
      
      setNewMessage('');
      
    } catch (err) {
      console.error('Error sending message:', err);
      setError(err instanceof Error ? err.message : 'Failed to send message');
    }
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  // Loading state
  if (loading) {
    return (
      <div className={`${styles.groupChatPanel} ${className}`}>
        <div className={styles.loadingContainer}>
          <div className={styles.spinner}></div>
          <div>Loading secure communication channel...</div>
        </div>
      </div>
    );
  }

  // Error state
  if (error) {
    return (
      <div className={`${styles.groupChatPanel} ${className}`}>
        <div className={styles.errorContainer}>
          <div className={styles.errorIcon}>‚ö†Ô∏è</div>
          <div className={styles.errorTitle}>Communication Channel Error</div>
          <div className={styles.errorMessage}>{error}</div>
          <button 
            className={styles.retryButton}
            onClick={() => {
              setError(null);
              if (userDID) {
                initializeGroupChat(userDID);
              }
            }}
          >
            Retry Connection
          </button>
        </div>
      </div>
    );
  }

  // Not connected state
  if (!isConnected) {
    return (
      <div className={`${styles.groupChatPanel} ${className}`}>
        <div className={styles.disconnectedContainer}>
          <div className={styles.disconnectedIcon}>üîå</div>
          <div className={styles.disconnectedTitle}>Not Connected</div>
          <div className={styles.disconnectedMessage}>
            Please connect your wallet to join the secure communication channel.
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className={`${styles.groupChatPanel} ${className}`}>
      {/* Channel header */}
      <div className={styles.channelHeader}>
        <div className={styles.channelInfo}>
          <div className={styles.channelName}>{activeChannel?.name || channelName}</div>
          <div className={styles.channelDescription}>
            {activeChannel?.description || 'Secure team communication'}
          </div>
        </div>
        <div className={styles.channelStatus}>
          <div className={styles.statusIndicator}></div>
          <div className={styles.statusText}>SECURE</div>
        </div>
      </div>

      {/* Messages area */}
      <div className={styles.messagesContainer}>
        {messages.length === 0 ? (
          <div className={styles.emptyState}>
            <div className={styles.emptyIcon}>üí¨</div>
            <div className={styles.emptyText}>No messages yet. Start the conversation!</div>
          </div>
        ) : (
          messages.map((msg) => (
            <div 
              key={msg.id} 
              className={`${styles.messageItem} ${
                msg.senderDID === userDID ? styles.outgoingMessage : styles.incomingMessage
              }`}
            >
              <div className={styles.messageSender}>
                {msg.senderDID === userDID ? 'You' : msg.senderId}
              </div>
              <div className={styles.messageContent}>{msg.content}</div>
              <div className={styles.messageTime}>
                {new Date(msg.timestamp).toLocaleTimeString()}
              </div>
            </div>
          ))
        )}
        <div ref={messagesEndRef} />
      </div>

      {/* Input area */}
      <div className={styles.inputContainer}>
        <input
          ref={inputRef}
          type="text"
          className={styles.messageInput}
          placeholder="Type your message here..."
          value={newMessage}
          onChange={(e) => setNewMessage(e.target.value)}
          onKeyDown={handleKeyDown}
        />
        <button 
          className={styles.sendButton}
          onClick={handleSendMessage}
          disabled={!newMessage.trim() || !isConnected}
        >
          Send
        </button>
      </div>
    </div>
  );
};

export default GroupChatPanel;
