/**
 * SecureChatAdapter.test.ts
 * 
 * Tests for the SecureChatAdapter class.
 */

import { describe, it, expect, beforeEach, vi, afterEach } from 'vitest';
import { SecureChatAdapter } from '../adapters/SecureChatAdapter';
import { SearchOptions } from '../interfaces/ChatProviderInterface';
import { ChatErrorType, createChatError } from '../utils/ChatErrorHandling';

// Import our setup file
import './setupSecureChatAdapter';

describe('SecureChatAdapter', () => {
  let adapter: SecureChatAdapter;
  let mockService: any;

  beforeEach(() => {
    // Reset mocks
    vi.clearAllMocks();
    
    // Create a mock service for dependency injection
    mockService = {
      initialize: vi.fn().mockResolvedValue(undefined),
      connect: vi.fn().mockResolvedValue(undefined),
      disconnect: vi.fn().mockResolvedValue(undefined),
      isConnected: vi.fn().mockReturnValue(true),
      createChannel: vi.fn().mockImplementation((name, type, participants) => {
        return Promise.resolve({ channelId: `${type}-${Date.now()}` });
      }),
      getChannels: vi.fn().mockResolvedValue([
        { channelId: 'channel-1', name: 'Test Channel', type: 'group' }
      ]),
      joinChannel: vi.fn().mockResolvedValue(undefined),
      leaveChannel: vi.fn().mockResolvedValue(undefined),
      sendMessage: vi.fn().mockImplementation((channelId, content, attachments) => {
        return Promise.resolve({
          messageId: `msg-${Date.now()}`,
          content,
          timestamp: Date.now(),
          senderId: 'test-user',
          channelId,
          attachments: attachments || []
        });
      }),
      getMessages: vi.fn().mockResolvedValue([
        {
          messageId: 'msg-1',
          content: 'Test message',
          timestamp: Date.now(),
          senderId: 'test-user',
          channelId: 'channel-1'
        }
      ]),
      subscribeToMessages: vi.fn().mockReturnValue(() => {}),
      subscribeToPresence: vi.fn().mockReturnValue(() => {}),
      getActiveUsers: vi.fn().mockResolvedValue([
        { userId: 'user-1', userName: 'Test User', status: 'online' }
      ]),
      editMessage: vi.fn().mockImplementation((messageId, channelId, newContent) => {
        return Promise.resolve({
          messageId,
          content: newContent,
          timestamp: Date.now(),
          editedAt: Date.now(),
          senderId: 'test-user',
          channelId
        });
      }),
      deleteMessage: vi.fn().mockResolvedValue(undefined),
      createThread: vi.fn().mockImplementation((messageId, channelId, content) => {
        return Promise.resolve({
          messageId: `thread-msg-${Date.now()}`,
          content,
          timestamp: Date.now(),
          senderId: 'test-user',
          channelId,
          threadId: `thread-${Date.now()}`,
          parentMessageId: messageId
        });
      }),
      getThreadMessages: vi.fn().mockResolvedValue([
        {
          messageId: 'thread-msg-1',
          content: 'Thread reply',
          timestamp: Date.now(),
          senderId: 'test-user',
          channelId: 'channel-1',
          threadId: 'thread-1'
        }
      ]),
      subscribeToThreadMessages: vi.fn().mockReturnValue(() => {}),
      addReaction: vi.fn().mockResolvedValue(undefined),
      removeReaction: vi.fn().mockResolvedValue(undefined),
      enableEncryption: vi.fn(),
      isEncryptionEnabled: vi.fn().mockReturnValue(true),
      setPQCEnabled: vi.fn(),
      isPQCEnabled: vi.fn().mockReturnValue(true),
      searchMessages: vi.fn().mockImplementation((query, channelId) => {
        const messages = [
          {
            messageId: 'msg-search-1',
            content: `Message containing ${query}`,
            timestamp: Date.now(),
            senderId: 'test-user',
            channelId: channelId || 'channel-1'
          }
        ];
        
        return Promise.resolve({
          messages,
          totalResults: messages.length,
          hasMore: false,
          executionTimeMs: 50
        });
      })
    };

    // Create adapter with the mock service injected
    adapter = new SecureChatAdapter({
      userId: 'test-user',
      userName: 'Test User',
    }, mockService);
  });

  afterEach(() => {
    // Clean up
    vi.resetAllMocks();
  });

  it('should create an instance', () => {
    expect(adapter).toBeDefined();
    expect(adapter.getProtocolInfo().id).toBe('securechat');
  });

  it('should connect successfully', async () => {
    await adapter.connect();
    expect(mockService.connect).toHaveBeenCalled();
    expect(adapter.isConnected()).toBe(true);
  });

  it('should disconnect successfully', async () => {
    await adapter.connect();
    await adapter.disconnect();
    expect(mockService.disconnect).toHaveBeenCalled();
  });

  it('should get channels', async () => {
    const channels = await adapter.getChannels();
    expect(mockService.getChannels).toHaveBeenCalled();
    expect(channels.length).toBeGreaterThan(0);
    expect(channels[0].name).toBe('Test Channel');
  });

  it('should create a channel', async () => {
    const channelName = 'New Test Channel';
    const channelType = 'group';
    const participants: string[] = [];
    const channel = await adapter.createChannel(channelName, channelType, participants);
    expect(mockService.createChannel).toHaveBeenCalledWith(channelName, channelType, participants);
    expect(channel.id).toBeDefined();
  });

  it('should join a channel', async () => {
    await adapter.joinChannel('channel-1');
    expect(mockService.joinChannel).toHaveBeenCalledWith('channel-1');
  });

  it('should leave a channel', async () => {
    await adapter.leaveChannel('channel-1');
    expect(mockService.leaveChannel).toHaveBeenCalledWith('channel-1');
  });

  it('should send a message', async () => {
    const content = 'Test message';
    const message = await adapter.sendMessage('channel-1', content);
    expect(mockService.sendMessage).toHaveBeenCalledWith('channel-1', content, []);
    expect(message.content).toBe(content);
    expect(message.senderId).toBe('test-user');
  });

  it('should get messages', async () => {
    const messages = await adapter.getMessages('channel-1');
    expect(mockService.getMessages).toHaveBeenCalledWith('channel-1');
    expect(messages.length).toBeGreaterThan(0);
  });

  it('should subscribe to messages', () => {
    const callback = vi.fn();
    const unsubscribe = adapter.subscribeToMessages('channel-1', callback);
    expect(mockService.subscribeToMessages).toHaveBeenCalledWith('channel-1', expect.any(Function));
    expect(typeof unsubscribe).toBe('function');
  });

  it('should get users', async () => {
    const users = await adapter.getUsers('channel-1');
    expect(mockService.getActiveUsers).toHaveBeenCalled();
    expect(users.length).toBeGreaterThan(0);
  });

  it('should subscribe to user presence', () => {
    const callback = vi.fn();
    const unsubscribe = adapter.subscribeToUserPresence('channel-1', callback);
    expect(mockService.subscribeToPresence).toHaveBeenCalledWith('channel-1', expect.any(Function));
    expect(typeof unsubscribe).toBe('function');
  });

  it('should edit a message', async () => {
    const newContent = 'Edited message';
    const message = await adapter.editMessage('msg-1', 'channel-1', newContent);
    expect(mockService.editMessage).toHaveBeenCalledWith('msg-1', 'channel-1', newContent);
    expect(message.content).toBe(newContent);
  });

  it('should delete a message', async () => {
    await adapter.deleteMessage('msg-1', 'channel-1');
    expect(mockService.deleteMessage).toHaveBeenCalledWith('msg-1', 'channel-1');
  });

  it('should create a thread', async () => {
    const content = 'Thread message';
    const message = await adapter.createThread('msg-1', 'channel-1', content);
    expect(mockService.createThread).toHaveBeenCalledWith('msg-1', 'channel-1', content);
    expect(message.content).toBe(content);
    expect(message.threadId).toBeDefined();
  });

  it('should get thread messages', async () => {
    const messages = await adapter.getThreadMessages('thread-1');
    expect(mockService.getThreadMessages).toHaveBeenCalledWith('thread-1');
    expect(messages.length).toBeGreaterThan(0);
  });

  it('should add a reaction', async () => {
    await adapter.addReaction('msg-1', 'channel-1', '👍');
    expect(mockService.addReaction).toHaveBeenCalledWith('msg-1', 'channel-1', '👍');
  });

  it('should remove a reaction', async () => {
    await adapter.removeReaction('msg-1', 'channel-1', '👍');
    expect(mockService.removeReaction).toHaveBeenCalledWith('msg-1', 'channel-1', '👍');
  });

  it('should set encryption enabled', () => {
    adapter.setEncryptionEnabled(true);
    expect(mockService.enableEncryption).toHaveBeenCalledWith(true);
  });

  it('should set PQC enabled', () => {
    adapter.setPQCEnabled(true);
    expect(mockService.setPQCEnabled).toHaveBeenCalledWith(true);
  });

  it('should search messages', async () => {
    const query = 'test';
    const results = await adapter.searchMessages(query);
    expect(mockService.searchMessages).toHaveBeenCalledWith(query, undefined);
    expect(results.totalResults).toBeGreaterThan(0);
    expect(results.messages[0].content).toContain(query);
  });

  it('should search messages in a specific channel', async () => {
    const query = 'test';
    const channelId = 'channel-1';
    const results = await adapter.searchMessages(query, channelId);
    expect(mockService.searchMessages).toHaveBeenCalledWith(query, channelId);
    expect(results.totalResults).toBeGreaterThan(0);
  });

  it('should have all required features for a secure chat adapter', () => {
    expect(adapter.hasFeature('e2e_encryption')).toBe(true);
    expect(adapter.hasFeature('forward_secrecy')).toBe(true);
    expect(adapter.hasFeature('post_quantum_cryptography')).toBe(true);
  });

  it('should have all required capabilities for a secure chat adapter', () => {
    expect(adapter.hasCapability('encryption')).toBe(true);
    expect(adapter.hasCapability('messaging')).toBe(true);
    expect(adapter.hasCapability('channels')).toBe(true);
    expect(adapter.hasCapability('presence')).toBe(true);
  });
});
  });
  
  createThread = vi.fn().mockImplementation((messageId, channelId, content) => {
    const threadId = `thread-${messageId}`;
    const message = {
      messageId: `msg-thread-${Date.now()}`,
      content,
      timestamp: Date.now(),
      senderId: 'test-user',
      channelId,
      threadId,
      parentId: messageId
    };
    
    if (!this.messages.has(threadId)) {
      this.messages.set(threadId, []);
    }
    
    this.messages.get(threadId)?.push(message);
    return Promise.resolve(message);
  });
  
  getThreadMessages = vi.fn().mockImplementation((threadId) => {
    return Promise.resolve(this.messages.get(threadId) || []);
  });
  
  subscribeToThreadMessages = vi.fn().mockReturnValue(() => {});
  
  addReaction = vi.fn().mockImplementation((messageId, channelId, reaction) => {
    const messages = this.messages.get(channelId) || [];
    const message = messages.find(m => m.messageId === messageId);
    
    if (message) {
      if (!message.reactions) {
        message.reactions = {};
      }
      
      if (!message.reactions[reaction]) {
        message.reactions[reaction] = [];
      }
      
      message.reactions[reaction].push('test-user');
      return Promise.resolve();
    }
    
    return Promise.reject(new Error('Message not found'));
  });
  
  removeReaction = vi.fn().mockImplementation((messageId, channelId, reaction) => {
    const messages = this.messages.get(channelId) || [];
    const message = messages.find(m => m.messageId === messageId);
    
    if (message && message.reactions && message.reactions[reaction]) {
      const index = message.reactions[reaction].indexOf('test-user');
      if (index >= 0) {
        message.reactions[reaction].splice(index, 1);
      }
      return Promise.resolve();
    }
    
    return Promise.reject(new Error('Message not found'));
  });
  
  enableEncryption = vi.fn().mockImplementation((enabled) => {
    this.encryptionEnabled = enabled;
  });
  
  isEncryptionEnabled = vi.fn().mockImplementation(() => {
    return this.encryptionEnabled;
  });
  
  setPQCEnabled = vi.fn().mockImplementation((enabled) => {
    this.pqcEnabled = enabled;
  });
  
  isPQCEnabled = vi.fn().mockImplementation(() => {
    return this.pqcEnabled;
  });
  
  searchMessages = vi.fn().mockImplementation((query, channelId) => {
    const channelsToSearch = channelId 
      ? [channelId] 
      : Array.from(this.messages.keys());
    
    const results: any[] = [];
    
    for (const cid of channelsToSearch) {
      const channelMessages = this.messages.get(cid) || [];
      const matchingMessages = channelMessages.filter(
        msg => msg.content.toLowerCase().includes(query.toLowerCase())
      );
      results.push(...matchingMessages);
    }
    
    return Promise.resolve(results);
  });
}

// Mock the SecureChatIntegrationService module
vi.mock('../../../services/SecureChatIntegrationService', () => {
  const mockService = new MockSecureChatIntegrationService();
  
  return {
    SecureChatIntegrationService: {
      getInstance: vi.fn().mockReturnValue(mockService)
    }
  };
});

describe('SecureChatAdapter', () => {
  let adapter: SecureChatAdapter;
  let mockService: any;
  
  beforeEach(() => {
    // Reset mocks
    vi.clearAllMocks();
    
    // Get the mocked service
    mockService = MockSecureChatIntegrationService.getInstance();
    
    // Create adapter instance
    adapter = new SecureChatAdapter({
      userId: 'test-user',
      userName: 'Test User'
    });
  });
  
  afterEach(async () => {
    if (adapter.isConnected()) {
      await adapter.disconnect();
    }
  });
  
  it('should create an instance', () => {
    expect(adapter).toBeInstanceOf(SecureChatAdapter);
  });
  
  it('should connect successfully', async () => {
    await adapter.connect();
    expect(adapter.isConnected()).toBe(true);
    expect(mockService.connect).toHaveBeenCalled();
  });
  
  it('should handle connection errors gracefully', async () => {
    mockService.connect.mockRejectedValueOnce(new Error('Connection failed'));
    
    await expect(adapter.connect()).rejects.toThrow();
    expect(adapter.isConnected()).toBe(false);
  });
  
  it('should send and receive messages', async () => {
    await adapter.connect();
    
    const message = await adapter.sendMessage('global', 'Hello World');
    expect(message).toBeDefined();
    expect(message.content).toBe('Hello World');
    expect(mockService.sendMessage).toHaveBeenCalled();
    
    const messages = await adapter.getMessages('global');
    expect(messages.length).toBeGreaterThan(0);
    expect(mockService.getMessages).toHaveBeenCalled();
  });
  
  it('should handle message subscription and unsubscription', async () => {
    await adapter.connect();
    
    const callback = vi.fn();
    const unsubscribe = adapter.subscribeToMessages('global', callback);
    
    expect(typeof unsubscribe).toBe('function');
    expect(mockService.subscribeToMessages).toHaveBeenCalled();
    
    unsubscribe();
  });
  
  it('should handle channel operations', async () => {
    await adapter.connect();
    
    const channels = await adapter.getChannels();
    expect(Array.isArray(channels)).toBe(true);
    expect(mockService.getChannels).toHaveBeenCalled();
    
    await adapter.joinChannel('test-channel');
    expect(mockService.joinChannel).toHaveBeenCalledWith('test-channel');
    
    await adapter.leaveChannel('test-channel');
    expect(mockService.leaveChannel).toHaveBeenCalledWith('test-channel');
  });
  
  it('should handle creating a new channel', async () => {
    await adapter.connect();
    
    const newChannel = await adapter.createChannel('Test Channel', 'global', []);
    expect(newChannel).toBeDefined();
    expect(newChannel.id).toBeDefined();
    expect(mockService.createChannel).toHaveBeenCalled();
  });
  
  it('should handle getting active users', async () => {
    await adapter.connect();
    
    const users = await adapter.getUsers('global');
    expect(Array.isArray(users)).toBe(true);
    expect(mockService.getActiveUsers).toHaveBeenCalled();
  });
  
  it('should handle encryption settings', async () => {
    // Test encryption enabling
    adapter.setEncryptionEnabled(true);
    expect(mockService.enableEncryption).toHaveBeenCalledWith(true);
    
    // Test PQC settings
    adapter.setPQCEnabled(true);
    expect(mockService.setPQCEnabled).toHaveBeenCalledWith(true);
  });
  
  // New advanced tests
  
  it('should report correct protocol info', () => {
    const info = adapter.getProtocolInfo();
    expect(info.id).toBe('securechat');
    expect(info.name).toBe('SecureChat');
    expect(info.isEncrypted).toBe(true);
  });
  
  it('should report appropriate capabilities', () => {
    const capabilities = adapter.getCapabilities();
    expect(capabilities.encryption).toBe(true);
    expect(capabilities.e2e_encryption).toBe(true);
    expect(capabilities.forward_secrecy).toBe(true);
  });
  
  it('should correctly detect supported features', () => {
    expect(adapter.hasCapability('encryption')).toBe(true);
    expect(adapter.hasCapability('e2e_encryption')).toBe(true);
    expect(adapter.hasFeature('e2e_encryption')).toBe(true);
    expect(adapter.hasFeature('forward_secrecy')).toBe(true);
    expect(adapter.hasFeature('post_quantum_cryptography')).toBe(true);
    
    // Should return false for unsupported capabilities
    expect(adapter.hasCapability('nonexistent_capability')).toBe(false);
    expect(adapter.hasFeature('nonexistent_feature')).toBe(false);
  });
  
  it('should handle message editing', async () => {
    await adapter.connect();
    
    // Send a message first
    const originalMessage = await adapter.sendMessage('channel1', 'Original message');
    expect(originalMessage).toBeDefined();
    
    // Edit the message
    const editedMessage = await adapter.editMessage(originalMessage.id, 'channel1', 'Edited message');
    expect(editedMessage).toBeDefined();
    expect(editedMessage.content).toBe('Edited message');
    expect(mockService.editMessage).toHaveBeenCalled();
  });
  
  it('should handle message deletion', async () => {
    await adapter.connect();
    
    // Send a message first
    const message = await adapter.sendMessage('channel1', 'Message to delete');
    expect(message).toBeDefined();
    
    // Delete the message
    await adapter.deleteMessage(message.id, 'channel1');
    expect(mockService.deleteMessage).toHaveBeenCalledWith(message.id, 'channel1');
    
    // Verify deletion by checking messages
    mockService.getMessages.mockClear();
    const messages = await adapter.getMessages('channel1');
    expect(mockService.getMessages).toHaveBeenCalled();
    expect(messages.find(m => m.id === message.id)).toBeUndefined();
  });
  
  it('should handle thread creation and management', async () => {
    await adapter.connect();
    
    // Send a parent message
    const parentMessage = await adapter.sendMessage('channel1', 'Parent message');
    expect(parentMessage).toBeDefined();
    
    // Create a thread
    const threadMessage = await adapter.createThread(parentMessage.id, 'channel1', 'Thread reply');
    expect(threadMessage).toBeDefined();
    expect(mockService.createThread).toHaveBeenCalled();
    
    // Get thread messages
    const threadId = `thread-${parentMessage.id}`;
    const threadMessages = await adapter.getThreadMessages(threadId);
    expect(Array.isArray(threadMessages)).toBe(true);
    expect(mockService.getThreadMessages).toHaveBeenCalled();
    
    // Subscribe to thread messages
    const callback = vi.fn();
    const unsubscribe = adapter.subscribeToThreadMessages(threadId, callback);
    expect(typeof unsubscribe).toBe('function');
    expect(mockService.subscribeToThreadMessages).toHaveBeenCalled();
  });
  
  it('should handle message reactions', async () => {
    await adapter.connect();
    
    // Send a message first
    const message = await adapter.sendMessage('channel1', 'React to this message');
    expect(message).toBeDefined();
    
    // Add a reaction
    await adapter.addReaction(message.id, 'channel1', '👍');
    expect(mockService.addReaction).toHaveBeenCalledWith(message.id, 'channel1', '👍');
    
    // Remove a reaction
    await adapter.removeReaction(message.id, 'channel1', '👍');
    expect(mockService.removeReaction).toHaveBeenCalledWith(message.id, 'channel1', '👍');
  });
  
  it('should handle message searching', async () => {
    await adapter.connect();
    
    // Send some messages
    await adapter.sendMessage('channel1', 'This is a test message');
    await adapter.sendMessage('channel1', 'Another test message');
    await adapter.sendMessage('channel1', 'This message contains keyword');
    
    // Search for messages
    const searchResult = await adapter.searchMessages('keyword', 'channel1');
    expect(searchResult).toBeDefined();
    expect(mockService.searchMessages).toHaveBeenCalledWith('keyword', 'channel1');
    
    // Search across all channels
    const globalSearchResult = await adapter.searchMessages('test');
    expect(globalSearchResult).toBeDefined();
    expect(mockService.searchMessages).toHaveBeenCalledWith('test', undefined);
  });
  
  it('should handle error conditions properly', async () => {
    await adapter.connect();
    
    // Test error when trying to edit non-existent message
    mockService.editMessage.mockRejectedValueOnce(new Error('Message not found'));
    await expect(adapter.editMessage('nonexistent', 'channel1', 'New content')).rejects.toThrow();
    
    // Test error when trying to send message to non-existent channel
    mockService.sendMessage.mockRejectedValueOnce(new Error('Channel not found'));
    await expect(adapter.sendMessage('nonexistent', 'Message')).rejects.toThrow();
    
    // Test error when not connected
    await adapter.disconnect();
    await expect(adapter.sendMessage('channel1', 'Message')).rejects.toThrow();
  });
});
