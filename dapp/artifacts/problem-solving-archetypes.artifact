# Problem-Solving Archetypes Framework

**Artifact Type:** Decision-Making Framework  
**Purpose:** Prevent poor judgment loops and enforce thorough analysis before implementation  
**Created:** June 29, 2025  
**Problem Context:** GLB 3D Model Loading in Vite/React/Vercel Production Environment  

---

## **Archetype Definitions & Roles**

### **1. The Systems Architect (SA)**
**Role:** Deep technical understanding of system interactions  
**Focus:** Infrastructure, build processes, deployment pipelines  
**Questions:**
- How do the build systems actually work together?
- What are the fundamental constraints of each platform?
- Where are the architectural mismatches occurring?

**Decision Power:** ‚ùå BLOCKS implementation until system understanding is complete  
**Motto:** "No code until we understand the full system flow"

### **2. The Detective (DT)**
**Role:** Evidence-based investigation and root cause analysis  
**Focus:** Facts, logs, actual behavior vs expected behavior  
**Questions:**
- What exactly is happening vs what we think is happening?
- What evidence do we have? What evidence are we missing?
- What assumptions have we made that might be wrong?

**Decision Power:** ‚ùå BLOCKS implementation until evidence is gathered  
**Motto:** "Show me the logs, show me the actual files, show me the network requests"

### **3. The Innovation Engineer (IE)**
**Role:** Creative problem-solving and alternative approaches  
**Focus:** Novel solutions, thinking outside conventional patterns  
**Questions:**
- What if we're solving the wrong problem?
- What completely different approaches exist?
- What would a ground-up redesign look like?

**Decision Power:** ‚ùå BLOCKS conventional solutions, demands creative alternatives  
**Motto:** "If everyone else would do X, we should consider Y and Z first"

### **4. The Risk Analyst (RA)**
**Role:** Failure prediction and solution sustainability  
**Focus:** What could go wrong, maintainability, future-proofing  
**Questions:**
- What are all the ways this could fail?
- How will this solution age over time?
- What dependencies does this create?

**Decision Power:** ‚ùå BLOCKS solutions with high failure risk  
**Motto:** "If it feels like a hack, it probably is"

### **5. The Implementation Guardian (IG)**
**Role:** Code quality and implementation standards  
**Focus:** Clean code, maintainability, performance  
**Questions:**
- Is this solution elegant and maintainable?
- Does this follow best practices?
- Will future developers understand this?

**Decision Power:** ‚ùå BLOCKS implementation until design is solid  
**Motto:** "No shortcuts, no band-aids, no technical debt"

---

## **Consensus Protocol**

### **Phase 1: Problem Analysis (All Archetypes Must Agree)**
1. **SA:** System flow and constraints documented
2. **DT:** Evidence gathered and verified
3. **IE:** Alternative approaches identified
4. **RA:** Risk factors catalogued
5. **IG:** Implementation requirements defined

**Consensus Required:** ‚úÖ ALL archetypes must approve before Phase 2

### **Phase 2: Solution Design (Majority Consensus)**
1. Each archetype evaluates proposed solutions
2. Minimum 4/5 archetypes must approve solution direction
3. Any archetype can demand return to Phase 1 with new evidence

### **Phase 3: Implementation Planning (Implementation Guardian Final Approval)**
1. **IG** has final veto power on implementation approach
2. **RA** must sign off on risk mitigation
3. **SA** must confirm architectural soundness

---

## **Current Problem Application**

### **Systems Architect Analysis:**
**Status:** üîÑ IN PROGRESS  
**Key Questions:**
- How does Vite's asset processing actually work?
- What is Vercel's exact static file serving algorithm?
- Where in the build pipeline do files get processed?
- What are the fundamental constraints we're working within?

### **Detective Analysis:**
**Status:** üîÑ IN PROGRESS  
**Evidence Needed:**
- Exact build output inspection (what files exist where)
- Network request analysis (what URLs are actually being requested)
- Vite import resolution debugging (what do our imports actually resolve to)
- Vercel routing decision trace (why is SPA rewrite triggered)

### **Innovation Engineer Analysis:**
**Status:** üîÑ IN PROGRESS  
**Alternative Approaches:**
- Asset proxy service pattern
- Build-time GLB processing
- Runtime asset resolution
- External hosting strategies
- Base64 inline conversion

### **Risk Analyst Analysis:**
**Status:** üîÑ IN PROGRESS  
**Risk Factors:**
- Platform lock-in with Vercel-specific solutions
- Build complexity and maintainability
- Performance implications of different approaches
- Future scalability concerns

### **Implementation Guardian Analysis:**
**Status:** ‚è∏Ô∏è WAITING  
**Requirements:**
- Solution must be maintainable and documented
- No platform-specific hacks
- Clear error handling and fallbacks
- Performance optimized

---

## **Decision Log**

### **Decision 1: No More ?url Attempts**
**Proposed By:** Historical Evidence  
**Archetype Consensus:**
- **SA:** ‚úÖ Agrees - ?url has architectural issues
- **DT:** ‚úÖ Evidence shows repeated failures
- **IE:** ‚úÖ Demands alternative approaches
- **RA:** ‚úÖ High risk of continued failure
- **IG:** ‚úÖ Not a clean solution

**Status:** ‚úÖ APPROVED - No more ?url attempts

### **Decision 2: Deep Investigation Required**
**Proposed By:** All Archetypes  
**Requirements:**
1. **SA:** Map complete Vite ‚Üí Vercel build flow
2. **DT:** Capture actual network requests and responses
3. **IE:** Research 5+ alternative approaches
4. **RA:** Document failure modes of each approach
5. **IG:** Define clean implementation criteria

**Status:** üîÑ IN PROGRESS

---

## **Usage Protocol for AI Agent**

### **Before Any Implementation:**
1. Consult ALL archetypes
2. Document their positions
3. Achieve consensus or return to analysis
4. Update this artifact with decisions

### **When Stuck:**
1. Add new evidence to Detective section
2. Ask Innovation Engineer for new approaches
3. Have Risk Analyst evaluate current path
4. Let Systems Architect identify missing knowledge

### **No Implementation Without:**
- ‚úÖ Systems Architect understanding
- ‚úÖ Detective evidence
- ‚úÖ Innovation Engineer alternatives
- ‚úÖ Risk Analyst approval
- ‚úÖ Implementation Guardian design review

**CRITICAL:** This artifact must be updated continuously and referenced before every major decision.
